---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-advisory-task
  labels:
    app.kubernetes.io/version: "0.12.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |
      Pushes an advisory yaml to a Git repository.
      The task will always exit 0 even if something fails. This is because the task result will not be
      set if the task fails, and the task result should always be set and propagated back to the cluster
      that creates the internal request. The success/failure is handled in the task creating the internal
      request.
  params:
    - name: advisory_json
      type: string
      description: |
          String containing a JSON representation of the advisory data (e.g. '{"product_id":123,"type":"RHSA"}').
    - name: application
      type: string
      description: Application being released
    - name: origin
      type: string
      description: |
          The origin workspace where the release CR comes from.
          This is used to determine the advisory path
    - name: config_map_name
      type: string
      description: The name of the configMap that contains the signing key
    - name: advisory_secret_name
      type: string
      description: The name of the secret that contains the advisory creation metadata
    - name: errata_secret_name
      type: string
      description: The name of the secret that contains the errata service account metadata
    - name: internalRequestPipelineRunName
      type: string
      description: Name of the PipelineRun that called this task
  results:
    - name: result
      description: Success if the task succeeds, the error otherwise
    - name: advisory_url
      description: The advisory url if the task succeeds, empty string otherwise
    - name: internalRequestPipelineRunName
      description: Name of the PipelineRun that called this task
    - name: internalRequestTaskRunName
      description: Name of this Task Run to be made available to caller
  steps:
    - name: create-advisory
      image: quay.io/scoheb/release-service-utils:2 #quay.io/konflux-ci/release-service-utils:0b2f257d7a5c2a881c36c23f8ae3cd5e89db593a
      env:
        - name: GITLAB_HOST
          valueFrom:
            secretKeyRef:
              name: $(params.advisory_secret_name)
              key: gitlab_host
        # This is a GitLab Project access token. Go to the settings/access_tokens page
        # of your repository to create one. It should have the Developer role with read
        # and write repository rights.
        - name: ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.advisory_secret_name)
              key: gitlab_access_token
        - name: GIT_AUTHOR_NAME
          valueFrom:
            secretKeyRef:
              name: $(params.advisory_secret_name)
              key: git_author_name
        - name: GIT_AUTHOR_EMAIL
          valueFrom:
            secretKeyRef:
              name: $(params.advisory_secret_name)
              key: git_author_email
        - name: GIT_REPO
          valueFrom:
            secretKeyRef:
              name: $(params.advisory_secret_name)
              key: git_repo
        - name: ERRATA_API
          valueFrom:
            secretKeyRef:
              name: $(params.errata_secret_name)
              key: errata_api
        - name: SERVICE_ACCOUNT_NAME
          valueFrom:
            secretKeyRef:
              name: $(params.errata_secret_name)
              key: name
        - name: SERVICE_ACCOUNT_KEYTAB
          valueFrom:
            secretKeyRef:
              name: $(params.errata_secret_name)
              key: base64_keytab
        - name: "ADVISORY_JSON"
          value: "$(params.advisory_json)"
      script: |
          #!/usr/bin/env bash
          set -eo pipefail

          STDERR_FILE=/tmp/stderr.txt
          echo -n "$(params.internalRequestPipelineRunName)" > "$(results.internalRequestPipelineRunName.path)"
          echo -n "$(context.taskRun.name)" > "$(results.internalRequestTaskRunName.path)"

          exitfunc() {
              local err=$1
              local line=$2
              local command="$3"
              if [ "$err" -eq 0 ] ; then
                  echo -n "Success" > "$(results.result.path)"
              else
                  echo -n \
                    "$0: ERROR '$command' failed at line $line - exited with status $err" > "$(results.result.path)"
                  if [ -f "$STDERR_FILE" ] ; then
                      tail -n 20 "$STDERR_FILE" >> "$(results.result.path)"
                  fi
              fi
              echo -n "${ADVISORY_URL}" > "$(results.advisory_url.path)"
              exit 0 # exit the script cleanly as there is no point in proceeding past an error or exit call
          }
          # due to set -e, this catches all EXIT and ERR calls and the task should never fail with nonzero exit code
          trap 'exitfunc $? $LINENO "$BASH_COMMAND"' EXIT

          REPO_BRANCH=main
          ADVISORY_URL=""

          # Switch to /tmp to avoid filesystem permission issues
          cd /tmp

          # loading git and gitlab functions
          # shellcheck source=/dev/null
          . /home/utils/gitlab-functions
          # shellcheck source=/dev/null
          . /home/utils/git-functions
          gitlab_init
          git_functions_init

          # This also cds into the git repo
          git_clone_and_checkout --repository "$GIT_REPO" --revision "$REPO_BRANCH"

          # Inject signing key into ADVISORY_JSON
          signingKey=$(kubectl get configmap "$(params.config_map_name)" -o jsonpath="{.data.SIG_KEY_NAME}")
          advisoryJsonWithKey=$(jq -c --arg key "$signingKey" \
            '.content.images[] += {"signingKey": $key}' <<< "$ADVISORY_JSON")

          # write keytab to file
          echo -n "${SERVICE_ACCOUNT_KEYTAB}" | base64 --decode > /tmp/keytab
          # workaround kinit: Invalid UID in persistent keyring name while getting default ccache
          KRB5CCNAME=$(mktemp)
          export KRB5CCNAME
          # see https://stackoverflow.com/a/12308187
          KRB5_CONFIG=$(mktemp)
          export KRB5_CONFIG
          export KRB5_TRACE=/dev/stderr
          sed '/\[libdefaults\]/a\    dns_canonicalize_hostname = false' /etc/krb5.conf > "${KRB5_CONFIG}"
          kinit "${SERVICE_ACCOUNT_NAME}" -k -t /tmp/keytab
          ID=$(curl --retry 3 --negotiate -u : "${ERRATA_API}/advisory/reserve_live_id" -XPOST | jq -r '.live_id')
          ADVISORY_NUM=$(printf "%04d" "$ID")

          # Use ISO 8601 format in UTC/Zulu time, e.g. 2024-03-06T17:27:38Z
          SHIP_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          YEAR=${SHIP_DATE%%-*} # derive the year from the ship date
          # group advisories by <origin workspace>/year
          ADVISORY_DIR="data/advisories/$(params.origin)/${YEAR}/${ADVISORY_NUM}"
          mkdir -p "${ADVISORY_DIR}"
          ADVISORY_FILEPATH="${ADVISORY_DIR}/advisory.yaml"
          ADVISORY_NAME="${YEAR}:${ADVISORY_NUM}"

          # Prepare variables for the advisory template
          DATA=$(jq -c '{"advisory":{"spec":.}}' <<< "$advisoryJsonWithKey")
          DATA=$(jq -c --arg advisory_name "$ADVISORY_NAME" --arg advisory_ship_date "$SHIP_DATE" \
            '$ARGS.named + .' <<< "$DATA")

          # Create advisory file
          /home/utils/apply_template.py -o "$ADVISORY_FILEPATH" --data "$DATA" \
            --template /home/templates/advisory.yaml.jinja

          cat "$ADVISORY_FILEPATH"
          # Ensure the created advisory file passes the advisory schema
          check-jsonschema --schemafile schema/advisory.json "$ADVISORY_FILEPATH" 2> "$STDERR_FILE"

          git add "${ADVISORY_FILEPATH}"
          git commit -m "[Konflux Release] new advisory for $(params.application)"
          echo "Pushing to ${REPO_BRANCH}..."
          git_push_with_retries --branch $REPO_BRANCH --retries 5 --url origin 2> "$STDERR_FILE"
          # Construct the advisory url to report back to the user as a result
          # Note: This currently only supports gitlab repos, which is all we expect for now
          ADVISORY_URL="${GIT_REPO//\.git/}/-/blob/${REPO_BRANCH}/${ADVISORY_FILEPATH}"
