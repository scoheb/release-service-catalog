---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-advisory-oci-artifact-task
  labels:
    app.kubernetes.io/version: "0.0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |
      Creates an oci artifact of an advisory given a Gitlab URL.
      The task will always exit 0 even if something fails. This is because the task result will not be
      set if the task fails, and the task result should always be set and propagated back to the cluster
      that creates the internal request. The success/failure is handled in the task creating the internal
      request.
  params:
    - name: advisory_url
      type: string
      description: the url of the advisory
    - name: internalRequestPipelineRunName
      type: string
      description: Name of the PipelineRun that called this task
    - name: trusted_artifacts_dockerconfig_json_secret_name
      type: string
      description: The name of the secret that contains to dockerconfig json to use for trusted artifact operations
      default: quay-token-konflux-release-trusted-artifacts-secret
  results:
    - name: result
      description: Success if the task succeeds, the error otherwise
    - name: advisory_oci_artifact
      description: The advisory oci artifact location if the task succeeds, empty string otherwise
    - name: internalRequestPipelineRunName
      description: Name of the PipelineRun that called this task
    - name: internalRequestTaskRunName
      description: Name of this Task Run to be made available to caller
  steps:
    - name: create-advisory-oci-artifact
      image: quay.io/konflux-ci/release-service-utils:26e22ecf2c23e7ec8134fede3b40a6e6aef8ac20
      env:
        - name: TRUSTED_ARTIFACTS_DOCKERCONFIG_JSON
          valueFrom:
            secretKeyRef:
              name: $(params.trusted_artifacts_dockerconfig_json_secret_name)
              key: .dockerconfigjson
              optional: true
      script: |
        #!/usr/bin/env bash
        set -eo pipefail

        STDERR_FILE=/tmp/stderr.txt
        echo -n "$(params.internalRequestPipelineRunName)" > "$(results.internalRequestPipelineRunName.path)"
        echo -n "$(context.taskRun.name)" > "$(results.internalRequestTaskRunName.path)"

        exitfunc() {
            local err=$1
            local line=$2
            local command="$3"
            if [ "$err" -eq 0 ] ; then
                echo -n "Success" > "$(results.result.path)"
            else
                echo -n \
                  "$0: ERROR '$command' failed at line $line - exited with status $err" > "$(results.result.path)"
                if [ -f "$STDERR_FILE" ] ; then
                    tail -n 20 "$STDERR_FILE" >> "$(results.result.path)"
                fi
            fi
            echo -n "${ADVISORY_OCI_ARTIFACT}" > "$(results.advisory_oci_artifact.path)"
            exit 0 # exit the script cleanly as there is no point in proceeding past an error or exit call
        }
        # due to set -e, this catches all EXIT and ERR calls and the task should never fail with nonzero exit code
        trap 'exitfunc $? $LINENO "$BASH_COMMAND"' EXIT

        ## AppSRE clusters do not enable credentials-init in Tekton
        ## therefore, we need to do it ourselves.
        ## This will be used later in create-trusted-artifact
        if [ -n "${TRUSTED_ARTIFACTS_DOCKERCONFIG_JSON}" ]; then
          mkdir -p ~/.docker/
          echo -n "${TRUSTED_ARTIFACTS_DOCKERCONFIG_JSON}" > ~/.docker/config.json
        fi
        ##

        set -x
        echo "advisory_url: $(params.advisory_url)"
        yamlFile=$(mktemp -d)/advisory.yaml
        if ! curl -sL --fail-with-body "$(params.advisory_url)" -o "${yamlFile}" ; then
          echo "Failed to download advisory yaml file: $(params.advisory_url)"
          exit 1
        fi
        cat "${yamlFile}"
        path="$(dirname "${yamlFile}")"

        archive_dir="$(mktemp -d)"
        archive="${archive_dir}/advisory"

        tar_opts=(--create --use-compress-program='gzip -n' --file)
        tar_opts=(--verbose "${tar_opts[@]}")
        set -o xtrace
  
        tar "${tar_opts[@]}" "${archive}" --directory="${path}" .

        sha256sum_output="$(sha256sum "${archive}")"
        digest="${sha256sum_output/ */}"
        echo Prepared artifact from "${path} (sha256:${digest})"

        store="quay.io/konflux-ci/release-service-trusted-artifacts"
        repo="$(echo -n $store | sed 's_/\(.*\):\(.*\)_/\1_g')"

        oras_opts="--annotation=quay:expires-after=1d"
        pushd "${archive_dir}" > /dev/null
        oras push "${oras_opts}" --registry-config <(select-oci-auth "${repo}") "${store}" advisory
        ADVISORY_OCI_ARTIFACT="oci:${repo}@sha256:${digest}"
        popd > /dev/null
