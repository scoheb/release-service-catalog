---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: request-advisory-oci-artifact
  labels:
    app.kubernetes.io/version: "0.2.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >
    Tekton task to request the advisory content from gitlab as an oci artifact.
  params:
    - name: advisory_url
      type: string
      description: The advisory url
    - name: requestTimeout
      type: string
      default: "2700"
      description: InternalRequest timeout
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - description: Produced advisory oci artifact pullspec
      name: advisory-oci-artifact
      type: string
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: "HOME"
        value: "/tekton/home"
  steps:
    - name: request-advisory-oci-artifact
      image: quay.io/konflux-ci/release-service-utils:0b2f257d7a5c2a881c36c23f8ae3cd5e89db593a
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
          cpu: 100m
      script: |
        #!/usr/bin/env bash
        set -x

        # only 2 gitlab instances are permitted...prod and staging
        # we are using staging for this test
        #
        advisorySecretName="create-advisory-stage-secret"

        PIPELINERUN_LABEL="internal-services.appstudio.openshift.io/pipelinerun-uid"

        IR_FILE="$(mktemp -d)/ir-result.txt"

        internal-request --pipeline "create-advisory-oci-artifact" \
            -p advisory_url="$(params.advisory_url)" \
            -p advisory_secret_name="${advisorySecretName}" \
            -p taskGitUrl="$(params.taskGitUrl)" \
            -p taskGitRevision="$(params.taskGitRevision)" \
            -l ${PIPELINERUN_LABEL}="$(params.pipelineRunUid)" \
            -t "$(params.requestTimeout)" \
            -s true \
            > "$IR_FILE" || \
            (grep "^\[" "$IR_FILE" | jq . && exit 1)

        internalRequest=$(awk -F"'" '/created/ { print $2 }' "$IR_FILE")
        echo "done (${internalRequest})"

        results=$(kubectl get internalrequest "$internalRequest" -o=jsonpath='{.status.results}')
        internalRequestPipelineRunName="$(jq -jr '.internalRequestPipelineRunName // ""' <<< "${results}")"
        internalRequestTaskRunName="$(jq -jr '.internalRequestTaskRunName // ""' <<< "${results}")"

        echo "** internalRequestPipelineRunName: ${internalRequestPipelineRunName}"
        echo "** internalRequestTaskRunName: ${internalRequestTaskRunName}"

        if [[ "$(echo "${results}" | jq -r '.result')" == "Success" ]]; then
          ADVISORY_OCI_ARTIFACT=$(jq -r '.advisory_oci_artifact' <<< "$results")
          echo "Got ADVISORY_OCI_ARTIFACT: ${ADVISORY_OCI_ARTIFACT}"
          echo -n "${ADVISORY_OCI_ARTIFACT}" > "$(results.advisory-oci-artifact.path)"
        else
          echo "The InternalRequest to find the ADVISORY_OCI_ARTIFACT was unsuccessful"
          jq -r '.result' <<< "$results"
          exit 1
        fi
