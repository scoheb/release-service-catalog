---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: collect-collectors-secrets
  labels:
    app.kubernetes.io/version: "0.0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: Tekton task to collect the secrets needed for collectors
  params:
    - name: collectorsPath
      type: string
      description: Path to the JSON string of the resource containing the collectors in the data workspace
    - name: collectorsResourceType
      description: The type of resource that contains the collectors
      type: string
    - name: subdirectory
      description: Subdirectory inside the workspace to be used
      type: string
      default: ""
    - name: secretRootDir
      description: root directory where linked, labelled secrets are copied to
      type: string
      default: "secrets"
  workspaces:
    - name: data
      description: Workspace to save the CR jsons to
  steps:
    - name: collect-collectors-secrets
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      env:
        - name: "COLLECTORS_PATH"
          value: '$(params.collectorsPath)'
        - name: "COLLECTORS_RESOURCE_TYPE"
          value: '$(params.collectorsResourceType)'
      script: |
        #!/usr/bin/env bash
        set -eo pipefail

        SECRETS_DIR_NAME="$(params.secretRootDir)"
        if [ -n "$(params.subdirectory)" ]; then
          mkdir -p "$(workspaces.data.path)/$(params.subdirectory)"
          SECRETS_DIR_PATH="$(params.subdirectory)/${SECRETS_DIR_NAME}"
        fi
        mkdir -p "$(workspaces.data.path)/${SECRETS_DIR_PATH}"

        COLLECTORS_FILE="$(workspaces.data.path)/$(params.collectorsPath)"

        serviceAccountName=$(jq -r '.spec.collectors.serviceAccountName // "appstudio-pipeline"' "${COLLECTORS_FILE}")
        serviceAccountJson=$(kubectl get "sa/${serviceAccountName}" -ojson)
        linkedSecretCount=$(jq -c '.secrets? // {} | length' <<< "${serviceAccountJson}")
        if [ "${linkedSecretCount}" -eq 0 ]; then
          echo "WARNING: no linked secrets exist for Service Account ${serviceAccountName}"
          exit
        fi

        COLLECTORS="$(jq -cr '.spec.collectors.items[]?.name' "${COLLECTORS_FILE}")"
        collectorLinkedSecrets=()
        for collector in $COLLECTORS;
        do
          # find secrets labelled for the collector
          secretListJson=$(kubectl get secret -l konflux-ci.dev/collector="${collector}" -ojson)

          # any labelled AND linked secrets?
          approvedSecrets=$(jq --argjson sa "$serviceAccountJson" '
            (.items // [])
            | map(select(.metadata.name as $name | ($sa.secrets // []) | any(.name == $name)))
            ' <<< "$secretListJson")

          NUM_SECRETS="$(jq -r 'length' <<< "${approvedSecrets}")"
          for ((i = 0; i < NUM_SECRETS; i++)) ; do
            secretName="$(jq -r --argjson i "$i" '.[$i].metadata.name' <<< "${approvedSecrets}")"
            collectorLinkedSecrets+=("$secretName")
          done
        done
        
        for secret in "${collectorLinkedSecrets[@]}";
        do
          echo "found linked, labelled secret: $secret"
          secretJson=$(kubectl get secret "$secret" -ojson)
          secretData=$(jq -r '.data' <<< "${secretJson}")
          secretFields=$(jq -r 'to_entries[] | "\(.key),\(.value)"' <<< "${secretData}" )
          for field in ${secretFields};
          do
            fieldName=$(echo "${field}" | cut -f1 -d,)
            fieldValue=$(echo "${field}" | cut -f2 -d, | base64 -d)

            mkdir -p "$(workspaces.data.path)/${SECRETS_DIR_PATH}/${secret}"
            echo -n "${fieldValue}" > "$(workspaces.data.path)/${SECRETS_DIR_PATH}/${secret}/${fieldName}"
          done
        done

        ls -lR "$(workspaces.data.path)/${SECRETS_DIR_PATH}"
