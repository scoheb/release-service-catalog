---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-create-pyxis-image-dockerfile-not-found
spec:
  description: |
    Run the create-pyxis-image task with a single containerImage in the snapshot.
    Dockerfile artifact does not exist for this image, so oras pull will fail
    and create_container_image will be called with an empty dockerfile path.
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        params:
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:dc0f89c98b102fdff4644fa5dc411a60f2035b29
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)"
              cat > "$(params.dataDir)/$(params.subdirectory)"/mapped_snapshot.json << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp",
                    "containerImage": "dockerfile-not-found@sha256:abcdef1234",
                    "repository": "registry.io/image",
                    "tags": [
                      "testtag"
                    ]
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(params.subdirectory)/mydata.json" << EOF
              {
              }
              EOF
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(params.dataDir)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
            env:
              - name: IMAGE_EXPIRES_AFTER
                value: 1d
              - name: "ORAS_OPTIONS"
                value: "--insecure"
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
    - name: run-task
      taskRef:
        name: create-pyxis-image
      params:
        - name: pyxisSecret
          value: test-create-pyxis-image-cert
        - name: server
          value: stage
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/mapped_snapshot.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/mydata.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      params:
        - name: pyxisDataPath
          value: $(tasks.run-task.results.pyxisDataPath)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        params:
          - name: pyxisDataPath
            type: string
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        workspaces:
          - name: data
        steps:
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(params.dataDir)/$(params.subdirectory)
            env:
              - name: "ORAS_OPTIONS"
                value: "--insecure"
            computeResources: {}
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:dc0f89c98b102fdff4644fa5dc411a60f2035b29
            script: |
              #!/usr/bin/env bash
              set -eux

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_create_container_image.txt")" \
                != 1 ]; then
                echo Error: create_container_image was expected to be called 1 time. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_create_container_image.txt"
                exit 1
              fi

              if [ -f "$(params.dataDir)/$(params.subdirectory)/mock_cleanup_tags.txt" ]; then
                echo Error: cleanup_tags was not expected to be called. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_cleanup_tags.txt"
                exit 1
              fi

              if ! grep -- "--tags testtag" < \
                "$(params.dataDir)/$(params.subdirectory)/mock_create_container_image.txt" 2> /dev/null
              then
                echo Error: create_container_image call was expected to include "--tags testtag". Actual call:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_create_container_image.txt"
                exit 1
              fi

              if ! grep -- "--rh-push false" < \
                "$(params.dataDir)/$(params.subdirectory)/mock_create_container_image.txt" 2> /dev/null
              then
                echo Error: create_container_image call was expected to include "--rh-push false". Actual call:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_create_container_image.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_skopeo.txt")" != 1 ]; then
                echo Error: skopeo was expected to be called 1 time. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_skopeo.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_oras.txt")" != 2 ]; then
                echo Error: oras was expected to be called 2 times. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_oras.txt"
                exit 1
              fi

              [ "$(head -n 1 < "$(params.dataDir)/$(params.subdirectory)/mock_skopeo.txt")" \
                = "inspect --raw docker://registry.io/image@sha256:abcdef1234" ]

              # check if the correct arch and image id are set in the json file
              jq -e '.components[0].pyxisImages[0] | ( .arch == "amd64" ) and ( .imageId == "0001" )
                and ( .os == "linux" )' "$(params.dataDir)/$(params.pyxisDataPath)"

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_select-oci-auth.txt")" != 2 ]; then
                echo Error: select-oci-with was expected to be called 2 times. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_select-oci-auth.txt"
                exit 1
              fi

      runAfter:
        - run-task
