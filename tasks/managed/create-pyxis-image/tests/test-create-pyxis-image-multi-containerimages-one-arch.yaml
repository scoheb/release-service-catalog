---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-create-pyxis-image-multi-containerimages-one-arch
spec:
  description: |
    Run the create-pyxis-image task with multiple containerImages in the snapshot
    and a single arch.
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        params:
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
            - name: "HOME"
              value: "/tekton/home"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:dc0f89c98b102fdff4644fa5dc411a60f2035b29
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)"
              cat > "$(params.dataDir)/$(params.subdirectory)"/mapped_snapshot.json << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp1",
                    "containerImage": "source1@sha256:mydigest1",
                    "repository": "registry.io/image1",
                    "tags": [
                      "testtag"
                    ]
                  },
                  {
                    "name": "comp2",
                    "containerImage": "source2@sha256:mydigest2",
                    "repository": "registry.io/image2",
                    "tags": [
                      "testtag"
                    ]
                  },
                  {
                    "name": "comp3",
                    "containerImage": "source3@sha256:mydigest3",
                    "repository": "registry.io/image3",
                    "tags": [
                      "testtag"
                    ]
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(params.subdirectory)/mydata.json" << EOF
              {
              }
              EOF
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(params.dataDir)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/redhat-appstudio/build-trusted-artifacts:e02102ede09aa07187cba066ad547a54724e5cf4
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
    - name: run-task
      taskRef:
        name: create-pyxis-image
      params:
        - name: pyxisSecret
          value: test-create-pyxis-image-cert
        - name: server
          value: stage
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/mapped_snapshot.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/mydata.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      params:
        - name: pyxisDataPath
          value: $(tasks.run-task.results.pyxisDataPath)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        params:
          - name: pyxisDataPath
            type: string
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
            - name: "HOME"
              value: "/tekton/home"
        steps:
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                mkdir -p "$(params.dataDir)/$(params.subdirectory)"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(params.dataDir)/$(params.subdirectory)
            computeResources: {}
            image: quay.io/redhat-appstudio/build-trusted-artifacts:e02102ede09aa07187cba066ad547a54724e5cf4
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:dc0f89c98b102fdff4644fa5dc411a60f2035b29
            script: |
              #!/usr/bin/env bash
              set -eux

              if [ "$(wc -l < \
                "$(params.dataDir)/$(params.subdirectory)/mock_create_container_image.txt")" != 3 ]; then
                echo Error: create_container_image was expected to be called 3 times. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_create_container_image.txt"
                exit 1
              fi

              if [ -f "$(params.dataDir)/$(params.subdirectory)/mock_cleanup_tags.txt" ]; then
                echo Error: cleanup_tags was not expected to be called. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_cleanup_tags.txt"
                exit 1
              fi

              cat > "$(params.dataDir)/$(params.subdirectory)/skopeo_expected_calls.txt" << EOF
              inspect --raw docker://registry.io/image1@sha256:mydigest1
              inspect --raw docker://registry.io/image2@sha256:mydigest2
              inspect --raw docker://registry.io/image3@sha256:mydigest3
              EOF

              # check that the actual calls match the expected calls
              if [ "$(md5sum < "$(params.dataDir)/$(params.subdirectory)/skopeo_expected_calls.txt")" \
                != "$(md5sum < "$(params.dataDir)/$(params.subdirectory)/mock_skopeo.txt")" ]
              then
                echo "Error: Actual skopeo calls do not match expected calls."
                echo Expected calls:
                cat "$(params.dataDir)/$(params.subdirectory)/skopeo_expected_calls.txt"
                echo Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_skopeo.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_oras.txt")" != 9 ]; then
                echo Error: oras was expected to be called 9 times. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_oras.txt"
                exit 1
              fi

              # check if the correct arch and image id are set in the json file
              jq -e '.components[0].pyxisImages[0] | ( .arch == "amd64" ) and ( .imageId == "0001" )
                and ( .os == "linux" )' "$(params.dataDir)/$(params.pyxisDataPath)"

              jq -e '.components[1].pyxisImages[0] | ( .arch == "amd64" ) and ( .imageId == "0002" )
                and ( .os == "linux" )' "$(params.dataDir)/$(params.pyxisDataPath)"

              jq -e '.components[2].pyxisImages[0] | ( .arch == "amd64" ) and ( .imageId == "0003" )
                and ( .os == "linux" )' "$(params.dataDir)/$(params.pyxisDataPath)"

      runAfter:
        - run-task
