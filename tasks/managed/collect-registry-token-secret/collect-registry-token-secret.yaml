---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: collect-registry-token-secret
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |-
    Tekton task that collects secret name containing registry token from the data file
  params:
    - name: dataPath
      type: string
      description: Path to the merged data JSON file generated by collect-data task
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - name: registrySecret
      type: string
      description: "The kube secret to use quay.io API, containing one key: token"
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: collect-secret
      image:
        quay.io/konflux-ci/release-service-utils:a5072c6da901bc9cf4d767da82e700784c7df981
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 50m
      script: |
        #!/usr/bin/env bash
        set -eux

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        # Check if there is anything to make public - either in defaults, or a component
        SECRET_REQUIRED=false
        if [ "$(jq -r '.mapping.defaults.public // false' "$DATA_FILE")" = true ] ; then
          SECRET_REQUIRED=true
        else
          NUM_COMPONENTS=$(jq '.mapping.components | length' "$DATA_FILE")
          for ((i=0; i < NUM_COMPONENTS; i++)); do
            COMPONENT=$(jq -c ".mapping.components[$i]" "$DATA_FILE")
            if [ "$(jq -r '.public // false' <<< "$COMPONENT")" = true ] ; then
              SECRET_REQUIRED=true
              break
            fi
          done
        fi

        if [ "$SECRET_REQUIRED" = false ]; then
          echo No repos to make public, so no secret is required. Exiting...
          echo -n "" > "$(results.registrySecret.path)"
          exit 0
        fi

        if [ "$(jq '.mapping | has("registrySecret")' "$DATA_FILE")" == false ] ; then
            echo "Registry secret missing in data JSON file"
            exit 1
        fi

        jq -j '.mapping.registrySecret' "$DATA_FILE" | tee "$(results.registrySecret.path)"
