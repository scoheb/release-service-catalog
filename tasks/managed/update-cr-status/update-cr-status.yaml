---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-cr-status
  labels:
    app.kubernetes.io/version: "1.0.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    A tekton task that updates the passed CR status with the
    contents stored in the resultsFile.
  params:
    - name: resourceType
      description: The type of resource that is being patched
      type: string
      default: release
    - name: statusKey
      description: The top level key to overwrite in the resource status
      type: string
      default: artifacts
    - name: resource
      description: The namespaced name of the resource to be patched
      type: string
    - name: resultsDirPath
      description: |
        Path to the directory containing the result files in the data workspace which will be added to the
        resource's status
      type: string
    - name: resultsDirName
      description: |
        Name of possible directories in subdirectory containing the result files in the data workspace 
        which will be added to the resource's status
      type: string
      default: "results"
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: resultArtifacts
      type: array
      description: Array of artifacts to use to obtain results
      default: []
    - name: subdirectory
      description: Subdirectory inside the workspace to be used
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
    - name: stepActionGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog stepActions to be used are stored
      default: https://github.com/konflux-ci/release-service-catalog.git
    - name: stepActionGitRevision
      type: string
      description: The revision in the stepActionGitUrl repo to be used
      default: production
  workspaces:
    - name: data
      description: Workspace where the results directory is stored
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: skip-trusted-artifact-operations
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.stepActionGitUrl)
          - name: revision
            value: $(params.stepActionGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: subdirectory
          value: $(params.subdirectory)
        - name: dataDir
          value: $(params.dataDir)
    - name: use-trusted-artifact-array
      args: ["use", "$(params.resultArtifacts[*])"]
      computeResources: {}
      image: quay.io/redhat-appstudio/build-trusted-artifacts:e02102ede09aa07187cba066ad547a54724e5cf4
    - name: update-cr-status
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -ex

        RESULTS_JSON="{}"
        resultPaths=$(find "$(params.dataDir)/$(params.subdirectory)" \
          -name "$(params.resultsDirName)" -type d)
        for resultsPath in ${resultPaths}; do
          if [ -d "$resultsPath" ]; then
            resultFiles=$(find "$resultsPath" -type f)
            for resultsFile in ${resultFiles}; do
                if ! jq . >/dev/null 2>&1 "${resultsFile}" ; then
                    echo "Passed results JSON file ${resultsFile} in results directory was not proper JSON."
                    exit 1
                fi
                # If two files have arrays with the same key, it will be overwritten. Otherwise, the jsons
                # are merged (only arrays are not merged properly with this notation).
                RESULTS_JSON=$(jq -c "${RESULTS_JSON} * ." "${resultsFile}")
            done
          fi
        done

        IFS='/' read -r namespace name <<< "$(params.resource)"

        kubectl --warnings-as-errors=true patch "$(params.resourceType)" -n "$namespace" "$name" \
          --type=merge --subresource status --patch "status: {'$(params.statusKey)':${RESULTS_JSON}}"
