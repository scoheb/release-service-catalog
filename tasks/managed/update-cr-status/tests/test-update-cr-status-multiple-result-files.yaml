---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-update-cr-status-multiple-result-files
spec:
  description: |
    Run the update-cr-status task with rbac present and multiple result
    files in the results directory. The pipeline should succeed.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      taskSpec:
        params:
          - name: subdirectory
            type: string
        results:
          - name: resultArtifact1
            type: string
          - name: resultArtifact2
            type: string
        workspaces:
          - name: data
        steps:
          - name: setup
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(workspaces.data.path)/$(params.subdirectory)/1/results/"
              mkdir -p "$(workspaces.data.path)/$(params.subdirectory)/2/results/"
              cat > "$(workspaces.data.path)/$(params.subdirectory)/1/results/one.json" << EOF
              {
                  "one": {
                      "foo": "bar"
                  },
                  "two": {
                      "a": "b"
                  }
              }
              EOF

              cat > "$(workspaces.data.path)/$(params.subdirectory)/2/results/two.json" << EOF
              {
                  "one": {
                      "union": "value"
                  },
                  "z": {
                      "cat": "dog"
                  }
              }
              EOF

              cat > release << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: Release
              metadata:
                name: release-cr-status-multiple
                namespace: default
              spec:
                snapshot: foo
                releasePlan: foo
              EOF
              kubectl apply -f release
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(workspaces.data.path)/$(params.subdirectory)/1/.skip-trusted-artifacts"
                touch "$(workspaces.data.path)/$(params.subdirectory)/2/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.resultArtifact1.path)=$(workspaces.data.path)/$(params.subdirectory)/1
              - $(results.resultArtifact2.path)=$(workspaces.data.path)/$(params.subdirectory)/2
            computeResources: { }
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
            env:
              - name: IMAGE_EXPIRES_AFTER
                value: 1d
              - name: "ORAS_OPTIONS"
                value: "--insecure"
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.resultArtifact1.path)"
                echo -n "$(params.ociStorage)" > "$(results.resultArtifact2.path)"
              fi
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: run-task
      taskRef:
        name: update-cr-status
      params:
        - name: resource
          value: default/release-cr-status-multiple
        - name: resultsDirName
          value: results
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: resultArtifacts
          value:
            - "$(tasks.setup.results.resultArtifact1)=$(workspaces.data.path)/$(context.pipelineRun.uid)"
            - "$(tasks.setup.results.resultArtifact2)=$(workspaces.data.path)/$(context.pipelineRun.uid)"
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: check-result
      taskSpec:
        steps:
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              echo Test that the Release.Status contains the union data
              test "$(kubectl get release release-cr-status-multiple -n default \
                -o jsonpath='{.status.artifacts.one.foo}')" == bar

              test "$(kubectl get release release-cr-status-multiple -n default \
                -o jsonpath='{.status.artifacts.one.union}')" == value

              echo Test that the Release.Status contains the unique data from first file
              test "$(kubectl get release release-cr-status-multiple -n default \
                -o jsonpath='{.status.artifacts.two.a}')" == b

              echo Test that the Release.Status contains the unique data from second file
              test "$(kubectl get release release-cr-status-multiple -n default \
                -o jsonpath='{.status.artifacts.z.cat}')" == dog
      runAfter:
        - run-task
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete release release-cr-status-multiple
