---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-update-cr-status-array-union
spec:
  description: |
    Run the update-cr-status task with rbac present and multiple result
    files in the results directory that both specify the same key with
    an array as its value. The array should be unioned in the resulting
    status.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: resultArtifact1
            type: string
          - name: resultArtifact2
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/results"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/results/one.json" << EOF
              {
                  "test": [
                      "one",
                      "two"
                  ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/results/two.json" << EOF
              {
                  "test": [
                      "three",
                      "four"
                  ]
              }
              EOF

              cat > release << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: Release
              metadata:
                name: release-cr-status-union
                namespace: default
              spec:
                snapshot: foo
                releasePlan: foo
              EOF
              kubectl apply -f release
          - name: create-trusted-artifact-array
            ref:
              name: create-trusted-artifact-array
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifacts
                value:
                  - $(results.resultArtifact1.path)=$(params.dataDir)
                  - $(results.resultArtifact2.path)=$(params.dataDir)
          - name: patch-source-data-artifact-result-array
            # Note: Cannot convert to a StepAction due to https://github.com/tektoncd/pipeline/issues/2374
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu

              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.resultArtifact1.path)"
                echo -n "$(params.ociStorage)" > "$(results.resultArtifact2.path)"
              fi
    - name: run-task
      taskRef:
        name: update-cr-status
      params:
        - name: resource
          value: default/release-cr-status-union
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: resultArtifacts
          value:
            - "$(tasks.setup.results.resultArtifact1)=$(params.dataDir)"
            - "$(tasks.setup.results.resultArtifact2)=$(params.dataDir)"
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      taskSpec:
        steps:
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              echo Test that the Release.Status contains the union of both test arrays
              # we also take the precaution of sorting the result to avoid
              # ordering issues so we can compare the results properly
              unsorted_result="$(kubectl get release release-cr-status-union -n default \
                -o jsonpath='{.status.artifacts.test}')"
              result=$(jq -c '. | sort' <<< "$unsorted_result")
              test "$result" == '["four","one","three","two"]'

      runAfter:
        - run-task
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete release release-cr-status-union
