---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-update-cr-status-nonexistent-status-field
  annotations:
    test/assert-task-failure: "run-task"
spec:
  description: |
    Run the update-cr-status task to update a field that does not exist in the
    CRD status. The pipeline should fail.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      taskSpec:
        params:
          - name: subdirectory
            type: string
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)/results/"
              cat > "$(params.dataDir)/$(params.subdirectory)/results/test.json" << EOF
              {
                  "foo": "bar"
              }
              EOF

              cat > release << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: Release
              metadata:
                name: release-cr-nonexistent-status-field
                namespace: default
              spec:
                snapshot: foo
                releasePlan: foo
              EOF
              kubectl apply -f release
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)/$(params.subdirectory)
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)/$(params.subdirectory)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
          - name: patch-source-data-artifact-result
            ref:
              name: patch-source-data-artifact-result
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: run-task
      taskRef:
        name: update-cr-status
      params:
        - name: resource
          value: default/release-cr-nonexistent-status-field
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: resultsDirName
          value: results
        - name: statusKey
          value: devnull
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: resultArtifacts
          value:
            - "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete release release-cr-nonexistent-status-field
