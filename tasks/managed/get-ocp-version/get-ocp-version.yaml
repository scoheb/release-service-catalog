---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-ocp-version
  labels:
    app.kubernetes.io/version: "2.0.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to collect OCP version tag from FBC fragment using `skopeo inspect`
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  workspaces:
    - name: data
      description: The workspace where the extra config file containing the mapping and snapshot json reside
  results:
    - name: stored-version
      type: string
      description: Store OCP version number from given Image
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: skip-trusted-artifact-operations
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: get-ocp-version
      image: quay.io/konflux-ci/release-service-utils:e85ceb962ee6f4d0672b4aa4e9946621ab302f20
      script: |
        #!/usr/bin/env bash
        set -eux
        
        SNAPSHOT_SPEC_FILE="$(params.dataDir)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "Error: No valid snapshot file was provided."
            exit 1
        fi

        echo -e "\nFetching fbcFragment"
        fbc_fragment="$(jq -r '.components[0].containerImage' < "${SNAPSHOT_SPEC_FILE}" | tr -d "\n")"

        # get image metadata
        image_metadata=$(skopeo inspect --raw "docker://${fbc_fragment}")

        media_type=$(jq -r .mediaType <<< "${image_metadata}")
        image_base_name=$(jq '.annotations."org.opencontainers.image.base.name"' <<< "${image_metadata}" \
          | cut -d: -f2 | sed 's/"//g')

        # multiplatform images will not contain the base name with the OCP version, so it should fetch
        # the manifest image
        if [[ "$media_type" == "application/vnd.oci.image.index.v1+json" ]]; then
          # image is an index of multiplatform components
          arch_json=$(get-image-architectures "${fbc_fragment}")

          # it is not required to loop all images as they are all built for the same OCP version
          manifest_image_sha="$(jq -rs 'map(.digest)[0]'  <<< "$arch_json")"

          # replace the image sha with the manifests's one
          fbc_fragment="${fbc_fragment%@*}@${manifest_image_sha}"

          # fetch the image base name containing the version for the found manifest image
          image_base_name=$(skopeo inspect --raw docker://"${fbc_fragment}" \
           | jq '.annotations."org.opencontainers.image.base.name"' | cut -d: -f2 | sed 's/"//g')
        fi

        # Define the regular expression
        pattern="^v[0-9]\.[0-9]+$"

        # Check if the value matches the pattern
        if ! echo "${image_base_name}" | grep -Eq "${pattern}"; then
            echo "Invalid format or value does not exist or does not match the required pattern."
            exit 1
        fi
        echo "Valid format."
        printf "%s" "$image_base_name" | tee "$(results.stored-version.path)"
    - name: create-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
    - name: patch-source-data-artifact-result
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/patch-source-data-artifact-result/patch-source-data-artifact-result.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
