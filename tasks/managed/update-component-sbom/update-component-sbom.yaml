---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-component-sbom
  labels:
    app.kubernetes.io/version: "0.2.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Update component-level SBOM with purls with release-time info.
  params:
    - name: sbomJsonPath
      description: Relative path to the SBOM data file in the workspace.
      type: string
    - name: downloadedSbomPath
      description: |
        Path to the directory holding previously downloaded SBOMs to be updated.
      type: string
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: subdirectory
      description: Subdirectory inside the workspace to be used
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  workspaces:
    - name: data
      description: The workspace where the SBOM files reside.
  results:
    - description: Produced trusted data artifact
      name: sourceDataArtifact
      type: string
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
      - name: "HOME"
        value: "/tekton/home"
  steps:
    - name: skip-trusted-artifact-operations
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -eo pipefail

        if [ "$(params.ociStorage)" == "empty" ]; then
          echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
          mkdir -p "$(params.dataDir)/$(params.subdirectory)"
          touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
        fi
    - name: use-trusted-artifact
      args:
        - use
        - $(params.sourceDataArtifact)=$(params.dataDir)/$(params.subdirectory)
      computeResources: {}
      image: quay.io/redhat-appstudio/build-trusted-artifacts:e02102ede09aa07187cba066ad547a54724e5cf4
    - name: update-component-sbom-purls
      image: quay.io/konflux-ci/release-service-utils:4a67d0c959e63cbb4bc0d37db1ce962091d6072a
      script: |
        #!/usr/bin/env bash
        set -eux

        INPUT_PATH="$(params.dataDir)/$(params.downloadedSbomPath)"

        #update the SBOM files in place
        update_component_sbom \
          --data-path "$(params.dataDir)/$(params.sbomJsonPath)" \
          --input-path "$INPUT_PATH" \
          --output-path "$INPUT_PATH"
    - name: create-trusted-artifact
      args:
        - create
        - --store
        - $(params.ociStorage)
        - $(results.sourceDataArtifact.path)=$(params.dataDir)/$(params.subdirectory)
      computeResources: {}
      image: quay.io/redhat-appstudio/build-trusted-artifacts:e02102ede09aa07187cba066ad547a54724e5cf4
    - name: patch-source-data-artifact-result
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -eu

        # this is needed to skip trusted-artifacts tasks
        # when using PVC based workspaces.
        if [ "$(params.ociStorage)" == "empty" ]; then
          echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
        fi
