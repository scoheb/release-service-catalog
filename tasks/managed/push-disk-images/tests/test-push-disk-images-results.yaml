---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-push-disk-images-results
spec:
  description: |
    Run the push-disk-images task with and verify the proper file names are reported as task results
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:10bd7e4323de6ace107bbed1fe40613f21684b01
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              mkdir "$(params.dataDir)/$(context.pipelineRun.uid)/results"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot_spec.json" << EOF
              {
                "application": "nvidia-aws-disk-image-1-3",
                "artifacts": {},
                "components": [
                  {
                    "containerImage": "quay.io/redhat-user-workloads/rhel-ai-tenant/nvidia-aws-disk-image-1-3/nvidia-aws-disk-image-1-3@sha256:c866ff5e773045580c3f3025610c82c653685db9914712ed2713dfea8ec13e05",
                    "name": "nvidia-aws-disk-image-1-3",
                    "source": {
                      "git": {
                        "revision": "534fa8a78f4587ccca254eec71eab26677f29090",
                        "url": "https://gitlab.com/redhat/rhel-ai/disk-images/nvidia-aws"
                      }
                    },
                    "contentGateway": {
                      "filePrefix": "rhel-ai-nvidia-aws-1.3",
                      "productCode": "RHELAI",
                      "productName": "Binary_RL_Red Hat Enterprise Linux AI",
                      "productVersionName": "1.3-staging"
                    },
                    "staged": {
                      "destination": "rhelai-1_DOT_3-for-rhel-9-x86_64-isos",
                      "files": [
                        {
                          "filename": "rhel-ai-nvidia-aws-1.3-1732915588-x86_64.ami",
                          "source": "disk.raw"
                        }
                      ],
                      "version": "1.3"
                    }
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "contentGateway": {
                  "productName": "Konflux test product",
                  "productCode": "KTestProduct",
                  "productVersionName": "KTestProduct 1",
                  "components": [
                    {
                      "name": "test-component",
                      "description": "Red Hat OpenShift Local Sandbox Test",
                      "label": "Checksum File Sandbox Test"
                    }
                  ]
                },
                "cdn": {
                  "env": "stage"
                }
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: push-disk-images
      params:
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot_spec.json"
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: resultsDirPath
          value: "$(context.pipelineRun.uid)/results"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "https://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:10bd7e4323de6ace107bbed1fe40613f21684b01
            script: |
              #!/usr/bin/env bash
              set -ex

              results=$(cat "$(params.dataDir)/$(context.pipelineRun.uid)/results/push-disk-images-results.json")

              # Check the results file
              expected="rhel-ai-nvidia-aws-1.3-1732915588-x86_64.ami"
              if [ "$(jq -r '."disk-image-files"[]' <<< "$results")" != "$expected" ]; then
                echo "push-disk-images results do not contain expected file names"
                exit 1
              fi
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:10bd7e4323de6ace107bbed1fe40613f21684b01
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete internalrequests --all
