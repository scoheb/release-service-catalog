---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-push-disk-images-fail-ir-failure
  annotations:
    test/assert-task-failure: "run-task"
spec:
  description: |
    Run the push-disk-images task and ensure it fails when the internal request fails
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup
            image: quay.io/konflux-ci/release-service-utils:10bd7e4323de6ace107bbed1fe40613f21684b01
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/results"
              cat > "$(params.dataDir)/snapshot_spec.json" << EOF
              {
                "application": "disk-images",
                "components": [
                  {
                    "name": "failing-disk-image",
                    "containerImage": "quay.io/workload/tenant/disk-image/nvidia@sha256:123456",
                    "repository": "repo1"
                  },
                  {
                    "name": "amd-disk-image",
                    "containerImage": "quay.io/workload/tenant/disk-image/amd@sha256:abcdefg",
                    "repository": "repo2"
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/data.json" << EOF
              {
                "contentGateway": {
                  "productName": "Konflux test product",
                  "productCode": "KTestProduct",
                  "productVersionName": "KTestProduct 1",
                  "components": [
                    {
                      "name": "test-component",
                      "description": "Red Hat OpenShift Local Sandbox Test",
                      "label": "Checksum File Sandbox Test"
                    }
                  ]
                },
                "cdn": {
                  "env": "production"
                }
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: push-disk-images
      params:
        - name: snapshotPath
          value: "snapshot_spec.json"
        - name: dataPath
          value: "data.json"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: resultsDirPath
          value: results
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: https://localhost
        - name: taskGitRevision
          value: main
      runAfter:
        - setup
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:10bd7e4323de6ace107bbed1fe40613f21684b01
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete internalrequests --all
