---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-disk-images
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to push disk images via an InternalRequest to Exodus CDN in addition to Developer Portal.
    The environment to use is pulled from the `cdn.env` key in the data file.
  params:
    - name: snapshotPath
      type: string
      description: Path to the JSON string of the Snapshot spec in the data workspace
    - name: dataPath
      type: string
      description: Path to the data JSON in the data workspace
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
    - name: resultsDirPath
      description: Path to the results directory in the data workspace
      type: string
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  workspaces:
    - name: data
      description: Workspace where the json files are stored
  results:
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: skip-trusted-artifact-operations
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: run-script
      image: quay.io/konflux-ci/release-service-utils:10bd7e4323de6ace107bbed1fe40613f21684b01
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
          cpu: 250m
      script: |
        #!/usr/bin/env bash
        set -ex

        pipelinerun_label="internal-services.appstudio.openshift.io/pipelinerun-uid"
        snapshot=$(jq -c '.' "$(params.dataDir)/$(params.snapshotPath)")
        # .cdn.env is likely to change in the future. This is just for POC
        env=$(jq -r '.cdn.env' "$(params.dataDir)/$(params.dataPath)")

        RESULTS_FILE="$(params.dataDir)/$(params.resultsDirPath)/push-disk-images-results.json"
        FILES=$(jq -c '{"disk-image-files": [.components[].staged?.files[]?.filename]}' <<< "$snapshot")
        echo "$FILES" > "$RESULTS_FILE"

        # There are three envs supported...production, stage, and qa
        exodusGwSecret=""
        exodusGwEnv=""
        pulpSecret=""
        udcacheSecret=""

        if [ "${env}" = "production" ] ; then
          exodusGwSecret="exodus-prod-secret"
          exodusGwEnv="live"
          pulpSecret="rhsm-pulp-prod-secret"
          udcacheSecret="udcache-prod-secret"
          cgwHostname="https://developers.redhat.com/content-gateway/rest/admin"
          cgwSecret="cgw-service-account-prod-secret"
        elif [ "${env}" = "stage" ] ; then
          # The url is the same for exodus in both prod and stage, it is just a different env and pulp url
          exodusGwSecret="exodus-prod-secret"
          exodusGwEnv="pre"
          pulpSecret="rhsm-pulp-stage-secret"
          udcacheSecret="udcache-stage-secret"
          cgwHostname="https://developers.redhat.com/content-gateway/rest/admin"
          cgwSecret="cgw-service-account-prod-secret"
        elif [ "${env}" = "qa" ]; then
          exodusGwSecret="exodus-stage-secret"
          exodusGwEnv="live"
          pulpSecret="rhsm-pulp-qa-secret"
          udcacheSecret="udcache-qa-secret"
          cgwHostname="https://developers.stage.redhat.com/content-gateway/rest/admin"
          cgwSecret="cgw-service-account-stage-secret"
        else
          echo "cdn.env in the data file must be one of [production, stage, qa]."
          exit 1
        fi

        IR_RESULT_FILE=$(mktemp)

        echo "Creating InternalRequest to push disk images..."
        internal-request --pipeline "push-disk-images" \
                         -p snapshot_json="${snapshot}" \
                         -p exodusGwSecret="${exodusGwSecret}" \
                         -p exodusGwEnv="${exodusGwEnv}" \
                         -p pulpSecret="${pulpSecret}" \
                         -p udcacheSecret="${udcacheSecret}" \
                         -p cgwHostname="${cgwHostname}" \
                         -p cgwSecret="${cgwSecret}" \
                         -p taskGitUrl="$(params.taskGitUrl)" \
                         -p taskGitRevision="$(params.taskGitRevision)" \
                         -l ${pipelinerun_label}="$(params.pipelineRunUid)" \
                         -s true \
                         -t 86400 \
                         --service-account release-service-account \
                         --pipeline-timeout 24h0m0s \
                         --task-timeout 23h50m0s \
                         --finally-timeout 0h10m0s \
                         | tee "$IR_RESULT_FILE"

        set +x
        internalRequest=$(awk 'NR==1{ print $2 }' "$IR_RESULT_FILE" | xargs)
        echo "done (${internalRequest})"

        results=$(kubectl get internalrequest "$internalRequest" -o=jsonpath='{.status.results}')
        if [ "$(echo "${results}" | jq -r '.result')" == "Success" ]; then
          echo "Disk images pushed"
          echo "${results}" | jq '.'
        else
          echo "Disk image push failed"
          echo "${results}" | jq -r '.result'
          exit 1
        fi
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
    - name: patch-source-data-artifact-result
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/patch-source-data-artifact-result/patch-source-data-artifact-result.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
