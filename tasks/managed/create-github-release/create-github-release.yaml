---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-github-release
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |-
    Tekton task that creates a release in GitHub.com via the API.
    
    It assumes that a workspace is provided that includes `*.zip`, `*.json` and `*SHA256SUMS` files in
    a `release` dir.
  params:
    - name: repository
      type: string
      description: "The github repository where the release should be created"
    - name: release_version
      type: string
      description: "The version string of the new release"
    - name: githubSecret
      type: string
      description: "The kube secret to use to authenticate to GitHub, containing one key: token"
    - name: content_directory
      type: string
      description: "The directory inside the workspace to find files for release"
    - name: resultsDirPath
      type: string
      description: Path to the results directory in the data workspace
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - name: url
      type: string
      description: URL to inspect the created release
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: create-release-from-binaries
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      computeResources:
        limits:
          memory: 256Mi
        requests:
          memory: 256Mi
          cpu: 150m
      script: |
        #!/usr/bin/env bash
        set -ex

        RESULTS_FILE="$(params.dataDir)/$(params.resultsDirPath)/create-github-release-results.json"

        cd "$(params.dataDir)/$CONTENT_DIRECTORY"
        set -o pipefail
        shopt -s failglob

        OWNER_REPO=${REPOSITORY#https://github.com/}
        RELEASE="$(gh api "repos/${OWNER_REPO}/releases" --jq ".[] | select(.tag_name == \"v${RELEASE_VERSION}\")")"
        if [ -n "$RELEASE" ]; then
          echo "Release v${RELEASE_VERSION} exists"
          echo "$REPOSITORY/releases/tag/v${RELEASE_VERSION}" > "$(results.url.path)"
        else
          gh release create "v${RELEASE_VERSION}" ./*.zip ./*.json ./*SHA256SUMS ./*.sig \
          --repo "$REPOSITORY" --title "Release $RELEASE_VERSION" | tee "$(results.url.path)"
        fi

        jq -n --arg release "$(cat "$(results.url.path)")" '{"github-release": {"url": $release}}' | tee "$RESULTS_FILE"
      env:
        - name: GH_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.githubSecret)
              key: token
        - name: REPOSITORY
          value: $(params.repository)
        - name: RELEASE_VERSION
          value: $(params.release_version)
        - name: CONTENT_DIRECTORY
          value: $(params.content_directory)
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
