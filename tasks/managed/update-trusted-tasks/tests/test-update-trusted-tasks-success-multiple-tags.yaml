---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-update-trusted-tasks-success-multiple-tags
spec:
  description: |
    Run the update-trusted-tasks task with multiple tags
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(params.dataDir)/results"
              cat > "$(params.dataDir)/snapshot.json" << EOF
              {
                "application": "tasks",
                "artifacts": {},
                "components": [
                  {
                    "containerImage": "quay.io/example/echo-v01@sha256:abcde",
                    "name": "echo-v01",
                    "source": {
                      "git": {
                        "context": "task/echo/0.1",
                        "revision": "abcde",
                        "url": "https://example.com"
                      }
                    },
                    "repository": "quay.io/notexist/task-echo",
                    "tags": [
                      "0.1",
                      "test",
                      "stage"
                    ]
                  }
                ]
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: update-trusted-tasks
      params:
        - name: snapshotPath
          value: snapshot.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            workingDir: $(params.dataDir)
            script: |
              #!/bin/bash
              set -eux

              if [ "$(wc -l < "$(params.dataDir)/mock_skopeo.txt")" != 3 ]; then
                echo Error: skopeo was expected to be called 1 times. Actual calls:
                cat "$(params.dataDir)/mock_skopeo.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/mock_ec.txt")" != 3 ]; then
                echo Error: ec was expected to be called 1 time. Actual calls:
                cat "$(params.dataDir)/mock_ec.txt"
                exit 1
              fi

              all_found=true
              outs=(
                "track bundle --bundle quay.io/notexist/task-echo:0.1@sha256:abcde \
              --output oci:quay.io/notexist/data-acceptable-bundles:latest"

                "track bundle --bundle quay.io/notexist/task-echo:test@sha256:abcde \
              --output oci:quay.io/notexist/data-acceptable-bundles:latest"

                "track bundle --bundle quay.io/notexist/task-echo:stage@sha256:abcde \
              --output oci:quay.io/notexist/data-acceptable-bundles:latest"
              )
              
              for out in "${outs[@]}"; do
                if ! grep -qF -- "$out" "$(params.dataDir)/mock_ec.txt"; then
                  echo "Error: $out was not found in the ec command"
                  all_found=false
                fi
              done
              if ! $all_found; then
                cat "$(params.dataDir)/mock_ec.txt"
                exit 1
              fi
