---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-push-oot-kmods
spec:
  description: |
    Run the push-oot-kmods task and verify the results
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: "/var/workdir/release"
    - name: taskGitUrl
      type: string
      description: The git repository URL for task and StepAction resolution
      default: https://github.com/konflux-ci/release-service-catalog.git
    - name: taskGitRevision
      type: string
      description: The git revision for task and StepAction resolution
      default: main
  tasks:
    - name: run-task
      taskRef:
        name: push-oot-kmods
      params:
        - name: signedKmodsPath
          value: signed-kmods
        - name: vendor
          value: mocked-vendor
        - name: artifactRepoUrl
          value: my-repository.mock/kmods-repo
        - name: artifactBranch
          value: main
        - name: artifactRepoToken
          value: repotoken
        - name: ociStorage
          value: $(params.ociStorage)
        - name: ociArtifactExpiresAfter
          value: $(params.ociArtifactExpiresAfter)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: sourceDataArtifact
          value: ""
        - name: dataDir
          value: $(params.dataDir)
        - name: taskGitUrl
          value: $(params.taskGitUrl)
        - name: taskGitRevision
          value: $(params.taskGitRevision)
    - name: check-result
      taskSpec:
        params:
          - name: signedKmodsPath
            type: string
          - name: dataDir
            type: string
          - name: ociStorage
            type: string
          - name: sourceDataArtifact
            type: string
            default: ""
          - name: taskGitUrl
            type: string
          - name: taskGitRevision
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: "ORAS_OPTIONS"
              value: "--insecure"
            - name: "DEBUG"
              value: ""
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:6556e8a6b031c1aad4f0472703fd121a6e1cd45d
            script: |
              #!/usr/bin/env bash
              set -eux
              
              echo "INFO: ociStorage provided, checking dataDir"
              SIGNED_KMODS_PATH="$(params.dataDir)/$(params.signedKmodsPath)"
              
              cd "${SIGNED_KMODS_PATH}"
              # shellcheck source=/dev/null
              . ./mocked-envfile
              VENDOR_DIR="${DRIVER_VENDOR}_${DRIVER_VERSION}_${KERNEL_VERSION}"
              MOD_DIR="${SIGNED_KMODS_PATH}/local-artifacts/${VENDOR_DIR}"

              # Check if modules to be pushed exist
              shopt -s nullglob
              files=("${MOD_DIR}"/*.ko)
              
              if [ ${#files[@]} -gt 0 ]; then
                  echo "SUCCESS: Found modules:"
                  for f in "${files[@]}"; do
                      echo "  - $f"
                  done
              else
                  echo "Available mods:"
                  cd "$SIGNED_KMODS_PATH"
                  if [[ -f "mod1.ko" && -f "mod2.ko" ]]; 
                     then echo "SUCCESS"; 
                  else echo "Error: mod1.ko and mod2.ko were not found." && exit 1; 
                  fi
              fi
      params:
        - name: signedKmodsPath
          value: signed-kmods
        - name: dataDir
          value: $(params.dataDir)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(tasks.run-task.results.sourceDataArtifact)
        - name: taskGitUrl
          value: $(params.taskGitUrl)
        - name: taskGitRevision
          value: $(params.taskGitRevision)
      runAfter:
        - run-task
