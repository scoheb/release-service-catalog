---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-push-rpm-data-to-pyxis-multi-arch
spec:
  description: |
    Run the push-rpm-data-to-pyxis task with required parameters and multi arch
    images
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        params:
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:863fee5fdf48937dead6a2355c67eb3b4f469340
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/pyxis.json" << EOF
              {
                "components": [
                  {
                    "containerImage": "multiarch-1",
                    "pyxisImages": [
                      {
                        "arch": "amd64",
                        "imageId": "myImageID1",
                        "digest": "mydigest2",
                        "arch_digest": "abcdefg",
                        "os": "linux"
                      },
                      {
                        "arch": "ppc64le",
                        "imageId": "myImageID2",
                        "digest": "mydigest2",
                        "arch_digest": "deadbeef",
                        "os": "linux"
                      }
                    ]
                  },
                  {
                    "containerImage": "multiarch-2",
                    "pyxisImages": [
                      {
                        "arch": "amd64",
                        "imageId": "myImageID3",
                        "digest": "mydigest3",
                        "arch_digest": "abcdefg",
                        "os": "linux"
                      },
                      {
                        "arch": "ppc64le",
                        "imageId": "myImageID4",
                        "digest": "mydigest4",
                        "arch_digest": "deadbeef",
                        "os": "linux"
                      }
                    ]
                  }
                ]
              }
              EOF
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
          - name: patch-source-data-artifact-result
            ref:
              name: patch-source-data-artifact-result
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: push-rpm-data-to-pyxis
      params:
        - name: pyxisJsonPath
          value: $(context.pipelineRun.uid)/pyxis.json
        - name: pyxisSecret
          value: test-push-rpm-data-to-pyxis-cert
        - name: server
          value: production-internal
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        workspaces:
          - name: data
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:863fee5fdf48937dead6a2355c67eb3b4f469340
            script: |
              #!/usr/bin/env bash
              set -eux

              if [ "$(wc -l < "$(params.dataDir)/mock_cosign.txt")" != 4 ]; then
                echo Error: cosign was expected to be called 4 times. Actual calls:
                cat "$(params.dataDir)/mock_cosign.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/mock_upload_rpm_data.txt")" != 4 ]; then
                echo Error: upload_rpm_data was expected to be called 4 times. Actual calls:
                cat "$(params.dataDir)/mock_upload_rpm_data.txt"
                exit 1
              fi
      runAfter:
        - run-task
