---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-push-rpm-data-to-pyxis-single-arch
spec:
  description: |
    Run the push-rpm-data-to-pyxis task with required parameters and single arch
    images - a happy path scenario.
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        params:
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:34016ab5a3904257c198a12d1829b0093214b6ee
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)"
              cat > "$(params.dataDir)/$(params.subdirectory)/pyxis_data.json" << EOF
              {
                "components": [
                  {
                    "containerImage": "imageurl1",
                    "pyxisImages": [
                      {
                        "arch": "amd64",
                        "imageId": "myImageID1",
                        "digest": "mydigest1",
                        "arch_digest": "mydigest1",
                        "os": "linux"
                      }
                    ]
                  },
                  {
                    "containerImage": "imageurl2",
                    "pyxisImages": [
                      {
                        "arch": "amd64",
                        "imageId": "myImageID3",
                        "digest": "mydigest2",
                        "arch_digest": "mydigest2",
                        "os": "linux"
                      }
                    ]
                  }
                ]
              }
              EOF
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(params.dataDir)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
            env:
              - name: IMAGE_EXPIRES_AFTER
                value: 1d
              - name: "ORAS_OPTIONS"
                value: "--insecure"
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
    - name: run-task
      taskRef:
        name: push-rpm-data-to-pyxis
      params:
        - name: pyxisJsonPath
          value: $(context.pipelineRun.uid)/pyxis_data.json
        - name: pyxisSecret
          value: test-push-rpm-data-to-pyxis-cert
        - name: server
          value: production
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sbomPath
          value: $(tasks.run-task.results.sbomPath)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        workspaces:
          - name: data
        params:
          - name: sbomPath
            type: string
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                mkdir -p "$(params.dataDir)/$(params.subdirectory)"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(params.dataDir)/$(params.subdirectory)
            env:
              - name: "ORAS_OPTIONS"
                value: "--insecure"
            computeResources: {}
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:34016ab5a3904257c198a12d1829b0093214b6ee
            script: |
              #!/usr/bin/env bash
              set -eux

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_cosign.txt")" != 2 ]; then
                echo Error: cosign was expected to be called 2 times. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_cosign.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_upload_rpm_data.txt")" != 2 ]; then
                echo Error: upload_rpm_data was expected to be called 2 times. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_upload_rpm_data.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_select-oci-auth.txt")" != 2 ]; then
                echo Error: select-oci-with was expected to be called 2 times. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_select-oci-auth.txt"
                exit 1
              fi

              test "$(params.sbomPath)" == "$(params.subdirectory)/downloaded-sboms"
      runAfter:
        - run-task
