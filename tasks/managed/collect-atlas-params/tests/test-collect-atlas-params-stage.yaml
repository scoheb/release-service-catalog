---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-collect-atlas-params-stage
spec:
  description: |
    Run the collect-atlas-params task and verify the results.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        params:
          - name: subdirectory
            type: string
        results:
          - name: sourceDataArtifact
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
            - name: "HOME"
              value: "/tekton/home"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:d320c36f3d707cd5bfe55fe783f70236c06cc2e5
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)"
              cat > "$(params.dataDir)/$(params.subdirectory)/data.json" << EOF
              {
                "atlas": {
                  "server": "stage"
                }
              }
              EOF
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(params.dataDir)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/scoheb/build-trusted-artifacts:debug9 #quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
    - name: run-task
      taskRef:
        name: collect-atlas-params
      params:
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      params:
        - name: secretName
          value: $(tasks.run-task.results.secretName)
        - name: ssoTokenUrl
          value: $(tasks.run-task.results.ssoTokenUrl)
        - name: bombasticApiUrl
          value: $(tasks.run-task.results.bombasticApiUrl)
      taskSpec:
        params:
          - name: secretName
          - name: ssoTokenUrl
          - name: bombasticApiUrl
        steps:
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:d320c36f3d707cd5bfe55fe783f70236c06cc2e5
            env:
              - name: "SECRET_NAME"
                value: '$(params.secretName)'
              - name: "SSO_TOKEN_URL"
                value: '$(params.ssoTokenUrl)'
              - name: "BOMBASTIC_API_URL"
                value: '$(params.bombasticApiUrl)'
            script: |
              #!/usr/bin/env bash
              set -eux

              test "$SECRET_NAME" = "atlas-staging-sso-secret"
              test "$SSO_TOKEN_URL" = "https://auth.stage.redhat.com/auth/realms\
              /EmployeeIDP/protocol/openid-connect/token"
              test "$BOMBASTIC_API_URL" = "https://sbom.atlas.release.stage.devshift.net"
