---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: collect-atlas-params
  labels:
    app.kubernetes.io/version: "0.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task that collects Atlas API configuration options from the data file.
  params:
    - name: dataPath
      type: string
      description: |
        Path to the JSON string of the merged data containing the Atlas config.
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
    - name: subdirectory
      description: Subdirectory inside the workspace to be used
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  workspaces:
    - name: data
  results:
    - name: bombasticApiUrl
      type: string
      description: |
        URL of the bombastic API.
    - name: ssoTokenUrl
      type: string
      description: |
        URL of the SSO token issuer.
    - name: secretName
      type: string
      description: |
        The kubernetes secret to use to authenticate to bombastic.
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
      - name: "HOME"
        value: "/tekton/home"
  steps:
    - name: skip-trusted-artifact-operations
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -eo pipefail

        if [ "$(params.ociStorage)" == "empty" ]; then
          echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
          mkdir -p "$(params.dataDir)/$(params.subdirectory)"
          touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
        fi
    - name: use-trusted-artifact
      args:
        - use
        - $(params.sourceDataArtifact)=$(params.dataDir)/$(params.subdirectory)
      computeResources: {}
      image: quay.io/redhat-appstudio/build-trusted-artifacts:e02102ede09aa07187cba066ad547a54724e5cf4
    - name: collect-atlas-params
      image:
        quay.io/konflux-ci/release-service-utils:d320c36f3d707cd5bfe55fe783f70236c06cc2e5
      script: |
        #!/usr/bin/env bash
        set -x

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "ERROR: No valid data file was provided."
            exit 1
        fi

        atlasServer=$(jq -r '.atlas.server' "$DATA_FILE")
        if [ "$atlasServer" = "null" ]; then
            # In this case, SBOM processing will be skipped.
            bombasticApiUrl=""
            ssoTokenUrl=""
            secretName=""
        elif [ "$atlasServer" = "stage" ]; then
            bombasticApiUrl="https://sbom.atlas.release.stage.devshift.net"
            ssoTokenUrl="https://auth.stage.redhat.com/auth/realms/EmployeeIDP/protocol/openid-connect/token"
            secretName="atlas-staging-sso-secret"
        elif [ "$atlasServer" = "production" ]; then
            bombasticApiUrl="https://sbom.atlas.release.devshift.net"
            ssoTokenUrl="https://auth.redhat.com/auth/realms/EmployeeIDP/protocol/openid-connect/token"
            secretName="atlas-prod-sso-secret"
        else
            echo "ERROR: Unknown .atlas.server value '$atlasServer'. Expected 'stage' or 'production'."
            exit 1
        fi

        echo -n "$bombasticApiUrl" > "$(results.bombasticApiUrl.path)"
        echo -n "$ssoTokenUrl" > "$(results.ssoTokenUrl.path)"
        echo -n "$secretName" > "$(results.secretName.path)"
