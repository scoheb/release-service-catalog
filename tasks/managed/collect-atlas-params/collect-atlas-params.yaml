---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: collect-atlas-params
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |-
    Tekton task that collects the Atlas server option from the data file. Based on
    the value of the "atlas.server" field ("stage" or "production"), outputs results
    used to push SBOMs to Atlas. Also outputs results used to push SBOMs to an S3
    bucket. If no Atlas fields are present in the data file, it outputs empty
    strings as results, indicating that the Atlas push should be skipped.
  params:
    - name: dataPath
      type: string
      description: |
        Path to the JSON string of the merged data containing the Atlas config
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - name: atlasApiUrl
      type: string
      description: |
        URL of the Atlas API.
    - name: ssoTokenUrl
      type: string
      description: |
        URL of the SSO token issuer.
    - name: secretName
      type: string
      description: |
        The kubernetes secret to use to authenticate to Atlas.
    - name: retryAWSSecretName
      type: string
      description: |
        The kubernetes secret to use to authenticate to the S3 retry mechanism bucket.
    - name: retryS3Bucket
      type: string
      description: |
        Name of the S3 retry mechanism bucket.
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: collect-atlas-params
      image:
        quay.io/konflux-ci/release-service-utils:d320c36f3d707cd5bfe55fe783f70236c06cc2e5
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 50m
      script: |
        #!/usr/bin/env bash
        set -x

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "ERROR: No valid data file was provided."
            exit 1
        fi

        atlasServer=$(jq -r '.atlas.server' "$DATA_FILE")
        if [ "$atlasServer" = "null" ]; then
            # In this case, SBOM processing will be skipped.
            atlasApiUrl=""
            ssoTokenUrl=""
            secretName=""
            retryAWSSecretName=""
            retryS3Bucket=""
        elif [ "$atlasServer" = "stage" ]; then
            atlasApiUrl="https://atlas.release.stage.devshift.net"
            ssoTokenUrl="https://auth.stage.redhat.com/auth/realms/EmployeeIDP/protocol/openid-connect/token"
            secretName=$(jq -r '.atlas."atlas-sso-secret-name" // "atlas-staging-sso-secret"' "$DATA_FILE")
            retryAWSSecretName=$(jq -r '.atlas."atlas-retry-aws-secret-name" // "atlas-retry-s3-staging-secret"' \
              "$DATA_FILE")
            retryS3Bucket="mpp-e1-preprod-sbom-29093454-2ea7-4fd0-b4cf-dc69a7529ee0"
        elif [ "$atlasServer" = "production" ]; then
            atlasApiUrl="https://atlas.release.devshift.net"
            ssoTokenUrl="https://auth.redhat.com/auth/realms/EmployeeIDP/protocol/openid-connect/token"
            secretName=$(jq -r '.atlas."atlas-sso-secret-name" // "atlas-prod-sso-secret"' "$DATA_FILE")
            retryAWSSecretName=$(jq -r '.atlas."atlas-retry-aws-secret-name" // "atlas-retry-s3-production-secret"' \
              "$DATA_FILE")
            retryS3Bucket="mpp-e1-prod-sbom-e02138d3-5c5c-4d90-a38f-6c54f658604d"
        else
            echo "ERROR: Unknown .atlas.server value '$atlasServer'. Expected 'stage' or 'production'."
            exit 1
        fi

        echo -n "$atlasApiUrl" > "$(results.atlasApiUrl.path)"
        echo -n "$ssoTokenUrl" > "$(results.ssoTokenUrl.path)"
        echo -n "$secretName" > "$(results.secretName.path)"
        echo -n "$retryAWSSecretName" > "$(results.retryAWSSecretName.path)"
        echo -n "$retryS3Bucket" > "$(results.retryS3Bucket.path)"
