---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-populate-release-notes-multiple-images
spec:
  description: |
    Run the populate-release-notes task with multiple images in the snapshot JSON and verify
    the data JSON has the proper content
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        params:
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: setup
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)"
              cat > "$(params.dataDir)/$(params.subdirectory)/data.json" << EOF
              {
                "releaseNotes": {
                  "product_id": 123,
                  "product_name": "Red Hat Openstack Product",
                  "product_version": "123",
                  "cpe": "cpe:/a:example:openstack:el8",
                  "type": "RHSA",
                  "issues": {
                    "fixed": [
                      {
                        "id": "RHOSP-12345",
                        "source": "issues.example.com"
                      },
                      {
                        "id": 1234567,
                        "source": "bugzilla.example.com"
                      }
                    ]
                  },
                  "synopsis": "test synopsis",
                  "topic": "test topic",
                  "description": "test description",
                  "solution": "test solution",
                  "references": [
                    "https://docs.example.com/some/example/release-notes"
                  ]
                }
              }
              EOF

              cat > "$(params.dataDir)/$(params.subdirectory)/snapshot.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp",
                    "containerImage": "registry.io/image@sha256:123456",
                    "repository": "quay.io/redhat-prod/product----repo",
                    "rh-registry-repo": "registry.redhat.io/product/repo",
                    "tags": [
                      "9.4-1723436855",
                      "9.4.0-1723436855",
                      "foo",
                      "bar"
                    ]
                  },
                  {
                    "name": "comp2",
                    "containerImage": "registry.io/image2@sha256:abcde",
                    "repository": "quay.io/redhat-pending/product2----repo2",
                    "rh-registry-repo": "registry.stage.redhat.io/product2/repo2",
                    "tags": [
                      "foo",
                      "bar"
                    ]
                  }
                ]
              }
              EOF
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(params.dataDir)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
            env:
              - name: IMAGE_EXPIRES_AFTER
                value: 1d
              - name: "ORAS_OPTIONS"
                value: "--insecure"
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
    - name: run-task
      taskRef:
        name: populate-release-notes
      params:
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot.json"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sbomDataPath
          value: $(tasks.run-task.results.sbomDataPath)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        params:
          - name: sbomDataPath
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                mkdir -p "$(params.dataDir)/$(params.subdirectory)"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(params.dataDir)/$(params.subdirectory)
            env:
              - name: "ORAS_OPTIONS"
                value: "--insecure"
            computeResources: {}
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              echo Checking image1arch1...
              image1arch1=$(jq '.releaseNotes.content.images[0]' \
                "$(params.dataDir)/$(params.subdirectory)/data.json")
              test "$(jq -r '.architecture' <<< "$image1arch1")" == "amd64"
              test "$(jq -r '.containerImage' <<< "$image1arch1")" == "registry.redhat.io/product/repo@sha256:abcdefg"
              test "$(jq -r '.purl' <<< "$image1arch1")" == \
                "pkg:oci/repo@sha256%3Aabcdefg?arch=amd64&repository_url=registry.redhat.io/product&tag=9.4.0-1723436855"
              test "$(jq -r '.repository' <<< "$image1arch1")" == "registry.redhat.io/product/repo"
              test "$(jq -rc '.tags' <<< "$image1arch1")" == '["9.4-1723436855","9.4.0-1723436855","foo","bar"]'

              test "$(jq -r '.images[0].multiarch' \
                "$(params.dataDir)/$(params.sbomDataPath)")" == "true"

              test "$(jq -r '.images[0].imageSha' \
                "$(params.dataDir)/$(params.sbomDataPath)")" == "123456"

              echo Checking image1arch2...
              image1arch2=$(jq '.releaseNotes.content.images[1]' \
                "$(params.dataDir)/$(params.subdirectory)/data.json")
              test "$(jq -r '.architecture' <<< "$image1arch2")" == "s390x"
              test "$(jq -r '.containerImage' <<< "$image1arch2")" == "registry.redhat.io/product/repo@sha256:deadbeef"
              test "$(jq -r '.purl' <<< "$image1arch2")" == \
               "pkg:oci/repo@sha256%3Adeadbeef?arch=s390x&repository_url=registry.redhat.io/product&tag=9.4.0-1723436855"
              test "$(jq -r '.repository' <<< "$image1arch2")" == "registry.redhat.io/product/repo"
              test "$(jq -rc '.tags' <<< "$image1arch2")" == '["9.4-1723436855","9.4.0-1723436855","foo","bar"]'

              test "$(jq -r '.images[1].multiarch' \
                "$(params.dataDir)/$(params.sbomDataPath)")" == "false"

              test "$(jq -r '.images[1].imageSha' \
                "$(params.dataDir)/$(params.sbomDataPath)")" == "123456"

              echo Checking image2arch1...
              image2arch1=$(jq '.releaseNotes.content.images[2]' \
                "$(params.dataDir)/$(params.subdirectory)/data.json")
              test "$(jq -r '.architecture' <<< "$image2arch1")" == "amd64"
              test "$(jq -r '.containerImage' <<< "$image2arch1")" == \
                "registry.stage.redhat.io/product2/repo2@sha256:abcdefg"
              test "$(jq -r '.purl' <<< "$image2arch1")" == \
                "pkg:oci/repo2@sha256%3Aabcdefg?arch=amd64&repository_url=registry.stage.redhat.io/product2"
              test "$(jq -r '.repository' <<< "$image2arch1")" == "registry.stage.redhat.io/product2/repo2"
              test "$(jq -rc '.tags' <<< "$image2arch1")" == '["foo","bar"]'

              test "$(jq -r '.images[2].multiarch' \
                "$(params.dataDir)/$(params.sbomDataPath)")" == "true"

              test "$(jq -r '.images[2].imageSha' \
                "$(params.dataDir)/$(params.sbomDataPath)")" == "abcde"

              echo Checking image2arch2...
              image2arch2=$(jq '.releaseNotes.content.images[3]' \
                "$(params.dataDir)/$(params.subdirectory)/data.json")
              test "$(jq -r '.architecture' <<< "$image2arch2")" == "s390x"
              test "$(jq -r '.containerImage' <<< "$image2arch2")" == \
                "registry.stage.redhat.io/product2/repo2@sha256:deadbeef"
              test "$(jq -r '.purl' <<< "$image2arch2")" == \
                "pkg:oci/repo2@sha256%3Adeadbeef?arch=s390x&repository_url=registry.stage.redhat.io/product2"
              test "$(jq -r '.repository' <<< "$image2arch2")" == "registry.stage.redhat.io/product2/repo2"
              test "$(jq -rc '.tags' <<< "$image2arch2")" == '["foo","bar"]'

              test "$(jq -r '.images[3].multiarch' \
                "$(params.dataDir)/$(params.sbomDataPath)")" == "false"

              test "$(jq -r '.images[3].imageSha' \
                "$(params.dataDir)/$(params.sbomDataPath)")" == "abcde"
      runAfter:
        - run-task
