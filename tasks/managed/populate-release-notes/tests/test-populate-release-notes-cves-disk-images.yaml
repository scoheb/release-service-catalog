---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-populate-release-notes-cves-disk-images
spec:
  description: |
    Run the populate-release-notes task and ensure CVE information present in the data.json
    is properly included in the releaseNotes.content.artifacts for disk-image releases.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup
            image: quay.io/konflux-ci/release-service-utils:ea7868ebdcc7a2116c620255034226611d837f42
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "mapping": {
                  "components": [
                      {
                        "name": "amd-bootc-iso-disk-image-1-5",
                        "staged": {
                          "destination": "rhelai-1_DOT_5-for-rhel-9-x86_64-isos",
                          "version": "1.5.3",
                          "files": [
                            {
                              "filename": "rhel-ai-amd-1.5.3-20250101-x86_64-boot.iso.gz",
                              "source": "install.iso.gz"
                            }
                          ]
                        },
                        "contentGateway": {
                          "contentType": "disk-image",
                          "productName": "Binary_RL_Red Hat Enterprise Linux AI",
                          "productCode": "RHELAI",
                          "productVersionName": "1.5.3",
                          "filePrefix": "rhel-ai-amd-1.5.3"
                        }
                      },
                      {
                        "name": "amd-bootc-qcow2-disk-image-1-5",
                        "staged": {
                          "destination": "rhelai-1_DOT_5-for-rhel-9-x86_64-isos",
                          "version": "1.5.3",
                          "files": [
                            {
                              "filename": "rhel-ai-amd-1.5.3-20250101-x86_64-kvm.qcow2",
                              "source": "disk.qcow2"
                            }
                          ]
                        },
                        "contentGateway": {
                          "contentType": "disk-image",
                          "productName": "Binary_RL_Red Hat Enterprise Linux AI",
                          "productCode": "RHELAI",
                          "productVersionName": "1.5.3",
                          "filePrefix": "rhel-ai-amd-1.5.3"
                        }
                      }
                    ]
                  },
                "releaseNotes": {
                   "cves": [
                    {
                      "component": "amd-bootc-iso-disk-image-1-5",
                      "packages": [
                        "pkg1",
                        "pkg2"
                      ],
                      "key": "CVE-123",
                      "summary": "",
                      "uploadDate": "01-01-1980",
                      "url": ""
                    },
                    {
                      "component": "amd-bootc-qcow2-disk-image-1-5",
                      "packages": [
                        "pkg3"
                      ],
                      "key": "CVE-456",
                      "summary": "",
                      "uploadDate": "01-01-1980",
                      "url": ""
                    }
                  ],
                  "product_id": [
                    932
                  ],
                  "product_name": "Red Hat Enterprise Linux AI",
                  "product_version": "1.5.3",
                  "cpe": "cpe:/a:redhat:enterprise_linux_ai:1.5.3",
                  "type": "RHSA",
                  "issues": {
                    "fixed": [
                      {
                        "id": "RHELAI-12345",
                        "source": "issues.example.com"
                      },
                      {
                        "id": 1234567,
                        "source": "bugzilla.example.com"
                      }
                    ]
                  },
                  "synopsis": "test synopsis",
                  "topic": "test topic",
                  "description": "test description",
                  "solution": "test solution",
                  "references": [
                    "https://docs.example.com/some/example/release-notes"
                  ]
                }
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot.json" << EOF
              {
                "application": "rhel-ai-app",
                "components": [
                  {
                    "name": "amd-bootc-iso-disk-image-1-5",
                    "containerImage": "registry.io/image@sha256:123456",
                    "repository": "quay.io/redhat-prod/rhel-ai----disk-image",
                    "tags": [
                      "1.5.3",
                      "latest"
                    ]
                  },
                  {
                    "name": "amd-bootc-qcow2-disk-image-1-5",
                    "containerImage": "registry.io/image@sha256:123456",
                    "repository": "quay.io/redhat-prod/rhel-ai----disk-image",
                    "tags": [
                      "1.5.3",
                      "latest"
                    ]
                  }
                ]
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: populate-release-notes
      params:
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot.json"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:ea7868ebdcc7a2116c620255034226611d837f42
            script: |
              #!/usr/bin/env bash
              set -eux
              DATA_FILE="$(params.dataDir)/$(context.pipelineRun.uid)/data.json"

              # Assert exact architecture and os for the two artifacts derived from filenames
              test "$(jq -r '.releaseNotes.content.artifacts[0].architecture' "$DATA_FILE")" == "x86_64"
              test "$(jq -r '.releaseNotes.content.artifacts[1].architecture' "$DATA_FILE")" == "x86_64"
              test "$(jq -r '.releaseNotes.content.artifacts[0].os' "$DATA_FILE")" == "linux"
              test "$(jq -r '.releaseNotes.content.artifacts[1].os' "$DATA_FILE")" == "linux"

              # The CVEs should be present in the disk-image artifacts section
              test "$(jq '.releaseNotes.content.artifacts[0].cves.fixed | length' "$DATA_FILE")" == 1
              test "$(jq '.releaseNotes.content.artifacts[1].cves.fixed | length' "$DATA_FILE")" == 1
              test "$(jq -r '.releaseNotes.content.artifacts[0].cves.fixed | keys[0]' "$DATA_FILE")" == "CVE-123"
              test "$(jq -r '.releaseNotes.content.artifacts[1].cves.fixed | keys[0]' "$DATA_FILE")" == "CVE-456"
              test "$(jq '.releaseNotes.content.artifacts[0].cves.fixed."CVE-123".packages | length' "$DATA_FILE")" == 2

              # Ensure component names are correct
              comp0=$(jq -r '.releaseNotes.content.artifacts[0].component' "$DATA_FILE")
              comp1=$(jq -r '.releaseNotes.content.artifacts[1].component' "$DATA_FILE")
              test "$comp0" == "amd-bootc-iso-disk-image-1-5"
              test "$comp1" == "amd-bootc-qcow2-disk-image-1-5"

              # Check that we have the expected number of artifacts (2 files = 2 artifacts)
              test "$(jq '.releaseNotes.content.artifacts | length' "$DATA_FILE")" == 2

              # Verify PURL is placeholder (will be built completely by create-advisory update-purl step)
              purl0=$(jq -r '.releaseNotes.content.artifacts[0].purl' "$DATA_FILE")
              test "$purl0" = "placeholder"
      runAfter:
        - run-task