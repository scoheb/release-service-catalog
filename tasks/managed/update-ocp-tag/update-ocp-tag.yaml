---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-ocp-tag
  labels:
    app.kubernetes.io/version: "2.0.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to update pull-spec tag with the OCP version gotten from the get-ocp-version task. The replacement only
    occurs when the {{ OCP_VERSION }} placeholder is present.
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: ocpVersion
      description: OCP version tag to replace the current set tags on index images
      type: string
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  workspaces:
    - name: data
      description: The workspace where the extra config file containing the mapping and snapshot json reside
  results:
    - name: updated-fromIndex
      type: string
      description: source Index image (catalog of catalogs) FBC fragment with updated tag
    - name: updated-targetIndex
      type: string
      description: Index image (catalog of catalogs) the FBC fragment will be added to with updated tag
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: skip-trusted-artifact-operations
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: update-ocp-tag
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
       #!/usr/bin/env bash
       set -eux

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        # The replace_tag function receives a FBC index image as parameter and replaces it with the ocpVersion found
        # by the `get-ocp-version` task, when the {{ OCP_VERSION }} placeholder is present.
        replace_tag() {
            # replaces the tag if the placeholder exists
            sed -E "s/\{\{(\\s+)?OCP_VERSION(\\s+)?\}\}/$(params.ocpVersion)/g" <<< "${1}"
        }

        # The validateOCPVersion function receives the tag version of a given index and the OCP version of a given
        # base image as parameters, returning valid (0) if the arguments match each other
        validateOCPVersion() {
          indexVersion="${1#*:}"
          expectedOCPVersion="${2}"
          if [ "${indexVersion}" != "${expectedOCPVersion}" ]; then
            echo "The OCP version of the targetIndex does not match with the base image"
            echo "- index version: ${indexVersion}"
            echo "- base image version: ${expectedOCPVersion}"
            return 1
          fi
        }

        # Access the updated image
        updatedFromIndex=$(replace_tag "$(jq -r '.fbc.fromIndex' "$DATA_FILE")")
        updatedTargetIndex=$(replace_tag "$(jq -r '.fbc.targetIndex' "$DATA_FILE")")

        # if {{OCP_VERSION}} is not set, the original Index will be kept but its ocp version should
        # match base image version.
        validateOCPVersion "${updatedFromIndex}" "$(params.ocpVersion)"
        if [ -n "${updatedTargetIndex}" ]; then
          validateOCPVersion "${updatedTargetIndex}" "$(params.ocpVersion)"
        fi

        echo "Updated values"
        echo -n "$updatedFromIndex" | tee "$(results.updated-fromIndex.path)"
        echo
        echo -n "$updatedTargetIndex" | tee "$(results.updated-targetIndex.path)"
        echo
    - name: create-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
    - name: patch-source-data-artifact-result
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/patch-source-data-artifact-result/patch-source-data-artifact-result.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
