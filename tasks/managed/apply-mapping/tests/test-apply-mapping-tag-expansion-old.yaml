---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-apply-mapping-tag-expansion-old
spec:
  description: |
    Run the apply-mapping task with a snapshot.spec json and a custom mapping provided in
    the data file with tags per component and verify that the resulting json
    contains the expected values with tags expanded, including incrementer logic.

    To be deleted when component.repository is no longer supported
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:ea7868ebdcc7a2116c620255034226611d837f42
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/test_data.json" << EOF
              {
                "mapping": {
                  "components": [
                    {
                      "name": "comp1",
                      "repository": "repo1",
                      "tags": [
                        "tag1-{{timestamp}}",
                        "tag2-{{ timestamp }}",
                        "tag3-{{ timestamp }}-{{ git_short_sha }}",
                        "{{git_sha}}",
                        "{{ git_sha }}-abc",
                        "{{git_short_sha}}",
                        "{{ git_short_sha }}-bar",
                        "foo-{{digest_sha}}",
                        "{{ digest_sha }}",
                        "v2.0.0-{{ incrementer }}",
                        "tag-{{ labels.Goodlabel }}",
                        "tag-{{ labels.Goodlabel.with-dash }}",
                        "tag1-2024-07-29"
                      ]
                    },
                    {
                      "name": "comp2",
                      "repository": "repo2",
                      "tags": [
                        "tag1-{{timestamp}}",
                        "tag2-{{ release_timestamp }}",
                        "tag4-{{release_timestamp}}",
                        "v1.0.0-{{ incrementer }}",
                        "v1-{{ incrementer }}-release"
                      ],
                      "timestampFormat": "%Y-%m"
                    },
                    {
                      "name": "comp3",
                      "repository": "repo3a"
                    }
                  ],
                  "defaults": {
                    "timestampFormat": "%Y-%m-%d",
                    "tags": [
                      "defaultTag"
                    ]
                  }
                }
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp1",
                    "containerImage": "registry.io/labels@sha256:123456",
                    "source": {
                      "git": {
                        "revision": "testrevision",
                        "url": "myurl"
                      }
                    }
                  },
                  {
                    "name": "comp2",
                    "containerImage": "registry.io/onlycreated@sha256:123456",
                    "repository": "repo2"
                  },
                  {
                    "name": "comp3",
                    "containerImage": "registry.io/image3@sha256:123456",
                    "repository": "repo3"
                  }
                ]
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: apply-mapping
      params:
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/test_snapshot_spec.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/test_data.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:ea7868ebdcc7a2116c620255034226611d837f42
            script: |
              #!/usr/bin/env bash
              set -eux

              echo Test that SNAPSHOT contains component comp1
              test "$(
                jq -r '[ .components[] | select(.name=="comp1") ] | length' \
                < "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec.json"
              )" -eq 1

              echo Test that comp1 has the proper tags
              test "$(
                jq -c '.components[] | select(.name=="comp1") | .tags' \
                < "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec.json"
              )" == '["defaultTag","foo-123456","tag-labelvalue","tag-labelvalue-with-dash",'\
              '"tag1-2024-07-29","tag2-2024-07-29","tag3-2024-07-29-testrev","v2.0.0-5","123456",'\
              '"testrevision-abc","testrev-bar","testrevision","testrev"]'

              echo Test that SNAPSHOT contains component comp2
              test "$(
                jq -r '[ .components[] | select(.name=="comp2") ] | length' \
                < "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec.json"
              )" -eq 1

              echo Test that comp2 has the proper tags
              test "$(
                jq -c '.components[] | select(.name=="comp2") | .tags' \
                < "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec.json"
              )" == '["defaultTag","tag1-1980-01","tag2-1980-01","tag4-1980-01","v1-1-release","v1.0.0-1"]'

              echo Test that repository of component comp3 was overridden by mapping file
              test "$(
                jq -r '.components[] | select(.name=="comp3") | .repository' \
                < "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec.json"
              )" == repo3a

              echo Test that comp3 has the 1 default tag
              test "$(
                jq -r '.components[] | select(.name=="comp3") | .tags | length' \
                < "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec.json"
              )" -eq 1
