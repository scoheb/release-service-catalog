---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-apply-mapping-other-formats
spec:
  description: |
    Run the apply-mapping task with a snapshot.spec json where the repository is in a format not specifically
    handled by the task. Verify that the resulting json remains unchanged in the repository field.
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup-other-formats
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: snapshot
            type: string
          - name: sourceDataArtifact
            type: string
        params:
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
            - name: "HOME"
              value: "/tekton/home"
        steps:
          - name: setup-other-formats-values
            image: quay.io/konflux-ci/release-service-utils:e85ceb962ee6f4d0672b4aa4e9946621ab302f20
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)"
              cat > "$(params.dataDir)/$(params.subdirectory)/test_data_other_formats.json" << EOF
              {
                "mapping": {
                  "components": [
                    {
                      "name": "comp1",
                      "repository": "quay.io/my-sample/my-image"
                    }
                  ]
                }
              }
              EOF

              cat > "$(params.dataDir)/$(params.subdirectory)/test_snapshot_spec_other_formats.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp1",
                    "containerImage": "imageurl1@sha256:123456"
                  }
                ]
              }
              EOF
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: subdirectory
                value: $(params.subdirectory)
              - name: dataDir
                value: $(params.dataDir)
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: dataDir
                value: $(params.dataDir)
              - name: subdirectory
                value: $(params.subdirectory)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
          - name: patch-source-data-artifact-result
            ref:
              name: patch-source-data-artifact-result
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task-other-formats
      taskRef:
        name: apply-mapping
      params:
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/test_snapshot_spec_other_formats.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/test_data_other_formats.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup-other-formats.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
      runAfter:
        - setup-other-formats
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: check-result-other-formats
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task-other-formats.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        workspaces:
          - name: data
        params:
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
            - name: "HOME"
              value: "/tekton/home"
        steps:
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: subdirectory
                value: $(params.subdirectory)
              - name: dataDir
                value: $(params.dataDir)
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)
            computeResources: {}
            image: quay.io/redhat-appstudio/build-trusted-artifacts:e02102ede09aa07187cba066ad547a54724e5cf4
          - name: check-result-other-formats
            image: quay.io/konflux-ci/release-service-utils:e85ceb962ee6f4d0672b4aa4e9946621ab302f20
            script: |
              #!/usr/bin/env sh
              set -eux

              echo Test that SNAPSHOT contains component comp1
              test "$(
                jq -r '[ .components[] | select(.name=="comp1") ] | length' \
                < "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec_other_formats.json"
              )" -eq 1

              echo Test that repository of component comp1 stayed intact
              test "$(
                jq -r '.components[] | select(.name=="comp1") | .repository' \
                < "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec_other_formats.json"
              )" == quay.io/my-sample/my-image

              echo Test that rh-registry-repo for comp1 is not set because it was not in a known format
              test -z "$(
                jq -r '.components[] | select(.name=="comp1") | ."rh-registry-repo" // empty' \
                < "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec_other_formats.json"
              )"

              echo Test that registry-access-repo for comp1 is not set because it was not in a known format
              test -z "$(
                jq -r '.components[] | select(.name=="comp1") | ."registry-access-repo" // empty' \
                < "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec_other_formats.json"
              )"
      runAfter:
        - run-task-other-formats
