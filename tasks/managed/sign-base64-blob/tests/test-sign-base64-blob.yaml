---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-sign-base64-blob
spec:
  description: Test creating a internal request to sign a blob
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:3729a54989514da6a777579feabbd9b346c73551
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "sign": {
                  "configMapName": "signing-config-map"
                }
              }
              EOF

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/binaries"
              touch "$(params.dataDir)/$(context.pipelineRun.uid)/binaries/foo_SHA256SUMS"
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
          - name: patch-source-data-artifact-result
            ref:
              name: patch-source-data-artifact-result
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: sign-base64-blob
      params:
        - name: requester
          value: testuser
        - name: blob
          value: test-blob
        - name: binariesPath
          value: $(context.pipelineRun.uid)/binaries
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: binariesPath
          value: $(context.pipelineRun.uid)/binaries
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
          - name: binariesPath
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:3729a54989514da6a777579feabbd9b346c73551
            script: |
              #!/usr/bin/env bash
              set -eux

              internalRequest="$(kubectl get internalrequest --sort-by=.metadata.creationTimestamp --no-headers \
                -o custom-columns=":metadata.name")"
              params=$(kubectl get internalrequest "${internalRequest}" -o jsonpath="{.spec.params}")

              if [ "$(jq -r '.blob' <<< "${params}")" != "test-blob" ]; then
                echo "blob does not match"
                exit 1
              fi

              if [ "$(jq -r '.config_map_name' <<< "${params}")" != "signing-config-map" ]
              then
                echo "config_map_name does not match"
                exit 1
              fi

              if [ "$(jq -r '.requester' <<< "${params}")" != "testuser" ]
              then
                echo "requester does not match"
                exit 1
              fi

              if [ "$(jq -r '.pipeline_image' <<< "${params}")" != \
                 "quay.io/redhat-isv/operator-pipelines-images:9ea90b42456fcdf66edf4b15c0c0487ba5fa3ee3" ]
              then
                echo "pipeline_image does not match"
                exit 1
              fi

              binaries_path="$(params.dataDir)/$(params.binariesPath)"
              created_file=$(find "$binaries_path" -maxdepth 1 -name '*sig*' -printf '%f\n')
              if [ "$created_file" != "foo_SHA256SUMS.sig" ]
              then
                echo "Unexpected filename for the signed file"
                exit 1
              fi

              file_content=$(cat "$binaries_path/foo_SHA256SUMS.sig")
              if [ "$file_content" != "dummy-payload" ]
              then
                echo "Payload is not correct"
                exit 1
              fi
      runAfter:
        - run-task
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:3729a54989514da6a777579feabbd9b346c73551
            script: |
              #!/usr/bin/env bash
              set -eux

              kubectl delete internalrequests --all
