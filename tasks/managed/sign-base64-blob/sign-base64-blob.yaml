---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sign-base64-blob
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |-
    Creates an InternalRequest to sign a base64 encoded blob
    
    ## Signing data parameters
    
     The signing configuration should be set as `data.sign` in the _releasePlanAdmission_. The data should be set in the
     _ReleasePlanAdmission_ as follows:
    
    ```
    data:
        sign:
            pipelineImage: <image pullspec>
            configMapName: <configmap name>
    ```
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: blob
      type: string
      description: The base64 encoded blob to be signed
    - name: requester
      type: string
      description: Name of the user that requested the signing, for auditing purposes
    - name: requestTimeout
      type: string
      default: "1800"
      description: InternalRequest timeout
    - name: binariesPath
      type: string
      description: The directory inside the workspace where the binaries are stored
      default: binaries
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: sign-base64-blob
      image:
        quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
          cpu: 100m
      script: |
        #!/usr/bin/env bash
        set -ex

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        default_pipeline_image="quay.io/redhat-isv/operator-pipelines-images:9ea90b42456fcdf66edf4b15c0c0487ba5fa3ee3"
        pipeline_image=$(jq -r --arg default_pipeline_image ${default_pipeline_image} \
            '.sign.pipelineImage // $default_pipeline_image' "${DATA_FILE}")
        config_map_name=$(jq -r '.sign.configMapName // "signing-config-map"' "${DATA_FILE}")
        pipelinerun_label="internal-services.appstudio.openshift.io/pipelinerun-uid"

        echo "Creating InternalRequest to sign blob:"
        echo "- blob=$(params.blob)"
        echo "- requester=$(params.requester)"

        IR_RESULT_FILE=$(mktemp)

        internal-request --pipeline "blob-signing-pipeline" \
            -p pipeline_image="${pipeline_image}" \
            -p blob="$(params.blob)" \
            -p requester="$(params.requester)" \
            -p config_map_name="${config_map_name}" \
            -p taskGitUrl="$(params.taskGitUrl)" \
            -p taskGitRevision="$(params.taskGitRevision)" \
            -l ${pipelinerun_label}="$(params.pipelineRunUid)" \
            -t "$(params.requestTimeout)" --pipeline-timeout "0h30m0s" --task-timeout "0h25m0s" | tee "$IR_RESULT_FILE"

        internalRequest=$(awk -F"'" '/created/ { print $2 }' \
          "$IR_RESULT_FILE")
        echo "done (${internalRequest})"

        payload=$(kubectl get internalrequest "$internalRequest" -o=jsonpath='{.status.results.signed_payload}')
        decoded_payload=$(echo -n "$payload" | base64 -d)

        # Build .sig file
        checksum_file_name=$(find "$(params.dataDir)/$(params.binariesPath)" -maxdepth 1 -name '*SHA256SUMS*' \
          -printf '%f\n')
        echo -n "$decoded_payload" \
        | gpg --dearmor \
        | tee "$(params.dataDir)/$(params.binariesPath)/${checksum_file_name}.sig"
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
