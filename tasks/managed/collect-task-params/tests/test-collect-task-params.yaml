---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-collect-task-params
spec:
  description: |
    Test that collect-task-params correctly uses returns keys with and without defaults
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "foo": {
                  "bar": "nested test value"
                },
                "arr": [
                  "str"
                ],
                "simpleValue": "hello world"
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: collect-task-params
      params:
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: keysToExtract
          value: |
            [
              {"resultIndex": 0, "key": ".arr[0]"},
              {"resultIndex": 1, "key": ".foo.bar"},
              {"resultIndex": 2, "key": ".simpleValue"},
              {"resultIndex": 3, "key": ".missingKey", "default": "default_value"},
              {"resultIndex": 4, "key": ".numberValue", "default": "42"},
              {"resultIndex": 5, "key": ".missingemptydefault", "default": ""}
            ]
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: verify-results
      runAfter:
        - run-task
      params:
        - name: arrayValue
          value: $(tasks.run-task.results.extractedValues[0])
        - name: bar
          value: $(tasks.run-task.results.extractedValues[1])
        - name: simpleValue
          value: $(tasks.run-task.results.extractedValues[2])
        - name: defaultStringValue
          value: $(tasks.run-task.results.extractedValues[3])
        - name: defaultNumberValue
          value: $(tasks.run-task.results.extractedValues[4])
        - name: emptyDefaultValue
          value: $(tasks.run-task.results.extractedValues[5])
      taskSpec:
        params:
          - name: arrayValue
          - name: bar
          - name: simpleValue
          - name: defaultStringValue
          - name: defaultNumberValue
          - name: emptyDefaultValue
        steps:
          - name: verify-results
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              if [ "$(params.arrayValue)" != "str" ]; then
                echo "Error: Expected index 0 to be 'str', got $(params.arrayValue)"
                exit 1
              fi

              if [ "$(params.bar)" != "nested test value" ]; then
                echo "Error: Expected index 1 to be 'nested test value', got $(params.bar)"
                exit 1
              fi

              if [ "$(params.simpleValue)" != "hello world" ]; then
                echo "Error: Expected index 2 to be 'hello world', got $(params.simpleValue)"
                exit 1
              fi

              if [ "$(params.defaultStringValue)" != "default_value" ]; then
                echo "Error: Expected index 3 to be 'default_value', got $(params.defaultStringValue)"
                exit 1
              fi

              if [ "$(params.defaultNumberValue)" != "42" ]; then
                echo "Error: Expected index 4 to be '42', got $(params.defaultNumberValue)"
                exit 1
              fi

              if [ "$(params.emptyDefaultValue)" != "" ]; then
                echo "Error: Expected index 5 to be '', got $(params.emptyDefaultValue)"
                exit 1
              fi
