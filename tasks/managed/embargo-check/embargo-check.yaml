---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: embargo-check
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >
    Tekton task to check if any issues or CVEs in the releaseNotes key of
    the data.json are embargoed. It checks the issues by server using curl and
    checks the CVEs via an InternalRequest. If any issue does not exist or any CVE is embargoed,
    the task will fail. The task will also fail if a Jira issue listed is
    for a component that does not exist in the releaseNotes.content.[images|artifacts] section
    or if said component does not list the CVE from the issue.

    Finally, the task will inject the `public` key to each issue listed for `issues.redhat.com`.
    This is a boolean value that is set based on the issues visibility.
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: requestTimeout
      type: string
      default: "2700"
      description: InternalRequest timeout
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - description: Produced trusted data artifact
      name: sourceDataArtifact
      type: string
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: check-issues
      image: quay.io/konflux-ci/release-service-utils:b7f90a1dde20efe9a4063c1082c4f0ce31113bb1
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 50m
      env:
        - name: ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: konflux-advisory-jira-secret
              key: token
      script: |
        #!/usr/bin/env bash
        set -x

        SUPPORTED_ISSUE_TRACKERS='{
            "Jira": {
                "api": "rest/api/2/issue",
                "servers": [
                    "issues.redhat.com",
                    "jira.atlassian.com"
                ]
            },
            "bugzilla": {
                "api": "rest/bug",
                "servers": [
                    "bugzilla.redhat.com"
                ]
            }
        }'

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        # It is expected for the custom field ids to remain stable, but to get them, you can do:
        # curl -H "Authorization: Bearer $ACCESS_TOKEN" https://issues.redhat.com/rest/api/2/field
        CVE_FIELD="customfield_12324749"

        RC=0

        NUM_ISSUES=$(jq -cr '.releaseNotes.issues.fixed | length' "${DATA_FILE}")
        for ((i = 0; i < NUM_ISSUES; i++)); do
            issue=$(jq -c --argjson i "$i" '.releaseNotes.issues.fixed[$i]' "${DATA_FILE}")
            server=$(jq -r '.source' <<< "$issue")
            API=$(jq -r '.[] | select(.servers[] | contains("'"$server"'")) | .api' <<< "$SUPPORTED_ISSUE_TRACKERS")
            API_URL="https://$(jq -r '.source' <<< "$issue")/${API}/$(jq -r '.id' <<< "$issue")"
            AUTH_ARGS=()
            set +x # We don't want to leak the ACCESS_TOKEN
            if [ "$server" = "issues.redhat.com" ] ; then
                AUTH_ARGS=(-H "Authorization: Bearer $ACCESS_TOKEN")
            fi
            OUTPUT=$(curl-with-retry --retry 3 "${AUTH_ARGS[@]}" "${API_URL}")
            CURL_RC=$?
            set -x
            if [ "$CURL_RC" -ne 0 ] ; then
                echo "Error: ${issue} is not visible. Assuming it is embargoed and stopping pipelineRun execution." \
                    | tee -a /tmp/errors.txt
                RC=1
                continue
            fi

            # Public should be true if and only if the security field doesn't exist and the issue is accessible
            # without authentication
            public=false

            if ! "$(jq '.fields | has("security")' <<< "$OUTPUT")" ; then
                echo "Checking if the issue is public - if not, curl will fail with error 401"
                if curl-with-retry --retry 3 "${API_URL}" > /dev/null; then
                    public=true
                fi
            fi

            # Inject public key
            jq --argjson i "$i" --argjson public $public '.releaseNotes.issues.fixed[$i].public = $public' \
                "${DATA_FILE}" > /tmp/data.tmp && mv /tmp/data.tmp "${DATA_FILE}"

            # Perform additional checks only for issues on issues.redhat.com
            if [ "$server" != "issues.redhat.com" ] ; then
                continue
            fi

            # Perform cve id check only if the type is Vulnerability
            ISSUE_TYPE=$(jq -r '.fields.issuetype.name' <<< "$OUTPUT")
            if [ "$ISSUE_TYPE" != "Vulnerability" ] ; then
                continue
            fi

            if jq -e '.releaseNotes.content.images' "$DATA_FILE" > /dev/null; then
                CONTENT_TYPE=".releaseNotes.content.images"
            elif jq -e '.releaseNotes.content.artifacts' "$DATA_FILE" > /dev/null; then
                CONTENT_TYPE=".releaseNotes.content.artifacts"
            else
                echo "No content found under releaseNotes.content.images or .artifacts;"
                continue
            fi

            CVE_ID=$(jq -r --arg field "$CVE_FIELD" '.fields[$field]' <<< "$OUTPUT")

            if [ "$(jq --arg CVE "$CVE_ID" \
              "$CONTENT_TYPE"' | map(.cves.fixed | has($CVE)) | any' \
              < "$DATA_FILE")" != "true" ]; then
                echo "Error: Issue $issue lists 'CVE ID' $CVE_ID" \
                  "but that CVE is not present in the releaseNotes.content section for any image or artifact." \
                  "This is likely due to CVE $CVE_ID not being provided in the releaseNotes.cves part of" \
                  "your Release object." \
                  | tee -a /tmp/errors.txt
                RC=1
                continue
            fi

        done

        if [ "$RC" -ne 0 ] ; then
            echo "Errors were found in the embargo check:"
            cat /tmp/errors.txt
        fi
        exit $RC
    - name: check-cves
      image: quay.io/konflux-ci/release-service-utils:b7f90a1dde20efe9a4063c1082c4f0ce31113bb1
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
          cpu: 100m
      script: |
        #!/usr/bin/env bash
        set -x

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        PIPELINERUN_LABEL="internal-services.appstudio.openshift.io/pipelinerun-uid"

        if jq -e '.releaseNotes.content.images' "$DATA_FILE" > /dev/null; then
            CONTENT_TYPE=".releaseNotes.content.images"
        elif jq -e '.releaseNotes.content.artifacts' "$DATA_FILE" > /dev/null; then
            CONTENT_TYPE=".releaseNotes.content.artifacts"
        else
            echo "No content found under releaseNotes.content.images or .artifacts;"
        fi

        CVES=$(jq -r "$CONTENT_TYPE"'[] | select(.cves.fixed) | .cves.fixed
            | to_entries[] | .key' "${DATA_FILE}" | sort -u | tr "\n" " ")

        if [[ ${CVES} == "" ]] ; then
            echo "No CVEs found to check"
            exit 0
        fi

        echo "Checking the following CVEs: ${CVES}"

        IR_RESULT_FILE=$(mktemp)

        requestTimeout=$(($(params.requestTimeout)+300))
        pipelineTimeout=$(date -u -d @${requestTimeout} +"%Hh%Mm%Ss")
        taskTimeout=$(date -u -d @"$(params.requestTimeout)" +"%Hh%Mm%Ss")
        internal-request --pipeline "check-embargoed-cves" \
            -p cves="${CVES}" \
            -p taskGitUrl="$(params.taskGitUrl)" \
            -p taskGitRevision="$(params.taskGitRevision)" \
            -l ${PIPELINERUN_LABEL}="$(params.pipelineRunUid)" \
            -t "$(params.requestTimeout)" \
            --pipeline-timeout "$pipelineTimeout" \
            --task-timeout "$taskTimeout" \
            -s true \
            | tee "$IR_RESULT_FILE" || \
            (grep "^\[" "$IR_RESULT_FILE" | jq . && exit 1)

        internalRequest=$(awk -F"'" '/created/ { print $2 }' "$IR_RESULT_FILE")
        echo "done (${internalRequest})"

        results=$(kubectl get internalrequest "$internalRequest" -o=jsonpath='{.status.results}')
        if [[ "$(echo "${results}" | jq -r '.result')" == "Success" ]]; then
          echo "No embargoed CVEs found"
        else
          echo "The following CVEs are marked as embargoed:"
          echo "${results}" | jq -cr '.embargoed_cves'
          exit 1
        fi
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: "$(params.taskGitUrl)"
          - name: revision
            value: "$(params.taskGitRevision)"
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
