---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: embargo-check
  labels:
    app.kubernetes.io/version: "0.5.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >
    Tekton task to check if any issues or CVEs in the releaseNotes key of the data.json
    are embargoed. It checks the issues by server using curl and checks the CVEs via an
    InternalRequest. If any issue or CVE is embargoed, the task will fail.
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: requestTimeout
      type: string
      default: "180"
      description: InternalRequest timeout
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: sourceDataArtifact
      type: string
    - name: subdirectory
      description: Subdirectory inside the workspace to be used
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  workspaces:
    - name: data
      description: The workspace where the snapshot spec json file resides
  results:
    - description: Produced trusted data artifact
      name: sourceDataArtifact
      type: string
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: skip-trusted-artifact-operations
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -eo pipefail

        if [ "$(params.ociStorage)" == "empty" ]; then
          echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
          mkdir -p "$(params.dataDir)/$(params.subdirectory)"
          touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
        fi
    - name: use-trusted-artifact
      args:
        - use
        - $(params.sourceDataArtifact)=$(params.dataDir)/$(params.subdirectory)
      env:
        - name: "ORAS_OPTIONS"
          value: "--insecure"
        - name: "HOME"
          value: "/tekton/home"
      computeResources: {}
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
    - name: check-issues
      image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
      script: |
        #!/usr/bin/env bash
        set -x

        SUPPORTED_ISSUE_TRACKERS='{
            "Jira": {
                "api": "rest/api/2/issue",
                "servers": [
                    "issues.redhat.com",
                    "jira.atlassian.com"
                ]
            },
            "bugzilla": {
                "api": "rest/bug",
                "servers": [
                    "bugzilla.redhat.com"
                ]
            }
        }'

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        RC=0

        NUM_ISSUES=$(jq -cr '.releaseNotes.issues.fixed | length' "${DATA_FILE}")
        for ((i = 0; i < NUM_ISSUES; i++)); do
            issue=$(jq -c --argjson i "$i" '.releaseNotes.issues.fixed[$i]' "${DATA_FILE}")
            server=$(jq -r '.source' <<< "$issue")
            API=$(jq -r '.[] | select(.servers[] | contains("'"$server"'")) | .api' <<< "$SUPPORTED_ISSUE_TRACKERS")
            API_URL="https://$(jq -r '.source' <<< "$issue")/${API}/$(jq -r '.id' <<< "$issue")"
            curl --fail --output /dev/null "${API_URL}"
            if [ $? -ne 0 ] ; then
                echo "${issue} is not publicly visible. Assuming it is embargoed and stopping pipelineRun execution."
                RC=1
            fi
        done

        exit $RC
    - name: check-cves
      image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
      script: |
        #!/usr/bin/env bash

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        PIPELINERUN_LABEL="internal-services.appstudio.openshift.io/pipelinerun-uid"

        CVES=$(jq -r '.releaseNotes.content.images[].cves.fixed
            | to_entries[] | .key' "${DATA_FILE}" | sort -u | tr "\n" " ")

        if [[ ${CVES} == "" ]] ; then
            echo "No CVEs found to check"
            exit 0
        fi

        echo "Checking the following CVEs: ${CVES}"

        internal-request --pipeline "check-embargoed-cves" \
            -p cves="${CVES}" \
            -p taskGitUrl="$(params.taskGitUrl)" \
            -p taskGitRevision="$(params.taskGitRevision)" \
            -l ${PIPELINERUN_LABEL}="$(params.pipelineRunUid)" \
            -t "$(params.requestTimeout)" \
            -s true \
            > "$(params.dataDir)/$(params.subdirectory)/ir-result.txt" || \
            (grep "^\[" "$(params.dataDir)/$(params.subdirectory)ir-result.txt" | jq . && exit 1)

        internalRequest=$(awk -F"'" '/created/ { print $2 }' \
          "$(params.dataDir)/$(params.subdirectory)/ir-result.txt")
        echo "done (${internalRequest})"

        results=$(kubectl get internalrequest "$internalRequest" -o=jsonpath='{.status.results}')
        if [[ "$(echo "${results}" | jq -r '.result')" == "Success" ]]; then
          echo "No embargoed CVEs found"
        else
          echo "The following CVEs are marked as embargoed:"
          echo "${results}" | jq -cr '.embargoed_cves'
          exit 1
        fi
    - name: create-trusted-artifact
      args:
        - create
        - --store
        - $(params.ociStorage)
        - $(results.sourceDataArtifact.path)=$(params.dataDir)/$(params.subdirectory)
      computeResources: {}
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
      env:
        - name: IMAGE_EXPIRES_AFTER
          value: $(params.ociArtifactExpiresAfter)
        - name: "ORAS_OPTIONS"
          value: "--insecure"
        - name: "HOME"
          value: "/tekton/home"
    - name: patch-source-data-artifact-result
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -eu

        # this is needed to skip trusted-artifacts tasks
        # when using PVC based workspaces.
        if [ "$(params.ociStorage)" == "empty" ]; then
          echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
        fi
