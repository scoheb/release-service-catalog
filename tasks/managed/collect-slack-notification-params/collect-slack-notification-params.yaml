---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: collect-slack-notification-params
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |-
    Tekton task that collects slack configuration options from Release CRs and the data file. A formatted message is
    emitted as a task result for downstream tasks to use.
  params:
    - name: releasePath
      type: string
      description:
        Path to the JSON string of the Release CR
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
    - name: dataPath
      type: string
      description: Path to the JSON string of the merged data containing the configuration options to use
    - name: hacUrl
      type: string
      description: Root URL of HAC UI (hybrid access console)
      default: "https://console.redhat.com/preview/application-pipeline/workspaces"
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: sourceDataArtifact
      description: The source data artifact from the previous task
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: ociArtifactExpiresAfter
      description: >-
        Expiration date for the trusted artifacts created in the OCI repository.
        An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - name: message
      type: string
      description: the formatted message to use in downstream tasks
    - name: slack-notification-secret
      type: string
      description: Name of secret which contains keyname=webhookURLs
    - name: slack-notification-secret-keyname
      type: string
      description: Name of key within secret which contains webhook URL
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: create-message
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 50m
      script: |
        #!/usr/bin/env bash
        set -x

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi
        SNAPSHOT_FILE="$(params.dataDir)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_FILE}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi
        RELEASE_FILE="$(params.dataDir)/$(params.releasePath)"
        if [ ! -f "${RELEASE_FILE}" ] ; then
            echo "No valid release file was provided."
            exit 1
        fi

        if [ "$(jq '.slack | has("slack-notification-secret")' "$DATA_FILE")" = false ] ; then
            echo "No secret name provided via 'slack.slack-notification-secret' key in Data."
            echo -n "" > "$(results.message.path)"
            echo -n "" > "$(results.slack-notification-secret.path)"
            echo -n "" > "$(results.slack-notification-secret-keyname.path)"
            exit
        fi
        slack_notification_secret=$(jq -r '.slack."slack-notification-secret"' "$DATA_FILE")
        echo -n "${slack_notification_secret}" > "$(results.slack-notification-secret.path)"

        if [ "$(jq '.slack | has("slack-webhook-notification-secret-keyname")' "$DATA_FILE")" = false ] ; then
            echo "No secret key name provided via 'slack.slack-webhook-notification-secret-keyname' key in Data."
            echo -n "" > "$(results.message.path)"
            echo -n "" > "$(results.slack-notification-secret-keyname.path)"
            exit
        fi
        slack_notification_secret_keyname=$(jq -r '.slack."slack-webhook-notification-secret-keyname"' "$DATA_FILE")
        echo -n "${slack_notification_secret_keyname}" > "$(results.slack-notification-secret-keyname.path)"

        origin_namespace=$(jq -r '.metadata.namespace' "$RELEASE_FILE")
        target_namespace=$(jq -r '.status.target' "$RELEASE_FILE")

        origin_workspace="${origin_namespace//-tenant/}"
        target_workspace="${target_namespace//-tenant/}"

        release_name=$(jq -r '.metadata.name' "$RELEASE_FILE")
        release_pipeline_name="$(jq -r '.status.managedProcessing.pipelineRun' "$RELEASE_FILE")"

        application=$(jq -rc .application "${SNAPSHOT_FILE}")

        release_url="$(params.hacUrl)/${origin_workspace}/applications/${application}/releases/${release_name}"
        release_plr_url="$(params.hacUrl)/${target_workspace}/applications/${application}/pipelineruns/${release_pipeline_name}"

        messageContent=$(cat <<END
        {
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "RHTAP Release Service\n",
                "emoji": true
              }
            },
            {
              "type": "divider"
            },
            {
              "type": "rich_text",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "text",
                      "text": "Release ",
                      "style": {
                        "bold": true
                      }
                    },
                    {
                      "type": "text",
                      "text": "${origin_workspace}/${application}/${release_name}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "divider"
            },
            {
              "type": "rich_text",
              "elements": [
                {
                  "type": "rich_text_section",
                  "elements": [
                    {
                      "type": "emoji",
                      "name": "@@CIRCLE_TYPE@@"
                    },
                    {
                      "type": "text",
                      "text": " "
                    },
                    {
                      "type": "text",
                      "text": " @@STATUS_TEXT@@ ",
                      "style": {
                        "bold": true
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "divider"
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "<${release_url}|Release Details>"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "<${release_plr_url}|Release PipelineRun Logs>"
              }
            },
            {
              "type": "divider"
            }
          ]
        }
        END
        )

        messageContent=$(jq -c '.' <<< "${messageContent}")
        echo "${messageContent}" > "$(results.message.path)"
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: "$(params.taskGitUrl)"
          - name: revision
            value: "$(params.taskGitRevision)"
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
