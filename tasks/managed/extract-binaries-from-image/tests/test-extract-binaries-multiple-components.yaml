---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-extract-binaries-multiple-components
spec:
  description: |
    Run the extract-binaries-from-image task with three components in the snapshot
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-snapshot
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp",
                    "containerImage": "registry.io/image:tag"
                  },
                  {
                    "name": "comp2",
                    "containerImage": "registry.io/image2:tag"
                  },
                  {
                    "name": "comp3",
                    "containerImage": "registry.io/image3:tag"
                  }
                ]
              }
              EOF

              mkdir -p "$(params.dataDir)/image_data"
              cd "$(params.dataDir)/image_data"

              cat > manifest.json <<EOF
              {
                "layers": [
                  {"digest": "sha256:1111"},
                  {"digest": "sha256:2222"}
                ]
              }
              EOF

              TAR_IN1=$(mktemp -d)
              TAR_IN2=$(mktemp -d)

              mkdir -p "$TAR_IN1"/my-binaries-path
              echo text1 > "$TAR_IN1"/my-binaries-path/file1.txt
              tar czf 1111 -C "$TAR_IN1" my-binaries-path

              mkdir -p "$TAR_IN2"/my-binaries-path
              echo text2 > "$TAR_IN2"/my-binaries-path/file2.txt
              tar czf 2222 -C "$TAR_IN2" my-binaries-path
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: extract-binaries-from-image
      params:
        - name: image_binaries_path
          value: my-binaries-path
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: binaries_path
          value: $(tasks.run-task.results.binaries_path)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      taskSpec:
        params:
          - name: binaries_path
            type: string
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
          - name: pipelineRunUid
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              ACTUAL_CALLS="$(wc -l < "$(params.dataDir)/mock_skopeo.txt")"
              EXPECTED_CALLS=3

              if [ "$ACTUAL_CALLS" != "$EXPECTED_CALLS" ]; then
                echo "Error: skopeo was expected to be called $EXPECTED_CALLS times. Actual calls: $ACTUAL_CALLS"
                cat "$(params.dataDir)/mock_skopeo.txt"
                exit 1
              fi

              if [ "$(params.binaries_path)" != "$(params.pipelineRunUid)/binaries" ]; then
                  echo "Error: Unexpected binaries_path result"
                  exit 1
              fi

              cd "$(params.dataDir)/$(params.binaries_path)"

              test -f file1.txt
              test -f file2.txt
      runAfter:
        - run-task
