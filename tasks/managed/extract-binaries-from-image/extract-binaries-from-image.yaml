---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: extract-binaries-from-image
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |-
    Tekton task that extracts binaries to be released on github.com from an image.
    
    The path to the directory inside the provided workspace where the binaries were
    saved is provided as a result.
    
    The binaries must be stored at the same `image_binaries_path` for each component
    passed.
  params:
    - name: image_binaries_path
      type: string
      description: Path inside the image where the binaries to extract are stored
      default: "releases"
    - name: snapshotPath
      type: string
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
      default: ""
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - name: binaries_path
      type: string
      description: The directory inside the workspace where the binaries are stored
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: extract-binaries-from-image
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
          cpu: 250m
      script: |
        #!/usr/bin/env bash
        set -ex

        SNAPSHOT_SPEC_FILE="$(params.dataDir)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "Error: No valid snapshot file was provided."
            exit 1
        fi

        BINARIES_DIR=binaries
        BINARIES_PATH=$(params.dataDir)/$(dirname "$(params.snapshotPath)")/$BINARIES_DIR
        mkdir -p "$BINARIES_PATH"

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        DESIRED_COMPONENTS_LIST=
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
        elif [ "$(jq '.mapping.components | any' "${DATA_FILE}")" = true ]; then
            # This  will fail if any '.mapping.components[].name' is missing.
            DESIRED_COMPONENTS_LIST="$(jq -r '.mapping.components[].name' "${DATA_FILE}")"
        fi

        NUM_COMPONENTS=$(jq '.components | length' "$SNAPSHOT_SPEC_FILE")
        for ((i=0; i < NUM_COMPONENTS; i++)); do
          COMPONENT=$(jq -c ".components[$i]" "$SNAPSHOT_SPEC_FILE")
          COMPONENT_NAME="$(jq -r '.name' <<< "$COMPONENT")"

          # If desired components list is not empty and COMPONENT_NAME is not in desired components list, skip
          if [ -n "$DESIRED_COMPONENTS_LIST" ] && ! echo "$DESIRED_COMPONENTS_LIST" | grep -qw "$COMPONENT_NAME"; then
            continue
          fi

          IMAGE_URL="$(jq -r '.containerImage // ""' <<< "$COMPONENT")"
          if [ -z "${IMAGE_URL}" ] ; then
              echo "Error: Unable to get image url from snapshot."
              exit 1
          fi

          TMP_DIR=$(mktemp -d)
          skopeo copy --retry-times 3 docker://"$IMAGE_URL" dir:"$TMP_DIR"

          cd "$TMP_DIR"

          for DIGEST in $(jq -r ".layers[].digest" manifest.json)
          do
              FILE=${DIGEST#sha256:}
              # Check if the archive contains the $IMAGE_PATH dir
              if tar -tf "$FILE" | grep -q "^$IMAGE_PATH/"; then
                echo "Extracting $IMAGE_PATH/ from $FILE..."
                tar -xzvf "$FILE" "$IMAGE_PATH"
              else
                echo "skipping $FILE. It doesn't contain the $IMAGE_PATH dir"
              fi
          done

          cp "$IMAGE_PATH"/* "$BINARIES_PATH"/
        done

        echo -n "$(dirname "$(params.snapshotPath)")/$BINARIES_DIR" | tee "$(results.binaries_path.path)"
      env:
        - name: "IMAGE_PATH"
          value: "$(params.image_binaries_path)"
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
