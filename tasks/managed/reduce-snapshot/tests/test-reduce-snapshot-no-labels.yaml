---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-reduce-snapshot-no-labels
spec:
  description: |
    Run the reduce snapshot task with missing labels
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      taskSpec:
        params:
          - name: subdirectory
            type: string
        results:
          - name: sourceDataArtifact
            type: string
        steps:
          - name: create-crs
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              cat > snapshot << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: Snapshot
              metadata:
                name: snapshot-sample
                namespace: default
              spec:
                application: foo
                components:
                  - name: scott
                    containerImage: newimage
                  - name: tom
                    containerImage: newimage2
              EOF
              kubectl apply -f snapshot

              mkdir -p "$(workspaces.data.path)/$(params.subdirectory)"
              kubectl get snapshot/snapshot-sample -ojson | jq .spec | \
                tee "$(workspaces.data.path)/$(params.subdirectory)/snapshot.json"
              chmod 666 "$(workspaces.data.path)/$(params.subdirectory)/snapshot.json"
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
      
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(workspaces.data.path)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(workspaces.data.path)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
            env:
              - name: IMAGE_EXPIRES_AFTER
                value: 1d
              - name: "ORAS_OPTIONS"
                value: "--insecure"
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
      
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: run-task
      taskRef:
        name: reduce-snapshot
      params:
        - name: SNAPSHOT
          value: $(workspaces.data.path)/$(context.pipelineRun.uid)/snapshot.json
        - name: SINGLE_COMPONENT
          value: true
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE
          value: snapshot/snapshot-sample
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE_NS
          value: default
        - name: SNAPSHOT_PATH
          value: $(workspaces.data.path)/$(context.pipelineRun.uid)/snapshot.json
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(workspaces.data.path)/$(context.pipelineRun.uid)"
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(workspaces.data.path)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
      runAfter:
        - run-task
      taskSpec:
        workspaces:
          - name: data
        params:
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
        steps:
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(workspaces.data.path)/$(params.subdirectory)
            env:
              - name: "ORAS_OPTIONS"
                value: "--insecure"
            computeResources: {}
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              cat "$(workspaces.data.path)/$(params.subdirectory)/snapshot.json"
              if [ "$(jq '.components | length' < "$(workspaces.data.path)/$(params.subdirectory)/snapshot.json")" \
                -ne 2 ]; then
                echo "ERROR: Resulting snapshot does not contain 2 components"
                exit 1
              fi
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete snapshot snapshot-sample
