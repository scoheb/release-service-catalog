---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-reduce-snapshot-disabled-single-component-mode
spec:
  description: |
    Run the reduce snapshot task with single component mode being false
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: create-crs
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              cat > snapshot << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: Snapshot
              metadata:
                name: snapshot-sample
                namespace: default
                labels:
                  test.appstudio.openshift.io/type: component
                  appstudio.openshift.io/component: tom
              spec:
                application: foo
                components:
                  - name: scott
                    containerImage: newimage
                  - name: tom
                    containerImage: newimage2
              EOF
              kubectl apply -f snapshot

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              kubectl get snapshot/snapshot-sample -ojson | jq .spec | tee \
                "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot.json"
              chmod 666 "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot.json"
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
          - name: patch-source-data-artifact-result
            ref:
              name: patch-source-data-artifact-result
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: run-task
      taskRef:
        name: reduce-snapshot
      params:
        - name: SNAPSHOT
          value: $(params.dataDir)/$(context.pipelineRun.uid)/snapshot.json
        - name: SINGLE_COMPONENT
          value: false
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE
          value: snapshot/snapshot-sample
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE_NS
          value: default
        - name: SNAPSHOT_PATH
          value: $(params.dataDir)/$(context.pipelineRun.uid)/snapshot.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: dataDir
          value: $(params.dataDir)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
      runAfter:
        - run-task
      taskSpec:
        workspaces:
          - name: data
        params:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              cat "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot.json"
              if [ "$(jq '.components | length' < "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot.json")" \
                -ne 2 ]; then
                echo "ERROR: Resulting snapshot does not contain 2 components"
                exit 1
              fi
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete snapshot snapshot-sample
