---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-publish-pyxis-repository
spec:
  description: |
    Run the publish-pyxis-repository task with multiple components and verify catalog URLs.
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        params:
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)/results"

              cat > "$(params.dataDir)/$(params.subdirectory)/snapshot_spec.json" << EOF
              {
                "application": "my-app",
                "components": [
                  {
                    "repository": "quay.io/redhat-prod/my-product----my-image1",
                    "name": "component1"
                  },
                  {
                    "repository": "quay.io/redhat-prod/my-product----my-image2",
                    "name": "component2"
                  },
                  {
                    "repository": "quay.io/redhat-prod/my-product----my-image3",
                    "name": "component3"
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(params.subdirectory)/mydata.json" << EOF
              {
                "mapping": {
                }
              }
              EOF
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(params.dataDir)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
            env:
              - name: IMAGE_EXPIRES_AFTER
                value: 1d
              - name: "ORAS_OPTIONS"
                value: "--insecure"
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
    - name: run-task
      taskRef:
        name: publish-pyxis-repository
      params:
        - name: pyxisSecret
          value: test-publish-pyxis-repository-cert
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot_spec.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/mydata.json
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      params:
        - name: signRegistryAccessPath
          value: $(tasks.run-task.results.signRegistryAccessPath)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        params:
          - name: signRegistryAccessPath
            type: string
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                mkdir -p "$(params.dataDir)/$(params.subdirectory)"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(params.dataDir)/$(params.subdirectory)
            env:
              - name: "ORAS_OPTIONS"
                value: "--insecure"
            computeResources: {}
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              RESULTS_FILE="$(params.dataDir)/$(params.subdirectory)/results/publish-pyxis-repository-results.json"

              if [ ! -f "$RESULTS_FILE" ]; then
                  echo "Error: Results file not found."
                  exit 1
              fi

              EXPECTED_RESULTS='{
                "catalog_urls": [
                  {
                    "name": "component1",
                    "url": "https://catalog.redhat.com/software/containers/my-product/my-image1/1"
                  },
                  {
                    "name": "component2",
                    "url": "https://catalog.redhat.com/software/containers/my-product/my-image2/3"
                  },
                  {
                    "name": "component3",
                    "url": "https://catalog.redhat.com/software/containers/my-product/my-image3/5"
                  }
                ]
              }'

              # Use jq to compare JSON objects
              if ! echo "$EXPECTED_RESULTS" | jq --argfile actual "$RESULTS_FILE" -e '. == $actual' > /dev/null; then
                  echo "Error: Results do not match expected output."
                  echo "Expected: $EXPECTED_RESULTS"
                  echo "Actual: $(cat "$RESULTS_FILE")"
                  exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt")" != 6 ]; then
                  echo Error: curl was expected to be called 6 times. Actual calls:
                  cat "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt"
                  exit 1
              fi

              [[ "$(head -n 1 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt")" \
                  == *"/my-product/my-image1 "* ]]
              [[ "$(head -n 2 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt" | tail -n 1)" \
                  == *"/id/1 "* ]]
              [[ "$(head -n 3 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt" | tail -n 1)" \
                  == *"/my-product/my-image2 "* ]]
              [[ "$(head -n 4 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt" | tail -n 1)" \
                  == *"/id/3 "* ]]
              [[ "$(head -n 5 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt" | tail -n 1)" \
                  == *"/my-product/my-image3 "* ]]
              [[ "$(tail -n 1 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt")" \
                  == *"/id/5 "* ]]

              SIGN_ACCESS_FILE="$(params.dataDir)/$(params.signRegistryAccessPath)"
              if [ "$(wc -l < "$SIGN_ACCESS_FILE")" != 0 ]; then
                echo "Error: The signRegistryAccessPath file was expected to be empty. Instead, it contains:"
                cat "$SIGN_ACCESS_FILE"
              fi
      runAfter:
        - run-task
