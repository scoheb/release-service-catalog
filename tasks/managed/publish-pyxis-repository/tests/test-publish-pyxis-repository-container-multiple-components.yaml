---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-publish-pyxis-repository-source-multiple-components
spec:
  description: |
    Run the publish-pyxis-repository task with multiple components and pushSourceContainer
    set in the snapshot. A curl call should be executed to set the source_container_image_enabled
    to the proper values for the components.
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        params:
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
            - name: "HOME"
              value: "/tekton/home"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)/results"

              cat > "$(params.dataDir)/$(params.subdirectory)/snapshot_spec.json" << EOF
              {
                "application": "my-app",
                "components": [
                  {
                    "repository": "quay.io/redhat-prod/my-product----my-image1",
                    "pushSourceContainer": "true"
                  },
                  {
                    "repository": "quay.io/redhat-prod/my-product----my-image2",
                    "pushSourceContainer": "false"
                  }, 
                  {
                    "repository": "quay.io/redhat-prod/my-product----my-image3"
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(params.subdirectory)/mydata.json" << EOF
              {
                "mapping": {
                  "defaults": {
                    "pushSourceContainer": "true"
                  }
                }
              }
              EOF
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: subdirectory
                value: $(params.subdirectory)
              - name: dataDir
                value: $(params.dataDir)
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: dataDir
                value: $(params.dataDir)
              - name: subdirectory
                value: $(params.subdirectory)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
          - name: patch-source-data-artifact-result
            ref:
              name: patch-source-data-artifact-result
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: publish-pyxis-repository
      params:
        - name: pyxisSecret
          value: test-publish-pyxis-repository-cert
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot_spec.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/mydata.json
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
            - name: "HOME"
              value: "/tekton/home"
        steps:
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: subdirectory
                value: $(params.subdirectory)
              - name: dataDir
                value: $(params.dataDir)
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: dataDir
                value: $(params.dataDir)
              - name: subdirectory
                value: $(params.subdirectory)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt")" != 6 ]; then
                  echo Error: curl was expected to be called 6 times. Actual calls:
                  cat "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt"
                  exit 1
              fi

              [[ "$(head -n 1 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt")" \
                  == *"/my-product/my-image1 "* ]]
              [[ "$(head -n 2 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt" | tail -n 1)" \
                  == *'"source_container_image_enabled":true}' ]]

              [[ "$(head -n 3 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt" | tail -n 1)" \
                  == *"/my-product/my-image2 "* ]]
              [[ "$(head -n 4 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt" | tail -n 1)" \
                  != *'"source_container_image_enabled":true}' ]]

              [[ "$(head -n 5 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt" | tail -n 1)" \
                  == *"/my-product/my-image3 "* ]]
              [[ "$(tail -n 1 "$(params.dataDir)/$(params.subdirectory)/mock_curl.txt")" \
                  == *'"source_container_image_enabled":true}' ]]
      runAfter:
        - run-task
