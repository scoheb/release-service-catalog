---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: publish-pyxis-repository
  labels:
    app.kubernetes.io/version: "4.0.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >
    Tekton task to mark all repositories in the mapped snapshot as published in Pyxis.
    This is currently only intended for the rh-push-to-registry-redhat-io pipeline,
    so it will convert the values to the ones used for registry.redhat.io releases.
    E.g. repository "quay.io/redhat-prod/my-product----my-image" will be converted
    to use registry "registry.access.redhat.com" and repository "my-product/my-image"
    to identify the right Container Registry object in Pyxis. The task also optionally
    marks the repositories as source_container_image_enabled true if pushSourceContainer
    is true in the data JSON.
    Additionally, this task respects the `publish-on-push` flag. If `false`, then the task
    does not publish the repository.
  params:
    - name: server
      type: string
      description: The server type to use. Options are 'production','production-internal,'stage-internal' and 'stage'.
      default: production
    - name: pyxisSecret
      type: string
      description: |
        The kubernetes secret to use to authenticate to Pyxis. It needs to contain two keys: key and cert
    - name: snapshotPath
      description: Path to the JSON file containing the mapped Snapshot spec in the data workspace
      type: string
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: resultsDirPath
      description: Path to the results directory in the data workspace
      type: string
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: subdirectory
      description: Subdirectory inside the workspace to be used
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
    - name: stepActionGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog stepActions to be used are stored
      default: https://github.com/konflux-ci/release-service-catalog.git
    - name: stepActionGitRevision
      type: string
      description: The revision in the stepActionGitUrl repo to be used
      default: production
  workspaces:
    - name: data
      description: The workspace where the snapshot spec json file resides
  results:
    - name: signRegistryAccessPath
      type: string
      description: |
        The relative path in the workspace to a text file that contains a list of repositories
        that needs registry.access.redhat.com image references to be signed (i.e.
        requires_terms=true), one repository string per line, e.g. "rhtas/cosign-rhel9".
    - description: Produced trusted data artifact
      name: sourceDataArtifact
      type: string
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
      - name: "HOME"
        value: "/tekton/home"
  steps:
    - name: skip-trusted-artifact-operations
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.stepActionGitUrl)
          - name: revision
            value: $(params.stepActionGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: subdirectory
          value: $(params.subdirectory)
        - name: dataDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.stepActionGitUrl)
          - name: revision
            value: $(params.stepActionGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: dataDir
          value: $(params.dataDir)
        - name: subdirectory
          value: $(params.subdirectory)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: publish-pyxis-repository
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      env:
        - name: PYXIS_CERT
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: cert
        - name: PYXIS_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.pyxisSecret)
              key: key
      script: |
        #!/usr/bin/env bash
        set -eux

        PYXIS_REGISTRY=registry.access.redhat.com

        if [[ "$(params.server)" == "production" ]]
        then
          PYXIS_URL="https://pyxis.api.redhat.com"
        elif [[ "$(params.server)" == "stage" ]]
        then
          PYXIS_URL="https://pyxis.preprod.api.redhat.com"
        elif [[ "$(params.server)" == "production-internal" ]]
        then
          PYXIS_URL="https://pyxis.engineering.redhat.com"
        elif [[ "$(params.server)" == "stage-internal" ]]
        then
          PYXIS_URL="https://pyxis.stage.engineering.redhat.com"
        else
          echo "Invalid server parameter. Only 'production','production-internal,'stage-internal' and 'stage' allowed."
          exit 1
        fi

        # Disable trace logging to avoid leaking of cert+key
        set +x
        echo "${PYXIS_CERT}" > /tmp/crt
        echo "${PYXIS_KEY}" > /tmp/key
        set -x

        SNAPSHOT_SPEC_FILE="$(params.dataDir)/$(params.snapshotPath)"
        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        RESULTS_FILE="$(params.dataDir)/$(params.resultsDirPath)/publish-pyxis-repository-results.json"
        SIGN_REGISTRY_ACCESS_PATH="$(dirname "$(params.dataPath)")/sign-registry-access.txt"
        echo -n "$SIGN_REGISTRY_ACCESS_PATH" > "$(results.signRegistryAccessPath.path)"
        SIGN_REGISTRY_ACCESS_PATH="$(params.dataDir)/${SIGN_REGISTRY_ACCESS_PATH}"
        touch "$SIGN_REGISTRY_ACCESS_PATH"

        # Use a unique key to avoid conflicts with other tasks
        RESULTS_JSON='{"catalog_urls":[]}'

        # Default to false
        skipRepoPublishing="$(jq -r ".pyxis.skipRepoPublishing // false" "${DATA_FILE}")"

        defaultPushSourceContainer=$(jq -r '.mapping.defaults.pushSourceContainer' "${DATA_FILE}" || echo false)

        application=$(jq -r '.application' "${SNAPSHOT_SPEC_FILE}")
        printf 'Beginning "%s" for "%s"\n\n' "$(context.task.name)" "$application"

        NUM_COMPONENTS=$(jq '.components | length' "${SNAPSHOT_SPEC_FILE}")
        for ((i = 0; i < NUM_COMPONENTS; i++))
        do
            COMPONENT=$(jq -c --argjson i "$i" '.components[$i]' "${SNAPSHOT_SPEC_FILE}")
            PAYLOAD='{"published":true}'
            COMPONENT_NAME=$(jq -r '.name' <<< "$COMPONENT")
            REPOSITORY=$(jq -r '.repository' <<< "$COMPONENT")
            PYXIS_REPOSITORY=${REPOSITORY##*/}
            # Replace "----" with "/"
            PYXIS_REPOSITORY=${PYXIS_REPOSITORY//----//}
            PYXIS_REPOSITORY_JSON=$(curl --retry 5 --key /tmp/key --cert /tmp/crt \
                "${PYXIS_URL}/v1/repositories/registry/${PYXIS_REGISTRY}/repository/${PYXIS_REPOSITORY}" -X GET)

            PYXIS_REPOSITORY_ID=$(jq -r '._id // ""' <<< "$PYXIS_REPOSITORY_JSON")
            if [ -z "$PYXIS_REPOSITORY_ID" ]; then
                echo Error: Unable to get Container Repository object id from Pyxis
                echo "Pyxis response for ${PYXIS_REGISTRY}/${PYXIS_REPOSITORY}:"
                echo "$PYXIS_REPOSITORY_JSON"
                exit 1
            fi

            PYXIS_REPOSITORY_REQUIRES_TERMS=$(jq '.requires_terms' <<< "$PYXIS_REPOSITORY_JSON")
            if [ "$PYXIS_REPOSITORY_REQUIRES_TERMS" = false ]; then
              echo "$PYXIS_REPOSITORY" >> "$SIGN_REGISTRY_ACCESS_PATH"
            fi

            # Default to false
            if [ "$skipRepoPublishing" = true ] ; then
                echo "skipRepoPublishing is set to true, skipping publishing..."
                continue
            fi

            # Set source_container_image_enabled based on pushSourceContainer value in components or use default if
            # it is not set in the component
            if [[ $(jq -r '.pushSourceContainer' <<< "$COMPONENT") == "true" ]] ||
              [[ $(jq 'has("pushSourceContainer")' <<< "$COMPONENT") == "false" && \
              ${defaultPushSourceContainer} == "true" ]] ; then
                PAYLOAD=$(jq -c '. += {"source_container_image_enabled":true}' <<< "$PAYLOAD")
            fi

            # verify that publish_on_push is set to true.
            # otherwise, do not publish the image.
            PYXIS_REPOSITORY_PUBLISH_ON_PUSH=$(jq -r '.publish_on_push // "false"' <<< "$PYXIS_REPOSITORY_JSON")
            if [ "${PYXIS_REPOSITORY_PUBLISH_ON_PUSH}" != "true" ] ; then
              echo "WARNING: repository ${PYXIS_REGISTRY}/${PYXIS_REPOSITORY} is marked as publish_on_push = false"
              echo "Skipping the setting of the published flag."
              continue
            fi

            curl --retry 5 --key /tmp/key --cert /tmp/crt "${PYXIS_URL}/v1/repositories/id/${PYXIS_REPOSITORY_ID}" \
                -X PATCH -H 'Content-Type: application/json' --data-binary "${PAYLOAD}"

            # Determine the correct CATALOG_BASE_URL based on the repository prefix
            if [[ "$REPOSITORY" == quay.io/redhat-prod/* ]]
            then
              CATALOG_BASE_URL="https://catalog.redhat.com/software/containers"
            elif [[ "$REPOSITORY" == quay.io/redhat-pending/* ]]
            then
              CATALOG_BASE_URL="https://catalog.stage.redhat.com/software/containers"
            else
              echo "Unknown repository prefix. Exiting..."
              exit 1
            fi

            URL="${CATALOG_BASE_URL}/${PYXIS_REPOSITORY}/${PYXIS_REPOSITORY_ID}"
            RESULTS_JSON=$(jq --arg name "$COMPONENT_NAME" --arg url "$URL" \
              '.catalog_urls += [{"name": $name, "url": $url}]' <<< "$RESULTS_JSON")
        done

        jq <<< "${RESULTS_JSON}" | tee "$RESULTS_FILE"

        printf 'Completed "%s" for "%s"\n\n' "$(context.task.name)" "$application"
    - name: create-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.stepActionGitUrl)
          - name: revision
            value: $(params.stepActionGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: dataDir
          value: $(params.dataDir)
        - name: subdirectory
          value: $(params.subdirectory)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
    - name: patch-source-data-artifact-result
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.stepActionGitUrl)
          - name: revision
            value: $(params.stepActionGitRevision)
          - name: pathInRepo
            value: stepactions/patch-source-data-artifact-result/patch-source-data-artifact-result.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
