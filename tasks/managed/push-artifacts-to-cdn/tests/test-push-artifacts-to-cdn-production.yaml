---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-push-artifacts-to-cdn-production
spec:
  description: |
    Run the push-artifacts task with the production env and ensure the task succeeds
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:066a63d25546239e79533b99c83ff521a045c819
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              mkdir "$(params.dataDir)/$(context.pipelineRun.uid)/results"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot_spec.json" << EOF
              {
                "application": "artifacts",
                "components": [
                  {
                    "name": "nvidia-disk-image",
                    "containerImage": "quay.io/workload/tenant/disk-image/nvidia@sha256:123456",
                    "repository": "repo1"
                  },
                  {
                    "name": "amd-disk-image",
                    "containerImage": "quay.io/workload/tenant/disk-image/amd@sha256:abcdefg",
                    "repository": "repo2"
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "contentGateway": {
                  "productName": "Konflux test product",
                  "productCode": "KTestProduct",
                  "productVersionName": "KTestProduct 1",
                  "components": [
                    {
                      "name": "test-component",
                      "description": "Red Hat OpenShift Local Sandbox Test",
                      "label": "Checksum File Sandbox Test"
                    }
                  ]
                },
                "cdn": {
                  "env": "production"
                },
                "sign": {
                  "configMapName": "test-config-map"
                }
              }
              EOF
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/release_plan_admission.json" << EOF
              {
                "spec": {
                  "pipeline": {
                    "pipelineRef": {
                      "resolver": "git",
                      "params": [
                        {
                          "name": "url",
                          "value": "https://localhost.git"
                        },
                        {
                          "name": "revision",
                          "value": "main"
                        },
                        {
                          "name": "pathInRepo",
                          "value": "pipelines/abc/abc.yaml"
                        }
                      ]
                    },
                    "serviceAccountName": "release-service-account"
                  }
                }
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/release.json" << EOF
              {
                "status": {
                  "attribution": {
                    "author": "JohnDoe"
                  }
                }
              }
              EOF
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
          - name: patch-source-data-artifact-result
            ref:
              name: patch-source-data-artifact-result
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: push-artifacts-to-cdn
      params:
        - name: releasePath
          value: $(context.pipelineRun.uid)/release.json
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot_spec.json"
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: releasePlanAdmissionPath
          value: $(context.pipelineRun.uid)/release_plan_admission.json
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      runAfter:
        - run-task
      taskSpec:
        workspaces:
          - name: data
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:066a63d25546239e79533b99c83ff521a045c819
            script: |
              #!/usr/bin/env bash
              set -ex

              internalRequest=$(kubectl get InternalRequest -o json | jq -r '.items[0]')

              # Check the internal request pipelineRef
              pipeline="$(jq -r '.spec.pipeline.pipelineRef.params[]|select(.name=="pathInRepo") |.value' \
                <<< "${internalRequest}")"
              if [[ ! "$pipeline" =~ push-artifacts-to-cdn ]]; then
                echo "InternalRequest doesn't contain 'push-artifacts-to-cdn' in 'request' field"
                exit 1
              fi

              # Check the serviceAccount field
              if [ "$(jq -r '.spec.serviceAccount' <<< "$internalRequest")" != "release-service-account" ]; then
                echo "InternalRequest doesn't contain the proper serviceAccount"
                exit 1
              fi

              # Check the snapshot parameter
              if [ "$(jq -r '.spec.params.snapshot_json' <<< "$internalRequest")" != \
              '{"application":"artifacts","components":[{"name":"nvidia-disk-image","containerImage":'`
              `'"quay.io/workload/tenant/disk-image/nvidia@sha256:123456","repository":"repo1"},{"name":'`
              `'"amd-disk-image","containerImage":"quay.io/workload/tenant/disk-image/amd@sha256:abcdefg"'`
              `',"repository":"repo2"}]}' ]; then
                echo "InternalRequest has the wrong snapshot_json parameter"
                exit 1
              fi

              # Check the exodusGwSecret parameter
              if [ "$(jq -r '.spec.params.exodusGwSecret' <<< "$internalRequest")" != "exodus-prod-secret" ]; then
                echo "InternalRequest has the wrong exodusGwSecret parameter"
                exit 1
              fi

              # Check the exodusGwEnv parameter
              if [ "$(jq -r '.spec.params.exodusGwEnv' <<< "$internalRequest")" != "live" ]; then
                echo "InternalRequest has the wrong exodusGwEnv parameter"
                exit 1
              fi

              # Check the pulpSecret parameter
              if [ "$(jq -r '.spec.params.pulpSecret' <<< "$internalRequest")" != "rhsm-pulp-prod-secret" ]; then
                echo "InternalRequest has the wrong pulpSecret parameter"
                exit 1
              fi

              # Check the udcacheSecret parameter
              if [ "$(jq -r '.spec.params.udcacheSecret' <<< "$internalRequest")" != "udcache-prod-secret" ]; then
                echo "InternalRequest has the wrong udcacheSecret parameter"
                exit 1
              fi

              # Check the author parameter
              if [ "$(jq -r '.spec.params.author' <<< "$internalRequest")" != "JohnDoe" ]; then
                echo "InternalRequest has the wrong author parameter"
                exit 1
              fi
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:066a63d25546239e79533b99c83ff521a045c819
            script: |
              #!/usr/bin/env sh
              set -eux

              kubectl delete internalrequests --all
