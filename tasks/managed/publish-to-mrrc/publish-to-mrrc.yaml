---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: publish-to-mrrc
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  params:
    - name: mrrcParamFilePath
      description: path of the env file for mrrc parameters to use
      type: string
    - name: charonConfigFilePath
      description: path of the charon config file for charon to consume
      type: string
    - name: charonAWSSecret
      description: the secret name for charon aws credential file
      type: string
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  workspaces:
    - name: data
      description: The workspace where the extra config file containing the mapping and snapshot json reside
  results:
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: "charon-aws-vol"
      secret:
        secretName: "$(params.charonAWSSecret)"
    - name: mrrc-workdir
      emptyDir: {}
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
    # This is a workaround for a problem observed on Konflux clusters where the
    # a step runs with root user causing a file or folder to not be readable
    # in later steps. There might be solution coming related to the
    # security context constraints on the cluster, but setting this explicitly here
    # should probably be harmless either way.
    securityContext:
      runAsUser: 1001
  steps:
    - name: skip-trusted-artifact-operations
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: prepare-repo
      image: quay.io/konflux-ci/release-service-utils:28fca729e118024bd0f1bd8db4f2651a130ef152
      computeResources:
        limits:
          memory: 256Mi
        requests:
          memory: 256Mi
          cpu: 150m
      script: |
        #!/usr/bin/env bash
        set -eux

        MRRC_FILE="$(params.dataDir)/$(params.mrrcParamFilePath)"
        # shellcheck source=/dev/null
        . "$MRRC_FILE"
        mkdir -p /workdir/mrrc
        cd /workdir/mrrc

        IFS='%' read -ra ADDR <<< "$MRRC_ZIP_REGISTRY"
        for r in "${ADDR[@]}"
        do
          echo "Downloading the maven repo zip $r"
          SOURCE_REPO=${r%%@sha256:*}
          AUTH_FILE=$(mktemp)
          select-oci-auth "${SOURCE_REPO}" > "$AUTH_FILE"
          oras pull --registry-config "$AUTH_FILE" "$r" -o /workdir/mrrc
        done
      volumeMounts:
        - name: mrrc-workdir
          mountPath: "/workdir"
    - name: upload-maven-repo
      image: quay.io/konflux-ci/charon@sha256:95b22f4f0fc1d6bb984a2f63334c3f66a539e433d79cde4eafa7731d8924377f
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
          cpu: 250m
      script: |
        #!/usr/bin/env bash
        set -eux

        CHARON_CFG_FILE="$(params.dataDir)/$(params.charonConfigFilePath)"
        mkdir -p "/home/charon/.charon"
        cp "$CHARON_CFG_FILE" /home/charon/.charon/charon.yaml

        MRRC_FILE="$(params.dataDir)/$(params.mrrcParamFilePath)"
        # shellcheck source=/dev/null
        . "$MRRC_FILE"

        target=$MRRC_TARGET
        productName=$MRRC_PRODUCT_NAME
        productVersion=$MRRC_PRODUCT_VERSION

        work_dir="/workdir/mrrc"
        # Disable shell check sc2012 as find command is not installed
        # shellcheck disable=SC2012
        for r in $(ls "$work_dir"/*.zip | cat)
        do
          echo "Release $r with $productName-$productVersion into $target"
          charon upload -p "$productName" -v "$productVersion" -t "$target" "$r"
        done
      volumeMounts:
        - name: "charon-aws-vol"
          mountPath: "/home/charon/.aws"
        - name: mrrc-workdir
          mountPath: "/workdir"
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
    - name: patch-source-data-artifact-result
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/patch-source-data-artifact-result/patch-source-data-artifact-result.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
