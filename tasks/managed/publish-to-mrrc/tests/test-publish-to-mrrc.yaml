---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-publish-to-mrrc
spec:
  description: |
    Run the publish-to-mrrc task with required parameters - a happy path scenario.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
          # This is a workaround for a problem observed on Konflux clusters where the
          # a step runs with root user causing a file or folder to not be readable
          # in later steps. There might be solution coming related to the
          # security context constraints on the cluster, but setting this explicitly here
          # should probably be harmless either way.
          securityContext:
            runAsUser: 1001
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:28fca729e118024bd0f1bd8db4f2651a130ef152
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)"/mrrc.env << EOF
              export MRRC_ZIP_REGISTRY=quay.io/testorg/test-prod.zip@sha256:0b15aad24f1b847
              export MRRC_TARGET=dev-maven-ga
              export MRRC_PRODUCT_NAME=test-prod
              export MRRC_PRODUCT_VERSION=0.0.1
              export MRRC_SIGN_KEY=testkey
              export MRRC_AUTHOR=testuser
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)"/charon-config.yaml << EOF
              charon-config
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: publish-to-mrrc
      params:
        - name: mrrcParamFilePath
          value: $(context.pipelineRun.uid)/mrrc.env
        - name: charonConfigFilePath
          value: $(context.pipelineRun.uid)/charon-config.yaml
        - name: charonAWSSecret
          value: test-charon-aws-credentials
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
        - name: charonSignCASecret
          value: test-ca
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
          # This is a workaround for a problem observed on Konflux clusters where the
          # a step runs with root user causing a file or folder to not be readable
          # in later steps. There might be solution coming related to the
          # security context constraints on the cluster, but setting this explicitly here
          # should probably be harmless either way.
          securityContext:
            runAsUser: 1001
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:4fc4e746955ed7b6d43f7a0e327b7f573980fd6d
            script: |
              #!/usr/bin/env sh
              set -eux

              if [ "$(< "$(params.dataDir)"/mock_oras.txt wc -l)" != 1 ]; then
                echo Error: oras was expected to be called 1 times. Actual calls:
                cat "$(params.dataDir)"/mock_oras.txt
                exit 1
              fi

              if [ "$(< "$(params.dataDir)"/mock_charon.txt wc -l)" != 2 ]; then
                echo Error: charon was expected to be called 2 times. Actual calls:
                cat "$(params.dataDir)"/mock_charon.txt
                exit 1
              fi
      runAfter:
        - run-task
