---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-product-sbom
  labels:
    app.kubernetes.io/version: "0.2.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Create product-level SBOM from release notes.
  params:
    - name: dataJsonPath
      description: Relative path to the JSON data file in the workspace.
      type: string
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: subdirectory
      description: Subdirectory inside the workspace to be used
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  workspaces:
    - name: data
      description: Workspace to save the product-level SBOM to.
  results:
    - name: productSBOMPath
      description: >-
        Relative path to the directory containing the created product-level SBOM
        in the data workspace.
    - description: Produced trusted data artifact
      name: sourceDataArtifact
      type: string
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
      - name: "HOME"
        value: "/tekton/home"
  steps:
    - name: skip-trusted-artifact-operations
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -eo pipefail

        if [ "$(params.ociStorage)" == "empty" ]; then
          echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
          mkdir -p "$(params.dataDir)/$(params.subdirectory)"
          touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
        fi
    - name: use-trusted-artifact
      args:
        - use
        - $(params.sourceDataArtifact)=$(params.dataDir)/$(params.subdirectory)
      computeResources: {}
      image: quay.io/redhat-appstudio/build-trusted-artifacts:e02102ede09aa07187cba066ad547a54724e5cf4
    - name: create-sbom
      image: quay.io/konflux-ci/release-service-utils:221d71a4f6b1a50b36b685aa20d86d7df9de33fc
      script: |
        #!/usr/bin/env bash
        set -eux

        # the SBOM is first created in a temporary file, because the name of the
        # final SBOM depends on its contents; namely the product name and
        # version
        tmp_sbom="$(mktemp)"
        create_product_sbom --data-path "$(params.dataDir)/$(params.dataJsonPath)" \
          --output-path "$tmp_sbom"

        product_name="$(jq -r '.packages[0].name' "$tmp_sbom")"
        product_version="$(jq -r '.packages[0].versionInfo' "$tmp_sbom")"

        # replace whitespace with dashes
        normalized_name="$(echo -n "${product_name}" | tr '[:space:]' '-')"

        sbom_dir="product-sboms"
        # the combination of name + version is later used as an ID in Atlas
        sbom_path="${sbom_dir}/${normalized_name}-${product_version}.json"

        # takes into account the subdirectory of the data.json if any
        subdir_sbom_path="$(dirname "$(params.dataJsonPath)")/${sbom_path}"

        output_path=$(params.dataDir)/${subdir_sbom_path}
        mkdir -p "$(dirname "$output_path")"
        mv "$tmp_sbom" "$output_path"

        echo -n "$(dirname "$subdir_sbom_path")" > "$(results.productSBOMPath.path)"
    - name: create-trusted-artifact
      args:
        - create
        - --store
        - $(params.ociStorage)
        - $(results.sourceDataArtifact.path)=$(params.dataDir)/$(params.subdirectory)
      computeResources: {}
      image: quay.io/redhat-appstudio/build-trusted-artifacts:e02102ede09aa07187cba066ad547a54724e5cf4
    - name: patch-source-data-artifact-result
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -eu

        # this is needed to skip trusted-artifacts tasks
        # when using PVC based workspaces.
        if [ "$(params.ociStorage)" == "empty" ]; then
          echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
        fi
