---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-create-product-sbom-multiple-purls
spec:
  description: |
    Create a product-level SBOM where components can contain multiple purls.
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        params:
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        steps:
          - name: setup
            image: quay.io/konflux-ci/release-service-utils:221d71a4f6b1a50b36b685aa20d86d7df9de33fc
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(workspaces.data.path)/$(params.subdirectory)"
              cat > "$(workspaces.data.path)/$(params.subdirectory)"/data.json << EOF
              {
                "releaseNotes": {
                  "product_name": "Red Hat Openstack Product",
                  "product_version": "123",
                  "cpe": "cpe:/a:example:openstack:el8",
                  "content": {
                    "images": [
                      {
                        "component": "test-component-1",
                        "purl": "test-component-1-purl-1"
                      },
                      {
                        "component": "test-component-1",
                        "purl": "test-component-1-purl-2"
                      },
                      {
                        "component": "test-component-2",
                        "purl": "test-component-2-purl-1"
                      }
                    ]
                  }
                }
              }
              EOF
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(workspaces.data.path)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(workspaces.data.path)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
            env:
              - name: IMAGE_EXPIRES_AFTER
                value: 1d
              - name: "ORAS_OPTIONS"
                value: "--insecure"
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
    - name: run-task
      taskRef:
        name: create-product-sbom
      params:
        - name: dataJsonPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(workspaces.data.path)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sbomDir
          value: $(tasks.run-task.results.productSBOMPath)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(workspaces.data.path)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
      taskSpec:
        params:
          - name: sbomDir
            type: string
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        steps:
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(workspaces.data.path)/$(params.subdirectory)
            env:
              - name: "ORAS_OPTIONS"
                value: "--insecure"
            computeResources: {}
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:221d71a4f6b1a50b36b685aa20d86d7df9de33fc
            script: |
              #!/usr/bin/env bash
              set -eux

              cp "$(workspaces.data.path)/$(params.sbomDir)/Red-Hat-Openstack-Product-123.json" sbom.json

              test "$(jq -r '.name' sbom.json)" == "Red Hat Openstack Product 123"

              # Check product SPDX package and relationship
              test "$(jq -r '.packages[0].SPDXID' sbom.json)" == "SPDXRef-product"
              test "$(jq -r '.packages[0].name' sbom.json)" == "Red Hat Openstack Product"
              test "$(jq -r '.packages[0].versionInfo' sbom.json)" == "123"
              test "$(jq -r '.packages[0].externalRefs[0].referenceLocator' sbom.json)" == \
                "cpe:/a:example:openstack:el8"

              test "$(jq -r '.relationships[0].relationshipType' sbom.json)" == "DESCRIBES"
              test "$(jq -r '.relationships[0].relatedSpdxElement' sbom.json)" == "SPDXRef-product"

              # Check component SPDX packages and relationships
              # Component 1
              test "$(jq -r '.packages[1].name' sbom.json)" == "test-component-1"
              test "$(jq -r '.packages[1].externalRefs[0].referenceLocator' sbom.json)" == \
                "test-component-1-purl-1"
              test "$(jq -r '.packages[1].externalRefs[1].referenceLocator' sbom.json)" == \
                "test-component-1-purl-2"

              test "$(jq -r '.relationships[1].relationshipType' sbom.json)" == "PACKAGE_OF"
              test "$(jq -r '.relationships[1].relatedSpdxElement' sbom.json)" == "SPDXRef-component-0"

              # Component 2
              test "$(jq -r '.packages[2].name' sbom.json)" == "test-component-2"
              test "$(jq -r '.packages[2].externalRefs[0].referenceLocator' sbom.json)" == \
                "test-component-2-purl-1"

              test "$(jq -r '.relationships[2].relationshipType' sbom.json)" == "PACKAGE_OF"
              test "$(jq -r '.relationships[2].relatedSpdxElement' sbom.json)" == "SPDXRef-component-1"

              test "$(jq -r '.packages | length' sbom.json)" == 3
              test "$(jq -r '.relationships | length' sbom.json)" == 3
      runAfter:
        - run-task
