---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-create-advisory-update-purl-disk-images
spec:
  description: |
    Assert that the update-purl step can process CGW downloadURLs and generate
    the purl field for the releaseNotes for disk-image artifacts.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
          securityContext:
            runAsUser: 1001
        steps:
          - name: create-crs
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/results"

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/test_release_plan_admission.json" << 'EOF'
              {
                "apiVersion": "appstudio.redhat.com/v1alpha1",
                "kind": "ReleasePlanAdmission",
                "metadata": {
                  "name": "test",
                  "namespace": "default"
                },
                "spec": {
                  "applications": ["rhel-ai-app"],
                  "policy": "policy",
                  "pipeline": {
                    "pipelineRef": {
                      "resolver": "git",
                      "params": [
                        {
                          "name": "url",
                          "value": "github.com"
                        },
                        {
                          "name": "revision",
                          "value": "main"
                        },
                        {
                          "name": "pathInRepo",
                          "value": "pipeline.yaml"
                        }
                      ]
                    }
                  },
                  "serviceAccountName": "sa",
                  "origin": "rhel-ai-tenant"
                }
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec.json" << 'EOF'
              {
                "application": "rhel-ai-app",
                "components": [
                  {
                    "name": "intel-bootc-iso-disk-image-1-5",
                    "repository": "quay.io/redhat-prod/rhel-ai----disk-image"
                  },
                  {
                    "name": "intel-bootc-qcow2-disk-image-1-5",
                    "repository": "quay.io/redhat-prod/rhel-ai----disk-image"
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << 'EOF'
              {
                "mapping": {
                  "components": [
                    {
                      "name": "intel-bootc-iso-disk-image-1-5",
                      "staged": {
                        "destination": "rhelai-1_DOT_5-for-rhel-9-x86_64-isos",
                        "version": "1.5.1",
                        "files": [
                          {
                            "filename": "rhel-ai-intel-1.5.1-1749643937-x86_64.iso.gz",
                            "source": "install.iso.gz"
                          }
                        ]
                      },
                      "contentGateway": {
                        "contentType": "disk-image",
                        "productName": "Binary_RL_Red Hat Enterprise Linux AI",
                        "productCode": "RHELAI",
                        "productVersionName": "1.5.1",
                        "filePrefix": "rhel-ai-intel-1.5.1"
                      }
                    },
                    {
                      "name": "intel-bootc-qcow2-disk-image-1-5",
                      "staged": {
                        "destination": "rhelai-1_DOT_5-for-rhel-9-x86_64-isos",
                        "version": "1.5.1",
                        "files": [
                          {
                            "filename": "rhel-ai-intel-1.5.1-1749643939-x86_64-kvm.qcow2",
                            "source": "disk.qcow2"
                          }
                        ]
                      },
                      "contentGateway": {
                        "contentType": "disk-image",
                        "productName": "Binary_RL_Red Hat Enterprise Linux AI",
                        "productCode": "RHELAI",
                        "productVersionName": "1.5.1",
                        "filePrefix": "rhel-ai-intel-1.5.1"
                      }
                    }
                  ]
                },
                "releaseNotes": {
                   "content": {
                     "artifacts": [
                       {
                         "architecture": "x86_64",
                         "component": "intel-bootc-iso-disk-image-1-5",
                         "os": "linux",
                         "purl": "placeholder"
                       },
                       {
                         "architecture": "x86_64",
                         "component": "intel-bootc-qcow2-disk-image-1-5",
                         "os": "linux",
                         "purl": "placeholder"
                       }
                     ]
                   }
                 },
                 "sign": {
                   "configMapName": "cm"
                 }
               }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: create-advisory
      params:
        - name: releasePlanAdmissionPath
          value: "$(context.pipelineRun.uid)/test_release_plan_admission.json"
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/test_snapshot_spec.json"
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: environment
          value: stage
        - name: resultsDirPath
          value: "$(context.pipelineRun.uid)/results"
        - name: synchronously
          value: "false"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: "$(params.dataDir)"
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
          securityContext:
            runAsUser: 1001
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env bash
              set -ex

              DATA_FILE="$(params.dataDir)/$(context.pipelineRun.uid)/data.json"
              artifacts=$(jq -c '.releaseNotes.content.artifacts' "$DATA_FILE")

              baseUrlRoot="https://access.cdn.redhat.com"
              isoDir="content/origin/files/sha256/ae/aea86cd520f01d3b9c488fe11de9a6241c825018ff834cebce8d988046a1a8ac"
              isoFile="rhel-ai-intel-1.5.1-1749643937-x86_64.iso.gz"
              isoPath="$isoDir/$isoFile"
              qcow2Dir="content/origin/files/sha256/f7/f7dc49d369465abebb6aebf60a9962f49af854a4960d61ff6aa1f02325cee26d"
              qcow2File="rhel-ai-intel-1.5.1-1749643939-x86_64-kvm.qcow2"
              qcow2Path="$qcow2Dir/$qcow2File"
              expectedIsoPurl="pkg:generic/intel-bootc-iso-disk-image-1-5@1.5.1?download_url=${baseUrlRoot}/"
              expectedIsoPurl+="${isoPath}"
              expectedQcow2Purl="pkg:generic/intel-bootc-qcow2-disk-image-1-5@1.5.1?download_url=${baseUrlRoot}/"
              expectedQcow2Purl+="${qcow2Path}"

              isoFilter='.[] | select(.component == "intel-bootc-iso-disk-image-1-5") | .purl'
              isoPurl=$(echo "$artifacts" | jq -r "$isoFilter")
              qcow2Filter='.[] | select(.component == "intel-bootc-qcow2-disk-image-1-5") | .purl'
              qcow2Purl=$(echo "$artifacts" | jq -r "$qcow2Filter")

              if [ "$isoPurl" != "$expectedIsoPurl" ]; then
                echo "Unexpected PURL for iso disk-image"
                echo "got:      $isoPurl"
                echo "expected: $expectedIsoPurl"
                exit 1
              fi

              if [ "$qcow2Purl" != "$expectedQcow2Purl" ]; then
                echo "Unexpected PURL for qcow2 disk-image"
                echo "got:      $qcow2Purl"
                echo "expected: $expectedQcow2Purl"
                exit 1
              fi
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env bash
              set -eux

              kubectl delete internalrequests --all
