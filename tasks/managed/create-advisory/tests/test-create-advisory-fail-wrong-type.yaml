---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-create-advisory-fail-wrong-type
  annotations:
    test/assert-task-failure: "run-task"
spec:
  description: |
    Run the create-advisory task with a ReleasePlanAdmission that contains a mapping which contains
    both prod and pending repos and verify the task fails as expected
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: create-crs
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/results"
              
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/test_release_plan_admission.json" << EOF
              {
                "apiVersion": "appstudio.redhat.com/v1alpha1",
                "kind": "ReleasePlanAdmission",
                "metadata": {
                  "name": "test",
                  "namespace": "default"
                },
                "spec": {
                  "applications": [
                    "app"
                  ],
                  "policy": "policy",
                  "pipelineRef": {
                    "resolver": "git",
                    "params": [
                      {
                        "name": "url",
                        "value": "github.com"
                      },
                      {
                        "name": "revision",
                        "value": "main"
                      },
                      {
                        "name": "pathInRepo",
                        "value": "pipeline.yaml"
                      }
                    ]
                  },
                  "serviceAccount": "sa",
                  "origin": "dev"
                }
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/test_snapshot_spec.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp",
                    "repository": "quay.io/redhat-pending/repo"
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "releaseNotes": {
                  "type": "baz"
                },
                "sign": {
                  "configMapName": "cm"
                },
                "advisory": {
                  "repo": "myrepo.com",
                  "spec": {
                    "foo": "bar"
                  }
                }
              }
              EOF
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
          - name: patch-source-data-artifact-result
            ref:
              name: patch-source-data-artifact-result
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: run-task
      taskRef:
        name: create-advisory
      params:
        - name: releasePlanAdmissionPath
          value: "$(context.pipelineRun.uid)/test_release_plan_admission.json"
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/test_snapshot_spec.json"
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: resultsDirPath
          value: "$(context.pipelineRun.uid)/results"
        - name: synchronously
          value: "false"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
