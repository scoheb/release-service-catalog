---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-advisory
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |-
    Tekton task to create an advisory via an InternalRequest. The advisory data is pulled from the data JSON. The origin
    workspace from the ReleasePlanAdmission and Application from the Snapshot are also used. The advisory is created in
    a GitLab repository. Which repository to use is determined by the contents on the mapped repositories.
    Only all `redhat-pending` or all `redhat-prod` repositories may be specified in `.data.mapping`
  params:
    - name: jsonKey
      type: string
      description: The json key containing the advisory data
      default: ".releaseNotes"
    - name: releasePlanAdmissionPath
      type: string
      description: Path to the JSON string of the ReleasePlanAdmission in the data workspace
    - name: snapshotPath
      type: string
      description: Path to the JSON string of the Snapshot spec in the data workspace
    - name: dataPath
      type: string
      description: Path to the data JSON in the data workspace
    - name: environment
      type: string
      description: The environment for the advisory to be published. Options are stage and production
      default: ""
    - name: resultsDirPath
      type: string
      description: Path to the results directory in the data workspace
    - name: request
      type: string
      description: Type of request to be created
      default: "create-advisory"
    - name: synchronously
      type: string
      description: Whether the task should wait for InternalRequests to complete
      default: "true"
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
    - name: cgwHostname
      type: string
      description: >
        The hostname of the content-gateway to publish the metadata to
      default: https://developers.redhat.com/content-gateway/rest/admin
    - name: cgwSecret
      type: string
      description: >
        The kubernetes secret to use to authenticate to content-gateway.
        It needs to contain two keys: username and token
      default: publish-to-cgw-secret
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  workspaces:
    - name: data
      description: Workspace where the json files are stored
  results:
    - name: advisory_url
      description: The advisory url if one was created
    - name: advisory_internal_url
      description: The advisory internal url if one was created
    - description: Produced trusted data artifact
      name: sourceDataArtifact
      type: string
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
    securityContext:
      runAsUser: 1001
  steps:
    - name: skip-trusted-artifact-operations
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: update-purl
      image: quay.io/distribution_relengs/publish-to-dev-portal-test-image:purl
      computeResources:
        limits:
          memory: 256Mi
        requests:
          memory: 256Mi
          cpu: 100m
      env:
        - name: CGW_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.cgwSecret)
              key: username
        - name: CGW_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.cgwSecret)
              key: token
        - name: CGW_HOST
          value: $(params.cgwHostname)
      script: |
        #!/bin/bash
        set -exo pipefail

        # This step fetches the filenames that were previously uploaded to CGW earlier in this pipeline and uses
        # them to generate the PURL field with downloadURL and checksum.
        # This step is intended for generic artifacts only and is skipped for images.

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"

        # Try to extract the first contentType if it exists
        content_type=$(jq -r '.mapping.components[]?.contentGateway?.contentType // empty' "$DATA_FILE" | head -n1)

        # If no contentType is found, then we are not dealing with a generic type and can skip this step
        # But we will check if this is a github release for logging purposes
        if [ -z "$content_type" ]; then
          github_field=$(jq -r '.github // empty' "$DATA_FILE")
          if [[ -n "$github_field" ]]; then
            echo "Github release. Skipping update-purl."
            exit 0
          fi
          echo "content type is not a generic artifact, skipping update-purl"
          exit 0
        fi

        COMPONENTS=$(jq -c '.mapping.components[] | select(.contentGateway)' "$DATA_FILE")

        UPDATED_ENTRIES=()

        while IFS= read -r component; do
            PRODUCT_CODE=$(jq -r '.contentGateway.productCode' <<< "$component")
            VERSION_NAME=$(jq -r '.contentGateway.productVersionName' <<< "$component")
            COMPONENT_NAME=$(jq -r '.name' <<< "$component")

            # fetch the downloadURLs inside the loop because the files are organized by component
            echo "Fetching download URLs for $PRODUCT_CODE $VERSION_NAME..."
            URLS_JSON=$(python3 /home/utils/get_cgw_download_urls.py --product "$PRODUCT_CODE" \
              --version "$VERSION_NAME")

            # Create a map of basename -> full download URL
            declare -A FILE_URL_MAP
            while IFS= read -r url; do
                BASENAME=$(basename "$url")
                FILE_URL_MAP["$BASENAME"]="$url"
            done <<< "$URLS_JSON"

            # Error if any declared file is missing from the CGW response
            #   If a file is listed in the RPA to be released to CGW, but isn't returned from our API call
            #   then we probably should exit as that shouldn't happen.
            for declared_file in $(jq -r '.files[].source' <<< "$component"); do
              declared_basename=$(basename "$declared_file")
              if [[ -z "${FILE_URL_MAP[$declared_basename]}" ]]; then
                echo "Warning: file '$declared_basename' (from $COMPONENT_NAME) was not returned by CGW" >&2
                exit 1
              fi
            done

            # Get all advisory entries that match this component
            MATCHING_ENTRIES=$(jq -c --arg name "$COMPONENT_NAME" \
              '.releaseNotes.content.artifacts[] | select(.component == $name)' "$DATA_FILE")

            if [ -z "$MATCHING_ENTRIES" ]; then
              echo "Warning: no RPA CGW filename matches found for component: $COMPONENT_NAME" >&2
              continue
            fi

            while IFS= read -r entry; do
                ARCH=$(jq -r '.architecture' <<< "$entry")
                OS=$(jq -r '.os' <<< "$entry")

                FILENAME=$(jq -r --arg arch "$ARCH" --arg os "$OS" \
                  '.files[] | select(.arch == $arch and .os == $os) | .source' <<< "$component")

                FILENAME_BASENAME=$(basename "$FILENAME")
                URL="https://access.cdn.redhat.com${FILE_URL_MAP[$FILENAME_BASENAME]}"

                if [ -n "$URL" ]; then
                  PURL="pkg:generic/$COMPONENT_NAME@$VERSION_NAME?download_url=$URL"
                else
                  echo "Warning: No download URL found for $FILENAME"
                  PURL="MISSING"
                  # Should we fail here?
                fi

                UPDATED_ENTRY=$(jq --arg purl "$PURL" '.purl = $purl' <<< "$entry")
                UPDATED_ENTRIES+=("$UPDATED_ENTRY")
            done <<< "$MATCHING_ENTRIES"

        done <<< "$COMPONENTS"

        # Merge updated advisory entries back into releaseNotes.content.artifacts in the DATA_FILE
        ENTRIES_JOINED=$(IFS=,; echo "${UPDATED_ENTRIES[*]}")
        jq --argjson updated "[$ENTRIES_JOINED]" '
          .releaseNotes.content.artifacts = $updated
        ' "$DATA_FILE" > /tmp/data.tmp && mv /tmp/data.tmp "$DATA_FILE"
    - name: run-script
      image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
          cpu: 350m
      script: |
        #!/bin/bash
        set -ex

        DEFAULT_ADVISORY_TYPE="RHBA"
        RESULTS_FILE="$(params.dataDir)/$(params.resultsDirPath)/create-advisory-results.json"

        # Obtain application from snapshot
        application=$(jq -r .application "$(params.dataDir)/$(params.snapshotPath)")

        # Obtain origin workspace from releasePlanAdmission
        origin=$(jq -r '.spec.origin' "$(params.dataDir)/$(params.releasePlanAdmissionPath)")

        # Extract the advisory key and signing configMap name from the data JSON file
        advisoryData=$(jq -c "$(params.jsonKey)" "$(params.dataDir)/$(params.dataPath)")
        configMapName=$(jq -er '.sign.configMapName' "$(params.dataDir)/$(params.dataPath)")

        # Check custom advisory live id
        advisoryLiveId=$(jq -r '.live_id' <<< "$advisoryData")
        advisoryAllowCustomLiveId=$(jq -r '.allow_custom_live_id // false' <<< "$advisoryData")
        if [ "$advisoryAllowCustomLiveId" != true ] && [ "$advisoryLiveId" != "null" ]; then
          echo "Error: advisory live id is only allowed if allow_custom_live_id is set to true"
          exit 1
        fi

        # Validate type
        advisoryType=$(jq -r '.type' <<< "$advisoryData")
        if [ "$advisoryType" == "null" ]; then
          # default to $DEFAULT_ADVISORY_TYPE
          echo "Defaulting to type = $DEFAULT_ADVISORY_TYPE"
          advisoryData=$(jq -c --arg DEFAULT_ADVISORY_TYPE "$DEFAULT_ADVISORY_TYPE" \
            '.type = $DEFAULT_ADVISORY_TYPE' <<< "$advisoryData")
          advisoryType="$DEFAULT_ADVISORY_TYPE"
        fi

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"

        content_type=$(jq -r '.mapping.components[]?.contentGateway?.contentType // empty' "$DATA_FILE" | head -n1)

        # if no content type, check if this is a github release by looking for .github in data.json
        if [ -z "$content_type" ]; then
          github_field=$(jq -r '.github // empty' "$DATA_FILE")
          if [[ -n "$github_field" ]]; then
            content_type="generic"
          else
            content_type="image"
          fi
        fi

        if [ "$content_type" = "binary" ] || [ "$content_type" = "generic" ]; then
          content_path=".content.artifacts"
        else
          content_path=".content.images"
        fi

        if ! [[ "$advisoryType" =~ ^(RHSA|RHBA|RHEA)$ ]]; then
            echo "Error: advisory type must be one of RHSA, RHBA or RHEA"
            exit 1
        fi

        # Ensure RHSA is only used if CVEs are provided

        NUM_CVES=$(jq "[${content_path}[]?.cves.fixed // [] | length] | add" <<< "$advisoryData")

        if [[ "$advisoryType" == "RHSA" ]] && [[ "$NUM_CVES" -eq 0 ]] ; then
            echo "Provided advisory type is RHSA, but no fixed CVEs were listed"
            echo "RHSA should only be used if CVEs are fixed in the advisory. Failing..."
            exit 1
        fi

        pipelinerun_label="internal-services.appstudio.openshift.io/pipelinerun-uid"

        # only 2 gitlab instances are permitted...prod and staging
        # these are their secret names
        #

        prodSecretName="create-advisory-prod-secret"
        prodErrataSecretName="errata-prod-service-account"
        stagingSecretName="create-advisory-stage-secret"
        stagingErrataSecretName="errata-stage-service-account"

        if [ "$content_type" = "image" ]; then
          advisorySecretName="${prodSecretName}"
          errataSecretName="${prodErrataSecretName}"
          if [ "$(params.environment)" == "stage" ]; then
            advisorySecretName="${stagingSecretName}"
            errataSecretName="${stagingErrataSecretName}"
          fi
        else
          # Continue using the POC and staging credentials until CLDX-225
          # is complete and stakeholders are ready to ingest these advisories
          prodSecretName="create-advisory-poc-secret"
          prodErrataSecretName="errata-stage-service-account"
          stagingSecretName="create-advisory-poc-stage-secret"
          stagingErrataSecretName="errata-stage-service-account"

          DATA_FILE="$(params.dataDir)/$(params.dataPath)"
          INTENTION=$(jq -r '.intention' "$DATA_FILE")

          if [[ "$INTENTION" == "production" ]]; then
            advisorySecretName="$prodSecretName"
            errataSecretName="$prodErrataSecretName"
          elif [[ "$INTENTION" == "staging" ]]; then
            advisorySecretName="$stagingSecretName"
            errataSecretName="$stagingErrataSecretName"
          fi
        fi

        IR_FILE="$(params.dataDir)/$(context.task.name)/ir-result.txt"
        mkdir -p "$(dirname "$IR_FILE")"

        advisoryDataCompressed=$(gzip <<< "${advisoryData}" | base64 -w0)
        echo "Creating InternalRequest to create advisory..."
        internal-request --pipeline "$(params.request)" \
                         -p application="${application}" \
                         -p origin="${origin}" \
                         -p advisory_json="${advisoryDataCompressed}" \
                         -p config_map_name="${configMapName}" \
                         -p contentType="${content_type}" \
                         -p advisory_secret_name="${advisorySecretName}" \
                         -p errata_secret_name="${errataSecretName}" \
                         -p taskGitUrl="$(params.taskGitUrl)" \
                         -p taskGitRevision="$(params.taskGitRevision)" \
                         -s "$(params.synchronously)" \
                         --pipeline-timeout "01h05m00s" \
                         --task-timeout "01h00m00s" \
                         -l ${pipelinerun_label}="$(params.pipelineRunUid)" \
                         | tee "$IR_FILE" || \
                         (grep "^\[" "$IR_FILE" | jq . && exit 1)

        internalRequest=$(awk -F"'" '/created/ { print $2 }' "$IR_FILE")
        echo "done (${internalRequest})"

        echo -n "" > "$(results.advisory_url.path)"
        results=$(kubectl get internalrequest "$internalRequest" -o=jsonpath='{.status.results}')
        internalRequestPipelineRunName="$(jq -jr '.internalRequestPipelineRunName // ""' <<< "${results}")"
        internalRequestTaskRunName="$(jq -jr '.internalRequestTaskRunName // ""' <<< "${results}")"

        echo "** internalRequestPipelineRunName: ${internalRequestPipelineRunName}"
        echo "** internalRequestTaskRunName: ${internalRequestTaskRunName}"

        if [[ "$(echo "${results}" | jq -r '.result')" == "Success" ]]; then
          echo "Advisory created"
        else
          echo "Advisory creation failed"
          echo "$results"
          exit 1
        fi

        URL=$(echo "${results}" | jq -r '.advisory_url // ""')
        echo -n "$URL" | tee "$(results.advisory_url.path)"
        INTERNAL_URL=$(echo "${results}" | jq -r '.advisory_internal_url // ""')
        echo -n "$INTERNAL_URL" | tee "$(results.advisory_internal_url.path)"
        jq -n --arg url "$URL" --arg internal_url "$INTERNAL_URL" \
          '{"advisory": {"url": $url, "internal_url": $internal_url}}' | tee "$RESULTS_FILE"
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: "$(params.taskGitUrl)"
          - name: revision
            value: "$(params.taskGitRevision)"
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
    - name: patch-source-data-artifact-result
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/patch-source-data-artifact-result/patch-source-data-artifact-result.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
