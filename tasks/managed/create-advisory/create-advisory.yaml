---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-advisory
  labels:
    app.kubernetes.io/version: "5.1.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to create an advisory via an InternalRequest
  params:
    - name: jsonKey
      type: string
      description: The json key containing the advisory data
      default: ".releaseNotes"
    - name: releasePlanAdmissionPath
      type: string
      description: Path to the JSON string of the ReleasePlanAdmission in the data workspace
    - name: snapshotPath
      type: string
      description: Path to the JSON string of the Snapshot spec in the data workspace
    - name: dataPath
      type: string
      description: Path to the data JSON in the data workspace
    - name: resultsDirPath
      type: string
      description: Path to the results directory in the data workspace
    - name: request
      type: string
      description: Type of request to be created
      default: "create-advisory"
    - name: synchronously
      type: string
      description: Whether the task should wait for InternalRequests to complete
      default: "true"
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: subdirectory
      description: Subdirectory inside the workspace to be used
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
    - name: stepActionGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog stepActions to be used are stored
      default: https://github.com/konflux-ci/release-service-catalog.git
    - name: stepActionGitRevision
      type: string
      description: The revision in the stepActionGitUrl repo to be used
      default: production
  workspaces:
    - name: data
      description: Workspace where the json files are stored
  results:
    - name: advisory_url
      description: The advisory url if one was created
    - description: Produced trusted data artifact
      name: sourceDataArtifact
      type: string
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
      - name: "HOME"
        value: "/tekton/home"
  steps:
    - name: skip-trusted-artifact-operations
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.stepActionGitUrl)
          - name: revision
            value: $(params.stepActionGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: subdirectory
          value: $(params.subdirectory)
        - name: dataDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.stepActionGitUrl)
          - name: revision
            value: $(params.stepActionGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: dataDir
          value: $(params.dataDir)
        - name: subdirectory
          value: $(params.subdirectory)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: run-script
      image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
      script: |
        #!/bin/bash
        set -ex

        DEFAULT_ADVISORY_TYPE="RHBA"
        RESULTS_FILE="$(params.dataDir)/$(params.resultsDirPath)/create-advisory-results.json"

        # Obtain application from snapshot
        application=$(jq -r .application "$(params.dataDir)/$(params.snapshotPath)")

        # Obtain origin workspace from releasePlanAdmission
        origin=$(jq -r '.spec.origin' "$(params.dataDir)/$(params.releasePlanAdmissionPath)")

        # Extract the advisory key and signing configMap name from the data JSON file
        advisoryData=$(jq -c "$(params.jsonKey)" "$(params.dataDir)/$(params.dataPath)")
        configMapName=$(jq -er '.sign.configMapName' "$(params.dataDir)/$(params.dataPath)")

        # Validate type
        advisoryType=$(jq -r '.type' <<< "$advisoryData")
        if [ "$advisoryType" == "null" ]; then
          # default to $DEFAULT_ADVISORY_TYPE
          echo "Defaulting to type = $DEFAULT_ADVISORY_TYPE"
          advisoryData=$(jq -c --arg DEFAULT_ADVISORY_TYPE "$DEFAULT_ADVISORY_TYPE" \
            '.type = $DEFAULT_ADVISORY_TYPE' <<< "$advisoryData")
          advisoryType="$DEFAULT_ADVISORY_TYPE"
        fi

        if ! [[ "$advisoryType" =~ ^(RHSA|RHBA|RHEA)$ ]]; then
            echo "Error: advisory type must be one of RHSA, RHBA or RHEA"
            exit 1
        fi

        # Ensure RHSA is only used if CVEs are provided
        NUM_CVES=$(jq '[.content.images[]?.cves.fixed // [] | length] | add' <<< "$advisoryData")
        if [[ "$advisoryType" == "RHSA" ]] && [[ "$NUM_CVES" -eq 0 ]] ; then
            echo "Provided advisory type is RHSA, but no fixed CVEs were listed"
            echo "RHSA should only be used if CVEs are fixed in the advisory. Failing..."
            exit 1
        fi

        pipelinerun_label="internal-services.appstudio.openshift.io/pipelinerun-uid"

        # only 2 gitlab instances are permitted...prod and staging
        # these are their secret names
        #
        prodSecretName="create-advisory-prod-secret"
        prodErrataSecretName="errata-prod-service-account"
        stagingSecretName="create-advisory-stage-secret"
        stagingErrataSecretName="errata-stage-service-account"
        #
        # detect which one to use based on repositories specified
        #
        pending_repositories=$(jq -r '.components[] | select(.repository |
          contains("quay.io/redhat-pending/")) |
          .repository' "$(params.dataDir)/$(params.snapshotPath)")
        prod_repositories=$(jq -r '.components[] | select(.repository | contains("quay.io/redhat-prod/")) |
          .repository' "$(params.dataDir)/$(params.snapshotPath)")
        orphan_repositories=$(jq -r '.components[] | select(.repository | contains("quay.io/redhat-prod/") |
          not) | select(.repository | contains("quay.io/redhat-pending/") | not) |
          .repository' "$(params.dataDir)/$(params.snapshotPath)")

        foundPendingRepositories=false
        if [ -n "${pending_repositories}" ]; then
          foundPendingRepositories=true
        fi

        foundProdRepositories=false
        if [ -n "${prod_repositories}" ]; then
          foundProdRepositories=true
        fi

        foundOrphanRepositories=false
        if [ -n "${orphan_repositories}" ]; then
          foundOrphanRepositories=true
        fi

        echo "foundPendingRepositories: ${foundPendingRepositories}"
        echo "foundProdRepositories: ${foundProdRepositories}"
        echo "foundOrphanRepositories: ${foundOrphanRepositories}"

        if [ "${foundPendingRepositories}" == "true" ] && [ "${foundProdRepositories}" == "true" ]; then
          echo "Error: cannot publish to both redhat-pending and redhat-prod repositories"
          exit 1
        fi

        if [ "${foundPendingRepositories}" == "false" ] && [ "${foundProdRepositories}" == "false" ]; then
          echo "Error: you must publish to either redhat-pending or redhat-prod repositories"
          exit 1
        fi

        if [ "${foundOrphanRepositories}" == "true" ]; then
          echo "Error: you must publish to either redhat-pending or redhat-prod repositories"
          exit 1
        fi

        # at this point, one of foundPendingRepositories or foundProdRepositories
        # is true.
        #
        advisorySecretName="${prodSecretName}"
        errataSecretName="${prodErrataSecretName}"
        if [ "${foundPendingRepositories}" == "true" ]; then
          advisorySecretName="${stagingSecretName}"
          errataSecretName="${stagingErrataSecretName}"
        fi

        IR_FILE="$(params.dataDir)/$(context.task.name)/ir-result.txt"
        mkdir -p "$(dirname "$IR_FILE")"

        echo "Creating InternalRequest to create advisory..."
        internal-request --pipeline "$(params.request)" \
                         -p application="${application}" \
                         -p origin="${origin}" \
                         -p advisory_json="${advisoryData}" \
                         -p config_map_name="${configMapName}" \
                         -p advisory_secret_name="${advisorySecretName}" \
                         -p errata_secret_name="${errataSecretName}" \
                         -p taskGitUrl="$(params.taskGitUrl)" \
                         -p taskGitRevision="$(params.taskGitRevision)" \
                         -s "$(params.synchronously)" \
                         -l ${pipelinerun_label}="$(params.pipelineRunUid)" \
                         > "$IR_FILE" || \
                         (grep "^\[" "$IR_FILE" | jq . && exit 1)

        internalRequest=$(awk -F"'" '/created/ { print $2 }' "$IR_FILE")
        echo "done (${internalRequest})"

        echo -n "" > "$(results.advisory_url.path)"
        results=$(kubectl get internalrequest "$internalRequest" -o=jsonpath='{.status.results}')
        internalRequestPipelineRunName="$(jq -jr '.internalRequestPipelineRunName // ""' <<< "${results}")"
        internalRequestTaskRunName="$(jq -jr '.internalRequestTaskRunName // ""' <<< "${results}")"

        echo "** internalRequestPipelineRunName: ${internalRequestPipelineRunName}"
        echo "** internalRequestTaskRunName: ${internalRequestTaskRunName}"

        if [[ "$(echo "${results}" | jq -r '.result')" == "Success" ]]; then
          echo "Advisory created"
        else
          echo "Advisory creation failed"
          echo "$results"
          exit 1
        fi

        URL=$(echo "${results}" | jq -r '.advisory_url // ""')
        echo -n "$URL" | tee "$(results.advisory_url.path)"
        jq -n --arg url "$URL" '{"advisory": {"url": $url}}' | tee "$RESULTS_FILE"
    - name: create-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.stepActionGitUrl)
          - name: revision
            value: $(params.stepActionGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: dataDir
          value: $(params.dataDir)
        - name: subdirectory
          value: $(params.subdirectory)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
    - name: patch-source-data-artifact-result
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.stepActionGitUrl)
          - name: revision
            value: $(params.stepActionGitRevision)
          - name: pathInRepo
            value: stepactions/patch-source-data-artifact-result/patch-source-data-artifact-result.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
