---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: collect-index-images
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task that generates a JSON file to be used to create pyxis image for index images.
  params:
    - name: buildTimestamp
      type: string
      description: Build timestamp for the index image
    - name: internalRequestResultsFile
      type: string
      description: Path to the results file of the InternalRequest build result
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - name: indexImageSnapshot
      type: string
      description: JSON file to be used to create pyxis image for index images
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: collect-index-images
      image:
        quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 50m
      script: |
        #!/usr/bin/env bash
        set -eux

        RESULTS_FILE=$(params.dataDir)/$(params.internalRequestResultsFile)
        SNAPSHOT_FILE=$(params.dataDir)/index_image_snapshot.json
        jq -n '{"components": []}' | tee "$SNAPSHOT_FILE"

        LENGTH="$(jq -r '.components | length' "$RESULTS_FILE")"
        for((i=0; i<LENGTH; i++)); do
          TARGETINDEX=$(jq -r --argjson i "$i" '.components[$i].target_index' "$RESULTS_FILE")
          SOURCEINDEX=$(jq -r  --argjson i "$i" '.components[$i].index_image_resolved' "$RESULTS_FILE")
          REPOSITORY=${TARGETINDEX%:*}

          TAG=${TARGETINDEX#*:}
          TAGS=("${TAG}")
          if [[ ! "${TAG}" =~ .*$(params.buildTimestamp)$ ]]; then
            TAGS+=("${TAG}-$(params.buildTimestamp)")
          fi
          JSON_TAGS=$(jq -n -c '$ARGS.positional' --args -- "${TAGS[@]}")

          COMPONENT=$(jq -n \
            --arg image "${SOURCEINDEX}" \
            --arg repository "${REPOSITORY}" \
            --argjson tags "${JSON_TAGS}" \
            '{
              "containerImage": $image,
              "repository": $repository,
              "tags": $tags
            }'
          )
          export COMPONENT
          yq -i '.components += env(COMPONENT) ' "$SNAPSHOT_FILE"
        done
        echo -n "index_image_snapshot.json" > "$(results.indexImageSnapshot.path)"
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
