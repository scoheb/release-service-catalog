---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-collect-index-images-multiple-versions
spec:
  description: |
    Run the collect-index-images task for multiple index image versions and verify the results
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(params.dataDir)"
              cat > "$(params.dataDir)/internal-requests-results.json" << EOF
              {
                "components": [
                  {
                    "target_index": "quay.io/test/fbc-target-index:v4.12",
                    "index_image_resolved": "redhat.com/rh-stage/iib@sha256:abcdefghijk"
                  },
                  {
                    "target_index": "quay.io/test/fbc-target-index:v4.13",
                    "index_image_resolved": "redhat.com/rh-stage/iib@sha256:lmnopqrstuv"
                  }
                ]
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: collect-index-images
      params:
        - name: internalRequestResultsFile
          value: "internal-requests-results.json"
        - name: buildTimestamp
          value: "1357"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: indexImageSnapshot
          value: $(tasks.run-task.results.indexImageSnapshot)
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
      taskSpec:
        params:
          - name: indexImageSnapshot
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              SNAPSHOT_FILE="$(params.dataDir)/$(params.indexImageSnapshot)"

              if [ "$(jq -r '.components[0].containerImage' < "${SNAPSHOT_FILE}")" != \
                "redhat.com/rh-stage/iib@sha256:abcdefghijk" ]; then
                echo "containerImage does not match"
                exit 1
              fi
              if [ "$(jq -r '.components[0].repository' < "${SNAPSHOT_FILE}")" != \
                "quay.io/test/fbc-target-index" ]; then
                echo "repository does not match"
                exit 1
              fi
              if [ "$(jq -c '.components[0].tags' < "${SNAPSHOT_FILE}")" != "[\"v4.12\",\"v4.12-1357\"]" ]; then
                echo "tags do not match"
                exit 1
              fi

              if [ "$(jq -r '.components[1].containerImage' < "${SNAPSHOT_FILE}")" != \
                "redhat.com/rh-stage/iib@sha256:lmnopqrstuv" ]; then
                echo "containerImage does not match"
                exit 1
              fi
              if [ "$(jq -r '.components[1].repository' < "${SNAPSHOT_FILE}")" != \
                "quay.io/test/fbc-target-index" ]; then
                echo "repository does not match"
                exit 1
              fi
              if [ "$(jq -c '.components[1].tags' < "${SNAPSHOT_FILE}")" != "[\"v4.13\",\"v4.13-1357\"]" ]; then
                echo "tags do not match"
                exit 1
              fi
      runAfter:
        - run-task
