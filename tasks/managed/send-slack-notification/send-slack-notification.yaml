---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "release"
  name: send-slack-notification
spec:
  description: |-
    Sends message to Slack using postMessage API
  params:
    - name: message
      description: Message to be sent
    - name: tasksStatus
      description: status of tasks execution
    - name: secretName
      description: |
        Name of secret which contains authentication token for app
    - name: secretKeyName
      description: |
        Name of key within secret which contains webhook URL
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: slack-token
      secret:
        secretName: $(params.secretName)
        optional: true
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: send-message
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      computeResources:
        limits:
          memory: 256Mi
        requests:
          memory: 256Mi
          cpu: 150m
      volumeMounts:
        - name: slack-token
          mountPath: "/etc/secrets"
          readOnly: true
      env:
        - name: MESSAGE
          value: $(params.message)
        - name: KEYNAME
          value: $(params.secretKeyName)
        - name: TASKSSTATUS
          value: $(params.tasksStatus)
      script: |
        #!/usr/bin/env bash
        set -eux

        if [ -z "${MESSAGE}" ]; then
          echo "Message is empty - No message will be sent to Slack"
          exit
        fi

        if [ -z "${KEYNAME}" ] ; then
          echo "No secret key name provided via 'slack.slack-webhook-notification-secret-keyname' key in Data."
          echo "No message will be sent to Slack"
          exit
        fi

        if [ -f "/etc/secrets/${KEYNAME}" ]; then
          WEBHOOK_URL=$(cat "/etc/secrets/${KEYNAME}")
        else
          echo "Error: Secret not defined properly. The key to use (${KEYNAME}) is defined in the Release data \
              but the Secret does not contain the key"
          exit 1
        fi

        # set a default for circleType
        # circleType is the emoji that will be used in the message
        #
        circleType="white_circle"
        if [ "${TASKSSTATUS}" == "Failed" ]; then
          circleType="red_circle"
        fi
        if [ "${TASKSSTATUS}" == "Succeeded" ]; then
          circleType="large_green_circle"
        fi
        MESSAGE="${MESSAGE//@@CIRCLE_TYPE@@/$circleType}"
        MESSAGE="${MESSAGE//@@STATUS_TEXT@@/$TASKSSTATUS}"

        cat > /tmp/release.json << EOF
        ${MESSAGE}
        EOF

        curl  -H "Content-type: application/json" --data-binary "@/tmp/release.json"  \
          "${WEBHOOK_URL}"
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: "$(params.taskGitUrl)"
          - name: revision
            value: "$(params.taskGitRevision)"
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
