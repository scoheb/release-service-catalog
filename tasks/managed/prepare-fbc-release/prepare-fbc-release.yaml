---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: prepare-fbc-release
  labels:
    app.kubernetes.io/version: "2.0.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    A tekton task to prepare FBC Release by collecting a valid
    OCP version for each component from given
    containerImage(fbcFragment) in the snapshot, and update
    the fromIndex and targetIndex with collected
    OCP version and store updated values to snapshot respective
    to each component, so other task can use them.
  params:
    - name: snapshotPath
      description: Path to the JSON string of the Snapshot spec in the data workspace
      type: string
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  workspaces:
    - name: data
      description: Workspace where the snapshot and data json is stored
  results:
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: skip-trusted-artifact-operations
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: prepare-fbc-release
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      computeResources:
        limits:
          memory: 512Mi
        requests:
          memory: 512Mi
          cpu: 350m
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        SNAPSHOT_PATH=$(params.dataDir)/$(params.snapshotPath)
        if [ ! -f "${SNAPSHOT_PATH}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi        
        
        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi        

        pattern="^v[0-9]+\.[0-9]+$"

        # Read components and initial values
        fromIndex=$(jq -r '.fbc.fromIndex' "$DATA_FILE")
        targetIndex=$(jq -r '.fbc.targetIndex' "$DATA_FILE")

        # Print initial values
        echo "Initial fromIndex: $fromIndex"
        echo "Initial targetIndex: $targetIndex"
        echo

        # Get the number of components
        num_components=$(jq '.components | length' "$SNAPSHOT_PATH")
        echo "Found $num_components components"

        # Function to replace tag in an image
        replace_tag() {
            # replaces the tag if the placeholder exists
            echo "${1}" |sed -E "s/\{\{(\\s+)?OCP_VERSION(\\s+)?\}\}/${2}/g"
        }

        # validateOCPVersion function validates if the base image ocp ver matches with the one in the tested index
        validateOCPVersion() {
          indexVersion="${1#*:}"
          expectedOCPVersion="${2}"
          if [ "${indexVersion}" != "${expectedOCPVersion}" ]; then
            echo "The OCP version of the targetIndex does not match with the base image"
            echo "- index version: ${indexVersion}"
            echo "- base image version: ${expectedOCPVersion}"
            return 1
          fi
        }

        # Iterate over component indices
        for ((i=0; i<num_components; i++)); do
            component=$(jq -c ".components[$i]" "$SNAPSHOT_PATH")
            containerImage=$(jq -r '.containerImage' <<< "$component")
            componentName=$(jq -r '.name' <<< "$component")

            # Extract OCP version from container image using Skopeo.
            # This command retrieves the 'org.opencontainers.image.base.name' annotation,
            # which includes the OCP version, formatted as "registry:version".
            # Example: "registry.redhat.io/openshift4/ose-operator-registry:v4.12"
            # The script then isolates the version part (e.g., "v4.12") from this string.
            image_metadata=$(skopeo inspect --raw "docker://${containerImage}")
            media_type=$(jq -r .mediaType <<< "${image_metadata}")

            # multiplatform images will not contain the base name with the OCP version, so it should fetch
            # the manifest image
            if [[ "$media_type" != "application/vnd.oci.image.index.v1+json" ]]; then
                ocpVersion=$(jq -r '.annotations."org.opencontainers.image.base.name"' <<< "${image_metadata}" \
                  | cut -d: -f2 | sed 's/"//g')
            else
              # image is an index of multiplatform components
              arch_json=$(get-image-architectures "${containerImage}")

              # it is not required to loop all images as they are all built for the same OCP version
              manifest_image_sha="$(jq -rs 'map(.digest)[0]'  <<< "$arch_json")"

              # replace the image sha with the manifests's one
              fbc_fragment="${containerImage%@*}@${manifest_image_sha}"

              ocpVersion=$(skopeo inspect --raw docker://"${fbc_fragment}" \
                  | jq '.annotations."org.opencontainers.image.base.name"' | cut -d: -f2 | sed 's/"//g')
            fi

            # Check if the version matches the pattern
            if ! [[ "$ocpVersion" =~ $pattern ]]; then
                echo "Invalid format for image $containerImage."
                exit 1
            fi

            # Compute updated values
            updatedFromIndex=$(replace_tag "$fromIndex" "$ocpVersion")
            updatedTargetIndex=$(replace_tag "$targetIndex" "$ocpVersion")

            # if {{OCP_VERSION}} is not set, the original Index will be kept but its ocp version should
            # match base image version.
            validateOCPVersion "${updatedFromIndex}" "${ocpVersion}"
            if [ -n "${updatedTargetIndex}" ]; then
              validateOCPVersion "${updatedTargetIndex}" "${ocpVersion}"
            fi

            # Print updated values
            echo "Component: $componentName"
            echo "ocpVersion: $ocpVersion"
            echo "Updated fromIndex for $componentName: $updatedFromIndex"
            echo "Updated targetIndex for $componentName: $updatedTargetIndex"
            echo

            TEMP="/tmp/temp.json"
            # Apply each update directly
            jq ".components[$i].ocpVersion |= \"$ocpVersion\"" \
              "$SNAPSHOT_PATH" > "$TEMP" && mv "$TEMP" "$SNAPSHOT_PATH"
            jq ".components[$i].updatedFromIndex |= \"$updatedFromIndex\"" \
              "$SNAPSHOT_PATH" > "$TEMP" && mv "$TEMP" "$SNAPSHOT_PATH"
            jq ".components[$i].updatedTargetIndex |= \"$updatedTargetIndex\"" \
              "$SNAPSHOT_PATH" > "$TEMP" && mv "$TEMP" "$SNAPSHOT_PATH"

        done
    - name: create-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
    - name: patch-source-data-artifact-result
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/patch-source-data-artifact-result/patch-source-data-artifact-result.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
