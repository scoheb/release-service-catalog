---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-sign-index-image-plr
spec:
  description: Test creating a internal pipelinerun to sign an image using the simple-signing-pipeline request
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:2d6f05c89fc619042a2be19d64ff48de9975397a
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "sign": {
                  "configMapName": "signing-config-map",
                  "request": "simple-signing-pipeline",
                  "requestType": "internal-pipelinerun"
                }
              }
              EOF
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/release_plan_admission.json" << EOF
              {
                "spec": {
                  "pipeline": {
                    "pipelineRef": {
                      "resolver": "git",
                      "params": [
                        {
                          "name": "url",
                          "value": "https://localhost.git"
                        },
                        {
                          "name": "revision",
                          "value": "main"
                        },
                        {
                          "name": "pathInRepo",
                          "value": "pipelines/abc/abc.yaml"
                        }
                      ]
                    },
                    "serviceAccountName": "release-service-account"
                  }
                }
              }
              EOF
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/fbcResults.json" << EOF
              {
                  "components": [
                      {
                          "target_index": "quay.io/redhat/testimage:tag",
                          "imageDigests": [
                              "sha256:6f9a420f660e73a",
                              "sha256:6f9a420f660e73b"
                          ]
                      }
                  ]
              }
              EOF
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
          - name: patch-source-data-artifact-result
            ref:
              name: patch-source-data-artifact-result
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: sign-index-image
      params:
        - name: requester
          value: testuser
        - name: referenceImage
          value: quay.io/testrepo/testimage:tag
        - name: manifestListDigests
          value: "sha256:6f9a420f660e73a sha256:6f9a420f660e73b"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: releasePlanAdmissionPath
          value: $(context.pipelineRun.uid)/release_plan_admission.json
        - name: fbcResultsPath
          value: $(context.pipelineRun.uid)/fbcResults.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        steps:
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:2d6f05c89fc619042a2be19d64ff48de9975397a
            script: |
              #!/usr/bin/env bash
              set -eux

              internalPipelineruns="$(kubectl get pr \
                -l "internal-services.appstudio.openshift.io/pipelinerun-uid=$(context.pipelineRun.uid)" \
                -o json --sort-by=.metadata.creationTimestamp | jq -c)"
              plrsLength=$(jq ".items | length" <<< "${internalPipelineruns}" )

              expectedReferences=()
              expectedReferences+=("quay.io/testrepo/testimage:tag")
              expectedReferences+=("quay.io/testrepo/testimage:tag")

              expectedDigests=()
              expectedDigests+=("sha256:6f9a420f660e73a")
              expectedDigests+=("sha256:6f9a420f660e73b")

              foundReferences=()
              foundDigests=()
              for((iplr=0; iplr<plrsLength; iplr++)); do
                params=$(jq -r ".items[$iplr].spec.params" <<< "${internalPipelineruns}")
                refValue=$(jq -r '.[1].value' <<< "${params}")
                manifestDigest=$(jq -r '.[2].value' <<< "${params}")
                foundReferences+=("${refValue}")
                foundDigests+=("${manifestDigest}")

                if [ "$(jq -r '.[4].value' <<< "${params}")" != "signing-config-map" ]; then
                  echo "config_map_name does not match"
                  exit 1
                fi

                if [ "$(jq -r '.[3].value' <<< "${params}")" != "testuser" ]; then
                  echo "requester does not match"
                  exit 1
                fi

                if [ "$(jq -r '.[0].value' <<< "${params}")" != \
                   "quay.io/redhat-isv/operator-pipelines-images:released" ]; then
                  echo "pipeline_image does not match"
                  exit 1
                fi
              done

              differenceReferences=$(echo "${expectedReferences[@]}" "${foundReferences[@]}" | tr ' ' '\n' \
                | sort | uniq -u)
              differenceDigests=$(echo "${expectedDigests[@]}" "${foundDigests[@]}" | tr ' ' '\n' | sort | uniq -u)

              if [ -n "${differenceReferences}" ] ; then
                echo "error: references expected compared to found do not match"
                echo ""
                echo "${differenceReferences}"
                exit 1
              fi
              if [ -n "${differenceDigests}" ] ; then
                echo "error: digests expected compared to found do not match"
                echo ""
                echo "${differenceDigests}"
                exit 1
              fi
      runAfter:
        - run-task
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-plrs
            image: quay.io/konflux-ci/release-service-utils:2d6f05c89fc619042a2be19d64ff48de9975397a
            script: |
              #!/usr/bin/env bash
              set -eux
              kubectl delete pr -l "internal-services.appstudio.openshift.io/pipelinerun-uid=$(context.pipelineRun.uid)"
