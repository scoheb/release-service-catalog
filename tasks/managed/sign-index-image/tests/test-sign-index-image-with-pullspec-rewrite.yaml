---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-sign-index-image-with-pullspec-rewrite
spec:
  description: Test creating a internal request to sign an image
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:2d6f05c89fc619042a2be19d64ff48de9975397a
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "sign": {
                  "configMapName": "signing-config-map"
                }
              }
              EOF
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/release_plan_admission.json" << EOF
              {
                "spec": {
                  "pipeline": {
                    "pipelineRef": {
                      "resolver": "git",
                      "params": [
                        {
                          "name": "url",
                          "value": "https://localhost.git"
                        },
                        {
                          "name": "revision",
                          "value": "main"
                        },
                        {
                          "name": "pathInRepo",
                          "value": "pipelines/abc/abc.yaml"
                        }
                      ]
                    },
                    "serviceAccountName": "release-service-account"
                  }
                }
              }
              EOF
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/fbcResults.json" << EOF
              {
                  "components": [
                      {
                          "target_index": "quay.io/redhat/redhat----testimage:tag",
                          "image_digests": [
                              "sha256:6f9a420f660e73b"
                          ]
                      }
                  ]
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: sign-index-image
      params:
        - name: requester
          value: testuser
        - name: referenceImage
          value: quay.io/redhat/redhat----testimage:tag
        - name: manifestListDigests
          value: "sha256:6f9a420f660e73b"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: releasePlanAdmissionPath
          value: $(context.pipelineRun.uid)/release_plan_admission.json
        - name: fbcResultsPath
          value: $(context.pipelineRun.uid)/fbcResults.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
        - name: pyxisSecret
          value: test-create-pyxis-image-cert
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        steps:
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:2d6f05c89fc619042a2be19d64ff48de9975397a
            script: |
              #!/usr/bin/env bash
              set -eux

              internalRequest="$(kubectl get internalrequest --sort-by=.metadata.creationTimestamp --no-headers \
                -o custom-columns=":metadata.name")"
              params=$(kubectl get internalrequest "${internalRequest}" -o jsonpath="{.spec.params}")

              if [ "$(jq -r '.references' <<< "${params}")" != "registry.redhat.io/redhat/testimage:tag " ]; then
                echo "reference image does not match"
                exit 1
              fi

              if [ "$(jq -r '.manifest_digests' <<< "${params}")" != "sha256:6f9a420f660e73b " ]; then
                echo "manifest_digests does not match"
                exit 1
              fi

              if [ "$(jq -r '.config_map_name' <<< "${params}")" != "signing-config-map" ]
              then
                echo "config_map_name does not match"
                exit 1
              fi

              if [ "$(jq -r '.requester' <<< "${params}")" != "testuser" ]
              then
                echo "requester does not match"
                exit 1
              fi

              if [ "$(jq -r '.pipeline_image' <<< "${params}")" != \
                 "quay.io/redhat-isv/operator-pipelines-images:released" ]
              then
                echo "pipeline_image does not match"
                exit 1
              fi
      runAfter:
        - run-task
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:2d6f05c89fc619042a2be19d64ff48de9975397a
            script: |
              #!/usr/bin/env bash
              set -eux

              kubectl delete internalrequests --all
