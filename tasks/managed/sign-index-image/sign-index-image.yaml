---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sign-index-image
  labels:
    app.kubernetes.io/version: "4.1.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to create an internalrequest to sign a FBC Index Image.
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use in the data workspace
      type: string
    - name: releasePlanAdmissionPath
      description: Path to the JSON string of the releasePlanAdmission in the data workspace
      type: string
    - name: referenceImage
      type: string
      description: The image to be signed.
    - name: manifestListDigests
      type: string
      description: The manifest digests for each arch in manifest list
    - name: requester
      type: string
      description: Name of the user that requested the signing, for auditing purposes
    - name: requestTimeout
      type: string
      default: "1800"
      description: InternalRequest timeout
    - name: pipelineRunUid
      type: string
      description: The uid of the current pipelineRun. Used as a label value when creating internal requests
    - name: taskGitUrl
      type: string
      description: |
        The url to the git repo where the release-service-catalog tasks to be used are stored. This is passed to
        the InternalRequest as it is needed by the simple-signing-pipeline
    - name: taskGitRevision
      type: string
      description: |
        The revision in the taskGitUrl repo to be used. This is passed to the InternalRequest as it is needed by the
        simple-signing-pipeline
  workspaces:
    - name: data
      description: workspace to read and save files
  steps:
    - name: sign-index-image
      image: quay.io/konflux-ci/release-service-utils:7d0135b80a47cdaa225010ea1e2dff78d057c922
      script: |
        #!/usr/bin/env bash
        set -e

        TASK_LABEL="internal-services.appstudio.openshift.io/group-id"
        TASK_ID=$(context.taskRun.uid)
        PIPELINERUN_LABEL="internal-services.appstudio.openshift.io/pipelinerun-uid"

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        requestType=$(jq -r '.sign.requestType // "internal-request"' "${DATA_FILE}")
        if [ "${requestType}" == "internal-pipelinerun" ] ; then
          RPA_FILE="$(workspaces.data.path)/$(params.releasePlanAdmissionPath)"
          if [ ! -f "${RPA_FILE}" ] ; then
              echo "No valid rpa file was provided."
              exit 1
          fi
          service_account_name=$(jq -r '.spec.pipeline.serviceAccountName // "appstudio-pipeline"' "${RPA_FILE}")
          EXTRA_ARGS=(
          --task-git-url "$(params.taskGitUrl)"
          --task-git-revision "$(params.taskGitRevision)"
          --service-account "${service_account_name}"
          )
        else
          requestType=internal-request
          EXTRA_ARGS=()
        fi
        request=$(jq -r '.sign.request // "simple-signing-pipeline"' "${DATA_FILE}")

        default_pipeline_image="quay.io/redhat-isv/operator-pipelines-images:released"
        pipeline_image=$(jq -r --arg default_pipeline_image "${default_pipeline_image}" \
            '.sign.pipelineImage // .fbc.pipelineImage // $default_pipeline_image' "${DATA_FILE}")
        config_map_name=$(jq -r '.sign.configMapName // .fbc.configMapName // "signing-config-map"' "${DATA_FILE}")
        reference_image="$(params.referenceImage)"

        # Translate direct quay.io reference to public facing registry reference
        # quay.io/redhat/product----repo -> registry.redhat.io/product/repo
        reference_image=$(translate-delivery-repo "$reference_image" | jq -r '.[] | select(.repo=="redhat.io") | .url')

        # get all digests from manifest list
        for manifest_digest in $(params.manifestListDigests)
        do

          echo "Creating ${requestType} to sign image:"
          echo "- reference=${reference_image}"
          echo "- manifest_digest=${manifest_digest}"
          echo "- requester=$(params.requester)"

          ${requestType} -r "${request}" \
            -p pipeline_image="${pipeline_image}" \
            -p reference="${reference_image}" \
            -p manifest_digest="${manifest_digest}" \
            -p requester="$(params.requester)" \
            -p config_map_name="${config_map_name}" \
            -p taskGitUrl="$(params.taskGitUrl)" \
            -p taskGitRevision="$(params.taskGitRevision)" \
            -l ${TASK_LABEL}="${TASK_ID}" \
            -l ${PIPELINERUN_LABEL}="$(params.pipelineRunUid)" \
            -t "$(params.requestTimeout)" --pipeline-timeout "0h30m0s" --task-timeout "0h25m0s" \
            "${EXTRA_ARGS[@]}" -s true

          echo "done"
        done
