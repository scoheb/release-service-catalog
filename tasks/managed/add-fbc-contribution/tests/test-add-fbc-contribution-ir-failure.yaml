---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-add-fbc-contribution-ir-failure
  annotations:
    test/assert-task-failure: "run-task"
spec:
  description: |
    Run the add-fbc-contribution task with an IR that has exitCode set to 1 in its status.
    The task should fail.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/results"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot_spec.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp0",
                    "containerImage": "fail.io/image0@sha256:0000",
                    "repository": "prod-registry.io/prod-location0",
                    "updatedTargetIndex": "quay.io/scoheb/fbc-target-index-testing:v4.12",
                    "ocpVersion": "v4.12"
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "fbc": {
                  "fbcPublishingCredentials": "test-fbc-publishing-credentials",
                  "buildTimeoutSeconds": 420,
                  "requestTimeoutSeconds": 120
                }
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: add-fbc-contribution
      params:
        - name: fromIndex
          value: "quay.io/scoheb/fbc-index-testing:latest"
        - name: targetIndex
          value: "quay.io/scoheb/fbc-target-index-testing:v4.12"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot_spec.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: resultsDirPath
          value: "$(context.pipelineRun.uid)/results"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env sh
              set -eux
              
              kubectl delete internalrequests --all
