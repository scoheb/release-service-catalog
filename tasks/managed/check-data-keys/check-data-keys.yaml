---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: check-data-keys
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |-
    Tekton task that validates data keys against a schema to ensure that all required keys for a system(s) are present
    and correctly formatted. The system(s) passed into the `systems` parameter become required.
    The schema validation also applies to all data passed into the `dataPath` parameter,
    meaning all the data keys must be allowed and formatted correctly.

    For example, if `releaseNotes` is passed as a system and the data file does not have all the required
    releaseNotes keys, the schema will give validation errors, and the task will fail.

    Currently, `releaseNotes`, and `cdn` are the only supported systems.
  params:
    - name: dataPath
      description: Path to the JSON string of the merged data to use
      type: string
    - name: schema
      description: URL to the JSON schema file to validate the data against
      type: string
      default: https://raw.githubusercontent.com/konflux-ci/release-service-catalog/refs/heads/development/schema/dataKeys.json
    - name: systems
      description: The systems to check that all data keys are present for
      type: string
      default: ""
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: /var/workdir/release
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  results:
    - description: Produced trusted data artifact
      name: sourceDataArtifact
      type: string
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: check-data-keys
      image: quay.io/konflux-ci/release-service-utils:9089cafbf36bb889b4b73d8c2965613810f13736
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi  # was exiting with code 137 when set to 32Mi
          cpu: 10m
      env:
        - name: "SCHEMA_FILE"
          value: "$(params.schema)"
      script: |
        #!/usr/bin/env bash
        set -ex

        if [ ! -f "$(params.dataDir)/$(params.dataPath)" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        schema="${SCHEMA_FILE/\.git\///}"
        if ! curl -sL --fail-with-body "$schema" -o /tmp/schema ; then
            echo "Failed to download schema file: $schema"
            exit 1
        fi

        # We want this to output the json without expansion
        # shellcheck disable=SC2016
        jq --argjson systems '$(params.systems)' '.systems += $systems' \
            "$(params.dataDir)/$(params.dataPath)" > "/tmp/systems"
        mv "/tmp/systems" "$(params.dataDir)/$(params.dataPath)"

        check-jsonschema --output-format=text --schemafile "/tmp/schema"  "$(params.dataDir)/$(params.dataPath)"
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
