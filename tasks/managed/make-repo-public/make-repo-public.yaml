---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: make-repo-public
  labels:
    app.kubernetes.io/version: "1.0.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task that makes repositories public using quay.io API
  params:
    - name: dataPath
      type: string
      description: Path to the merged data JSON file generated by collect-data task
    - name: registrySecret
      type: string
      description: "The kube secret to use quay.io API, containing one key: token"
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  workspaces:
    - name: data
      description: The workspace where the data json file resides
  results:
    - description: Produced trusted data artifact
      name: sourceDataArtifact
      type: string
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: skip-trusted-artifact-operations
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: make-repo-public
      image: quay.io/konflux-ci/release-service-utils:a5072c6da901bc9cf4d767da82e700784c7df981
      env:
        - name: REGISTRY_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.registrySecret)
              key: token
      script: |
        #!/usr/bin/env bash
        set -eux

        # Function to call quay.io to make a repository public
        # Parameters:
        # repository: full path to repo on quay.io, e.g. "myorg/myrepo"
        function make_repo_public() {
          set +x
          if curl -X POST \
            --fail-with-body --retry 3 \
            --header "Authorization: Bearer ${REGISTRY_TOKEN}" \
            --header 'Content-Type: application/json' \
            --data '{"visibility": "public"}' \
            "https://quay.io/api/v1/repository/${1}/changevisibility"
          then
            echo Success
          else
            echo "Error: Failed to make repo quay.io/${1} public."\
              "Make sure the secret $(params.registrySecret) contains"\
              " the \"token\" key with token that has permission to"\
              " Administer Repositories."
            exit 1
          fi
          set -x
        }

        DATA_FILE="$(params.dataDir)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No valid data file was provided."
            exit 1
        fi

        DEFAULT="$(jq -r '.mapping.defaults.public // false' "$DATA_FILE")"

        NUM_COMPONENTS=$(jq '.mapping.components | length' "$DATA_FILE")
        for ((i=0; i < NUM_COMPONENTS; i++)); do
          COMPONENT="$(jq -c ".mapping.components[$i]" "$DATA_FILE")"
          if [ "$(jq -r --arg default "$DEFAULT" '.public // $default' <<< "$COMPONENT")" = true ] ; then
            REPO="$(jq -r ".repository" <<< "$COMPONENT")"

            echo "Making repository $REPO public..."

            if [[ "$REPO" != quay.io/* ]]; then
              echo "Warning: Only quay.io repositories are supported. Skipping this repo."
              continue
            fi

            REPO=${REPO#quay.io/}
            REPO=${REPO%/} # Remove trailing slash just in case

            make_repo_public "$REPO"
          fi
        done
    - name: create-trusted-artifact
      ref:
        resolver: "git"
        params:
          - name: url
            value: "$(params.taskGitUrl)"
          - name: revision
            value: "$(params.taskGitRevision)"
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
    - name: patch-source-data-artifact-result
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/patch-source-data-artifact-result/patch-source-data-artifact-result.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
