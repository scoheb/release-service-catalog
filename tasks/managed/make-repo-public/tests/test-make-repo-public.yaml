---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-make-repo-public
spec:
  description: |
    Run the test-make-repo-public task and check curl was called
    with the right parameters.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:a5072c6da901bc9cf4d767da82e700784c7df981
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "mapping": {
                  "components": [
                    {
                      "name": "mycomponent1",
                      "repository": "quay.io/redhat-services-prod/myrepo1"
                    },
                    {
                      "name": "mycomponent2",
                      "repository": "quay.io/redhat-services-prod/myrepo2",
                      "public": true
                    },
                    {
                      "name": "mycomponent3",
                      "repository": "quay.io/redhat-services-prod/myrepo3",
                      "public": true
                    },
                    {
                      "name": "mycomponent4",
                      "repository": "myregistry.org/myspace/myrepo3",
                      "public": true
                    }
                  ],
                  "defaults": {}
                },
                "registrySecret": "test-registry-secret"
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: make-repo-public
      params:
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: registrySecret
          value: "test-registry-secret"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:a5072c6da901bc9cf4d767da82e700784c7df981
            script: |
              #!/usr/bin/env bash
              set -eux

              if [ "$(wc -l < "$(params.dataDir)/mock_curl.txt")" != 2 ]; then
                  echo Error: curl was expected to be called 2 times. Actual calls:
                  cat "$(params.dataDir)/mock_curl.txt"
                  exit 1
              fi

              [[ "$(head -n 1 "$(params.dataDir)/mock_curl.txt")" \
                  == */redhat-services-prod/myrepo2/* ]]
              [[ "$(head -n 2 "$(params.dataDir)/mock_curl.txt" | tail -n 1)" \
                  == */redhat-services-prod/myrepo3/* ]]
      runAfter:
        - run-task
