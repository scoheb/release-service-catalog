---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-rh-sign-image-multiple-components
spec:
  description: Test creating internal requests to sign images
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        params:
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:2d6f05c89fc619042a2be19d64ff48de9975397a
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)"
              cat > "$(params.dataDir)/$(params.subdirectory)/snapshot_spec.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp0",
                    "containerImage": "registry.io/image0@sha256:0000",
                    "repository": "quay.io/redhat-pending/prod----repo0",
                    "rh-registry-repo": "registry.stage.redhat.io/prod/repo0",
                    "registry-access-repo": "registry.access.stage.redhat.com/prod/repo0",
                    "tags": [
                      "some-prefix-12345",
                      "some-prefix"
                    ]
                  },
                  {
                    "name": "comp1",
                    "containerImage": "registry.io/image1@sha256:0001",
                    "repository": "quay.io/redhat-pending/prod----repo1",
                    "rh-registry-repo": "registry.stage.redhat.io/prod/repo1",
                    "registry-access-repo": "registry.access.stage.redhat.com/prod/repo1",
                    "tags": [
                      "some-prefix-12345",
                      "some-prefix"
                    ]
                  },
                  {
                    "name": "comp2",
                    "containerImage": "registry.io/image2@sha256:0002",
                    "repository": "quay.io/redhat-pending/prod----repo2",
                    "rh-registry-repo": "registry.stage.redhat.io/prod/repo2",
                    "registry-access-repo": "registry.access.stage.redhat.com/prod/repo2",
                    "tags": [
                      "some-prefix-12345",
                      "some-prefix"
                    ]
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(params.subdirectory)/data.json" << EOF
              {
                "sign": {
                  "configMapName": "signing-config-map"
                }
              }
              EOF
              cat > "$(params.dataDir)/$(params.subdirectory)/release_plan_admission.json" << EOF
              {
                "spec": {
                  "pipeline": {
                    "pipelineRef": {
                      "resolver": "git",
                      "params": [
                        {
                          "name": "url",
                          "value": "https://localhost.git"
                        },
                        {
                          "name": "revision",
                          "value": "main"
                        },
                        {
                          "name": "pathInRepo",
                          "value": "pipelines/abc/abc.yaml"
                        }
                      ]
                    },
                    "serviceAccountName": "release-service-account"
                  }
                }
              }
              EOF

              cat > "$(params.dataDir)/$(params.subdirectory)/signRegistryAccess.txt" << EOF
              prod/repo0
              prod/repo1
              prod/repo2
              EOF
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)/$(params.subdirectory)
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)/$(params.subdirectory)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
          - name: patch-source-data-artifact-result
            ref:
              name: patch-source-data-artifact-result
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: rh-sign-image
      params:
        - name: requester
          value: testuser-multiple
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot_spec.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: releasePlanAdmissionPath
          value: $(context.pipelineRun.uid)/release_plan_admission.json
        - name: pyxisSecret
          value: test-create-pyxis-image-cert
        - name: signRegistryAccessPath
          value: $(context.pipelineRun.uid)/signRegistryAccess.txt
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)/$(params.subdirectory)
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)/$(params.subdirectory)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:2d6f05c89fc619042a2be19d64ff48de9975397a
            script: |
              #!/usr/bin/env bash
              set -eux

              internalRequests="$(kubectl get internalrequest -o json --sort-by=.metadata.creationTimestamp | jq -c)"
              irsLength=$(jq ".items | length" <<< "${internalRequests}" )

              expectedReferences=()
              expectedDigests=()
              for((i=0; i<3; i++)); do
                expectedReferences+=("registry.stage.redhat.io/prod/repo${i}:some-prefix-12345")
                expectedReferences+=("registry.access.stage.redhat.com/prod/repo${i}:some-prefix-12345")
                expectedReferences+=("registry.stage.redhat.io/prod/repo${i}:some-prefix")
                expectedReferences+=("registry.access.stage.redhat.com/prod/repo${i}:some-prefix")
                expectedDigests+=("sha256:000${i}")
              done

              foundReferences=()
              foundDigests=()
              for((ir=0; ir<irsLength; ir++)); do
                params=$(jq -r ".items[$ir].spec.params" <<< "${internalRequests}")
                refValue=$(jq -r '.reference' <<< "${params}")
                manifestDigest=$(jq -r '.manifest_digest' <<< "${params}")
                foundReferences+=("${refValue}")
                foundDigests+=("${manifestDigest}")

                if [ "$(jq -r '.config_map_name' <<< "${params}")" != "signing-config-map" ]
                then
                  echo "config_map_name does not match"
                  exit 1
                fi

                if [ "$(jq -r '.requester' <<< "${params}")" != "testuser-multiple" ]
                then
                  echo "requester does not match"
                  exit 1
                fi

                if [ "$(jq -r '.pipeline_image' <<< "${params}")" != \
                  "quay.io/redhat-isv/operator-pipelines-images:released" ]
                then
                  echo "pipeline_image does not match"
                  exit 1
                fi
              done

              differenceReferences=$(echo "${expectedReferences[@]}" "${foundReferences[@]}" | tr ' ' '\n' | \
                sort | uniq -u)
              differenceDigests=$(echo "${expectedDigests[@]}" "${foundDigests[@]}" | tr ' ' '\n' | sort | uniq -u)

              if [ -n "${differenceReferences}" ] ; then
                echo "error: references expected compared to found do not match"
                echo ""
                echo "${differenceReferences}"
                exit 1
              fi
              if [ -n "${differenceDigests}" ] ; then
                echo "error: digests expected compared to found do not match"
                echo ""
                echo "${differenceDigests}"
                exit 1
              fi

      runAfter:
        - run-task
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:2d6f05c89fc619042a2be19d64ff48de9975397a
            script: |
              #!/usr/bin/env bash
              set -eux

              kubectl delete internalrequests --all
