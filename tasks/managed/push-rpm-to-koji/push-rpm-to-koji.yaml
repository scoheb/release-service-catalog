---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-rpm-to-koji
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: push-koji
spec:
  params:
    - name: snapshotPath
      type: string
      description: |
        Path to the JSON file of the mapped Snapshot spec in the data workspace.
    - name: dataPath
      type: string
      description: |
        Path to the JSON file of the merged data to use in the data workspace.
    - name: pushSecret
      type: string
      description: |
        The secret that is used for login koji instance.
    - name: subdirectory
      type: string
      description: |
        The pipeline specific directory.
    - name: pipelineImage
      type: string
      description: |
        The image url with koji (1.34 or higher), jq and kinit installed for
        running the push-rpm-to-koji task, please make sure you have such image
        or you build this image first.
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
      default: "empty"
    - name: sourceDataArtifact
      type: string
      description: Location of trusted artifacts to be used to populate data directory
      default: ""
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire
      type: string
      default: "1d"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      default: $(workspaces.data.path)
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks and stepactions to be used are stored
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  workspaces:
    - name: data
  results:
    - name: sourceDataArtifact
      type: string
      description: Produced trusted data artifact
  volumes:
    - name: secret-volume
      secret:
        secretName: $(params.pushSecret)
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
    env:
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.ociArtifactExpiresAfter)
      - name: "ORAS_OPTIONS"
        value: "$(params.orasOptions)"
      - name: "DEBUG"
        value: "$(params.trustedArtifactsDebug)"
  steps:
    - name: skip-trusted-artifact-operations
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/skip-trusted-artifact-operations/skip-trusted-artifact-operations.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
    - name: use-trusted-artifact
      computeResources:
        limits:
          memory: 64Mi
        requests:
          memory: 64Mi
          cpu: 30m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/use-trusted-artifact/use-trusted-artifact.yaml
      params:
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(params.sourceDataArtifact)
    - name: push-rpm-to-koji
      # The pipelineImage will be fetching from get-secrets task with koji installed there
      image: "$(params.pipelineImage)"
      computeResources:
        limits:
          memory: 256Mi
        requests:
          memory: 256Mi
          cpu: 250m
      env:
        - name: SNAPSHOT_SPEC_FILE
          value: $(params.dataDir)/$(params.snapshotPath)
        - name: DATA_FILE
          value: $(params.dataDir)/$(params.dataPath)
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        if [ ! -f "${SNAPSHOT_SPEC_FILE}" ] ; then
            echo "No valid snapshot file was provided."
            exit 1
        fi

        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        APPLICATION=$(jq -r '.application' "${SNAPSHOT_SPEC_FILE}")
        NUM_COMPONENTS=$(jq '.components | length' "${SNAPSHOT_SPEC_FILE}")

        PRINCIPAL=$(jq --exit-status -r '.pushOptions.pushKeytab.principal' "${DATA_FILE}")
        KEYTAB_FILE=$(jq --exit-status -r '.pushOptions.pushKeytab.name' "${DATA_FILE}")
        KOJI_PROFILE=$(jq --exit-status -r '.pushOptions.koji_profile' "${DATA_FILE}")
        KOJI_TAGS=$(jq --exit-status -r '.pushOptions.koji_tags // [] | join(" ")' "${DATA_FILE}")
        KOJI_IMPORT_DRAFT=$(jq -r '.pushOptions.koji_import_draft' "${DATA_FILE}")

        koji-cmd() {
            koji --profile="$KOJI_PROFILE" "$@"
        }

        # Fetch the component list from data.pushOptions.components by default, if there is no such list
        # fetch from data.mapping.components.
        RELEASE_COMPONENTS=$(jq -r '
            if .pushOptions.components then
                .pushOptions.components[]
            else
                empty
            end' "${DATA_FILE}")
        if [ -z "$RELEASE_COMPONENTS" ]; then
            RELEASE_COMPONENTS=$(jq -r '.mapping.components[].name' "$DATA_FILE")
        fi

        KRB5CCNAME=FILE:/tmp/krb5cc_"$(id -u)"
        export KRB5CCNAME

        cd "$(params.subdirectory)"

        # The secrets are base64 when it is mounted as remote secrets otherwise we can directly use.
        if [ -f /tmp/secret/base64_keytab ]; then
            base64 -d /tmp/secret/base64_keytab > ./"$KEYTAB_FILE"
        else
            cp /tmp/secret/"$KEYTAB_FILE" ./"$KEYTAB_FILE"
        fi

        TRIES=10
        while [ $TRIES -gt 0 ] ; do
            if kinit -kt ./"$KEYTAB_FILE" "$PRINCIPAL"; then
                break
            fi
            TRIES=$((TRIES - 1))
        done

        USER_NAME=$(echo "$PRINCIPAL" | cut -d'@' -f1)

        # Test the koji connection
        koji-cmd hello

        printf 'Start task "%s" for Application "%s"\n\n' "$(context.task.name)" "$APPLICATION"

        for ((i = 0; i < NUM_COMPONENTS; i++))
        do
          component=$(jq -c --argjson i "$i" '.components[$i]' "${SNAPSHOT_SPEC_FILE}")
          containerImage=$(jq -r '.containerImage' <<< "$component")
          componentName=$(jq -r '.name' <<< "$component")

          # Use printf to join the array elements and grep to check for the presence of the variable
          if ! printf "%s\n" "${RELEASE_COMPONENTS[@]}" | grep -q -x "$componentName"; then
              printf "Skip the component %s as it is not in the release list.\n" "$componentName"
              continue
          fi

          mkdir temp && cd temp

          # The login serviceaccount should have the dockerconfig to pull the images
          oras pull "$containerImage"

          SRPM=$(ls ./*.src.rpm)
          PACKAGE_NVR=$(basename "$SRPM" .src.rpm)

          if [[ "$KOJI_IMPORT_DRAFT" == "false" ]]; then
              if koji-cmd buildinfo "$PACKAGE_NVR" >/dev/null 2>&1;  then
                  printf "Skip import %s into BREW as it's exist ...\n" "$PACKAGE_NVR"
                  cd .. && rm -rf temp
                  continue
              fi
              draft="false"
              draft_flag=""
          else
              draft="true"
              draft_flag="--draft"
          fi

          # Get Koji build target from the RPM image annotation to tag the
          # imported build later.
          koji_target=$(
            oras manifest fetch "$containerImage" |
              jq --exit-status -r '.annotations."koji.build-target"'
          )
          if [ -z "$koji_target" ]; then
              echo "ERROR: No Koji build target found in the container image annotations."
              exit 1
          fi
          # For draft builds, remove "-candidate" tag suffix if present and
          # append "-draft".
          if [[ "$draft" == "true" && "$koji_target" != *-draft ]]; then
              koji_tag=${koji_target%-candidate}-draft
          else
              koji_tag=${koji_target}
          fi
          KOJI_TAGS="$koji_tag $KOJI_TAGS"

          printf "Import rpm %s with tags %s ...\n" "$PACKAGE_NVR" "$KOJI_TAGS"

          # Reserve build ID and import build (as draft by default)
          build_name=$(jq -r '.build.name' cg_import.json)
          build_version=$(jq -r '.build.version' cg_import.json)
          build_release=$(jq -r '.build.release' cg_import.json)
          import_build_data=$(cat <<EOD
              {
                "name": "$build_name",
                "version": "$build_version",
                "release": "$build_release",
                "draft": "$draft"
              }
        EOD
          )
          buildinfo=$(koji-cmd call --json CGInitBuild '"konflux"' "$import_build_data")
          build_id=$(jq --exit-status -r '.build_id' <<< "$buildinfo")
          token=$(jq --exit-status -r '.token' <<< "$buildinfo")

          if ! koji-cmd import-cg $draft_flag cg_import.json --token="$token" --build-id="$build_id" .; then
              echo "ERROR: Import failed"
              koji-cmd call --json CGRefundBuild '"konflux"' "$build_id" "\"$token\""
              exit 1
          fi

          for tag in $KOJI_TAGS; do
              if ! koji-cmd list-pkgs --tag "$tag" --package "$build_name" >/dev/null 2>&1;  then
                  koji-cmd --force add-pkg "$tag" "$build_name" --owner "$USER_NAME"
              fi
              koji-cmd call tagBuild "$tag" "$build_id"
          done

          # Clean up to handle next component
          cd .. && rm -rf temp
        done

        printf 'Completed "%s" for "%s"\n\n' "$(context.task.name)" "$APPLICATION"
      workingDir: $(params.dataDir)
      volumeMounts:
        - mountPath: /tmp/secret
          name: secret-volume
          readOnly: true
    - name: create-trusted-artifact
      computeResources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
          cpu: 250m
      ref:
        resolver: "git"
        params:
          - name: url
            value: "$(params.taskGitUrl)"
          - name: revision
            value: "$(params.taskGitRevision)"
          - name: pathInRepo
            value: stepactions/create-trusted-artifact/create-trusted-artifact.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: workDir
          value: $(params.dataDir)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
    - name: patch-source-data-artifact-result
      computeResources:
        limits:
          memory: 32Mi
        requests:
          memory: 32Mi
          cpu: 20m
      ref:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: stepactions/patch-source-data-artifact-result/patch-source-data-artifact-result.yaml
      params:
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(results.sourceDataArtifact.path)
