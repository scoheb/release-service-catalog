---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-push-rpm-to-koji
spec:
  description: |
    Test the push-rpm-to-koji task.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
          # Use the same security context as the main task to avoid permission issues
          securityContext:
            runAsUser: 1001
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/data.json" << EOF
              {
                "mapping": {
                  "components": [
                    {
                      "name": "test",
                      "pushSourceContainer": false,
                      "repository": "quay.io/test/test"
                    },
                    {
                      "name": "test-foo",
                      "pushSourceContainer": false,
                      "repository": "quay.io/test/test-foo"
                    }
                  ]
                },
                "pushOptions": {
                  "koji_profile": "koji",
                  "koji_import_draft": true,
                  "koji_tags": [
                    "test-rpm"
                  ],
                  "pushKeytab": {
                    "name": "test.keytab",
                    "principal": "test@test.com",
                    "secret": "test-secrets"
                  },
                  "pushPipelineImage": "test-image"
                }
              }
              EOF
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/snapshot_spec.json" << EOF
              {
                "application": "rpms",
                "artifacts": {},
                "components": [
                  {
                    "containerImage": "quay.io/test/test@sha256:12345",
                    "name": "test",
                    "source": {
                      "git": {
                        "revision": "32c8f78c26e5831a87aa865ea80452fadbb3a95e",
                        "url": "https://gitlab.example.com/rpms/test"
                      }
                    }
                  },
                  {
                    "containerImage": "quay.io/test/test-foo@sha256:12345",
                    "name": "test-foo",
                    "source": {
                      "git": {
                        "context": "./",
                        "dockerfileUrl": "Containerfile",
                        "revision": "12345",
                        "url": "https://gitlab.example.com/rpms/test-foo"
                      }
                    }
                  },
                  {
                    "containerImage": "quay.io/test/test-bar@sha256:12345",
                    "name": "test-bar",
                    "source": {
                      "git": {
                        "context": "./",
                        "dockerfileUrl": "Containerfile",
                        "revision": "12345",
                        "url": "https://gitlab.example.com/rpms/test-bar"
                      }
                    }
                  }
                ]
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: push-rpm-to-koji
      params:
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot_spec.json"
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
        - name: pushSecret
          value: "push-koji-test"
        - name: pipelineImage
          value: "quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
          # Use the same security context as the main task to avoid permission issues
          securityContext:
            runAsUser: 1001
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -euo pipefail

              exit_code=0

              function assert_cmd_called_with() {
                  calls_file="$(params.dataDir)/${1}_calls.txt"
                  if ! grep -q "^$*$" "$calls_file"; then
                      echo "Command call not found:"
                      echo "  $*"
                      echo "Actual calls:"
                      sed 's/^/  /' "$calls_file"
                      return 1
                  fi
              }

              function assert_cmd_calls_count() {
                  expected_count=$1
                  shift
                  calls_file="$(params.dataDir)/${1}_calls.txt"
                  actual_count=$(grep -c "^$*" "$calls_file")
                  if [[ "$expected_count" != "$actual_count" ]]; then
                      echo "Expected $expected_count calls, but the actual number is $actual_count"
                      echo "Matching calls:"
                      grep "^$*" "$calls_file" | sed 's/^/  /'
                      echo "Non-matching calls:"
                      grep --invert-match "^$*" "$calls_file" | sed 's/^/  /'
                      return 1
                  fi
              }

              function test_init_build() {
                  import_build_data=$(jq --compact-output <<EOD
                      {
                        "name": "libecpg",
                        "version": "16.1",
                        "release": "10.el10_0",
                        "epoch": null,
                        "draft": true
                      }
              EOD
                  )
                  if assert_cmd_called_with koji --profile=koji call --json CGInitBuild \
                        '"konflux"' "$import_build_data"
                  then
                      echo "TEST PASSED: Koji build was initialized properly."
                  else
                      echo "TEST FAILED: Koji build was not initialized properly."
                      exit_code=1
                  fi
              }

              function test_import() {
                  if assert_cmd_called_with koji --profile=koji import-cg \
                        --draft "cg_import\.json" --token=mock-token --build-id=12345 "\."
                  then
                      echo "TEST PASSED: Koji build was imported as draft."
                  else
                      echo "TEST FAILED: Koji build was not imported as draft."
                      exit_code=1
                  fi
              }

              function test_tag() {
                  tag=$1
                  if assert_cmd_called_with koji --profile=koji call tagBuild "$tag" 12345; then
                      echo "TEST PASSED: Koji build was tagged with $tag."
                  else
                      echo "TEST FAILED: Koji build was not tagged with $tag."
                      exit_code=1
                  fi
              }

              function test_oras_pull() {
                  image=$1
                  if assert_cmd_called_with oras pull --registry-config /tmp/foobar "$image"; then
                      echo "TEST PASSED: Image was pulled: $image"
                  else
                      echo "TEST FAILED: Image was not pulled: $image"
                      exit_code=1
                  fi
              }

              function test_kinit() {
                  if assert_cmd_called_with kinit -kt "\./test.keytab" "test@test\.com"; then
                      echo "TEST PASSED: kinit was called."
                  else
                      echo "TEST PASSED: kinit was not called."
                      exit_code=1
                  fi
              }

              function test_cmd_count() {
                  count=$1
                  shift
                  if assert_cmd_calls_count "$count" "$@"; then
                      echo "TEST PASSED: \"$*\" was called exactly $count times."
                  else
                      echo "TEST FAILED: \"$*\" was not called exactly $count times."
                      exit_code=1
                  fi
              }

              test_init_build
              test_import
              test_tag test-rpm
              test_tag mock-target-draft
              test_oras_pull quay.io/test/test@sha256:12345
              test_oras_pull quay.io/test/test-foo@sha256:12345
              test_cmd_count 2 oras pull
              test_cmd_count 3 kinit -kt
              test_kinit

              exit $exit_code
