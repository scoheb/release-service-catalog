---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-upload-sbom-to-atlas-spdx
spec:
  description: |
    Tests uploading SPDX SBOMs to Atlas using the upload-sbom-to-atlas task.
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: sbomDir
          value: $(context.pipelineRun.uid)/sboms
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        workspaces:
          - name: data
        params:
          - name: sbomDir
            description: Directory containing generated SBOM files.
            type: string
          - name: subdirectory
            type: string
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:91d9f4886c57a8b86c3c643ea00617250ac30ff0
            script: |
              #!/usr/bin/env bash
              set -eux

              # creating directory for generated SBOM-s
              mkdir -p "$(workspaces.data.path)/$(params.sbomDir)"
              # creating working directory
              workdir="$(workspaces.data.path)/$(params.subdirectory)/workdir"
              mkdir -p "${workdir}"

              sbomsDir="$(workspaces.data.path)/$(params.sbomDir)"

              # minimal SPDX SBOM 2.2 - no need for conversion
              cat > "$sbomsDir/spdx_minimal_2_2.json" << EOF
              {
                "spdxVersion": "SPDX-2.2",
                "dataLicense": "CC0-1.0",
                "SPDXID": "SPDXRef-DOCUMENT",
                "name": "Minimal SPDX SBOM",
                "documentNamespace": "http://spdx.org/spdxdocs/minimal-spdx-sbom",
                "documentDescribes": []
              }
              EOF
              sbom_id_2_2="spdx_minimal_2_2"
              echo "$sbom_id_2_2" > "$workdir/sbom_id_2_2"

              # minimal SPDX SBOM 2.3 - currently highest existing version (supported by Atlas)
              cat > "$sbomsDir/spdx_minimal_2_3.json" << EOF
              {
                "spdxVersion": "SPDX-2.3",
                "dataLicense": "CC0-1.0",
                "SPDXID": "SPDXRef-DOCUMENT",
                "name": "Minimal SPDX SBOM",
                "documentNamespace": "http://spdx.org/spdxdocs/minimal-spdx-sbom",
                "documentDescribes": []
              }
              EOF
              sbom_id_2_3="spdx_minimal_2_3"
              echo "$sbom_id_2_3" > "$workdir/sbom_id_2_3"

              # Random JSON file that will be skipped
              cat > "$sbomsDir/random_file.json" << EOF
              {
                "foo": "bar"
              }
              EOF

              # Random empty file that will be skipped
              touch "$sbomsDir/random_file"
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(workspaces.data.path)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(workspaces.data.path)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
            env:
              - name: IMAGE_EXPIRES_AFTER
                value: 1d
              - name: "ORAS_OPTIONS"
                value: "--insecure"
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
    - name: run-task
      taskRef:
        name: upload-sbom-to-atlas
      params:
        - name: atlasSecretName
          value: atlas-test-sso-secret
        - name: sbomDir
          value: "$(context.pipelineRun.uid)/sboms"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(workspaces.data.path)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup

    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(workspaces.data.path)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: sbomDir
          value: "$(context.pipelineRun.uid)/sboms"
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: sbomDir
            description: Directory containing generated SBOM files.
            type: string
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        steps:
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(workspaces.data.path)/$(params.subdirectory)
            env:
              - name: "ORAS_OPTIONS"
                value: "--insecure"
            computeResources: {}
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:a5072c6da901bc9cf4d767da82e700784c7df981
            script: |
              #!/usr/bin/env bash
              set -eux

              workdir="$(workspaces.data.path)/$(params.subdirectory)/workdir"
              sbomsDir="$(workspaces.data.path)/$(params.sbomDir)"
              mkdir -p "${workdir}"
              mkdir -p "${sbomsDir}"

              # Check count of calls
              if [ "$(wc -l < "$workdir/mock_curl.txt")" -ne 4 ]; then
                echo "TEST FAILED: curl was expected to be called 4 times. Actual calls:"
                cat "$workdir/mock_curl.txt"
                exit 1
              else
                echo "TEST PASSED: Curl has been called 4 times."
              fi

              # Check calls for SSO tokens
              expected_url='https://auth.redhat.com/auth/realms/EmployeeIDP/protocol/openid-connect/token'
              for line in 1 3; do
                  curl_call=$(head -n "$line" "$workdir/mock_curl.txt")
                  if ! echo "$curl_call" | grep -q "$expected_url"; then
                      echo "TEST FAILED: Call for SSO token does not match the expected command."
                      exit 1
                  else
                    echo "TEST PASSED: SSO token has been requested"
                  fi
              done

              for file in sbom_id_2_2 sbom_id_2_3; do
                sbom_id="$(cat "$workdir/$file")"
                curl_calls="$(cat "$workdir/mock_curl.txt")"

                # Check if format of all SBOM-s was properly identified and stored in file
                if [ "$(cat "$workdir/$sbom_id.json.sbom_format")" = "spdx-json" ]; then
                  echo "TEST PASSED: Correct format of the SBOM in *.json.sbom_format file."
                else
                  echo "TEST FAILED: Wrong format of SBOM in $workdir/$sbom_id.json.sbom_format file."
                  exit 1
                fi

                # Check if all parsed SBOM-s were sent to Atlas
                # calls are unsorted, so we are checking whole file
                if ! echo "$curl_calls" | grep -q "https://sbom.atlas.devshift.net/api/v1/sbom?id=$sbom_id"; then
                    echo "TEST FAILED: Uploading the SBOM with ID $sbom_id does not match the expected command."
                    exit 1
                else
                  echo "TEST PASSED: SBOM has been uploaded"
                fi
              done

              # Check absent conversion file for supported version
              sbom_id_2_3_="$(cat "$workdir/sbom_id_2_3")"
              # Check absent conversion file
              if [ ! -e "$workdir/$sbom_id_2_3_.json.convert_to_version" ]; then
                echo "TEST PASSED: $sbom_id_2_3_.json.convert_to_version is absent, conversion not needed."
              else
                echo "TEST FAILED: $sbom_id_2_3_.json.convert_to_version is present."
                exit 1
              fi

              # Check absent conversion file for supported version
              sbom_id_2_2_="$(cat "$workdir/sbom_id_2_2")"
              # Check absent conversion file
              if [ ! -e "$workdir/$sbom_id_2_2_.json.convert_to_version" ]; then
                echo "TEST PASSED: $sbom_id_2_2_.json.convert_to_version is absent, conversion not needed."
              else
                echo "TEST FAILED: $sbom_id_2_2_.json.convert_to_version is present."
                exit 1
              fi

              # Non-converted files have to be identical
              counter=2
              for file in sbom_id_2_2 sbom_id_2_3; do
                original=$(mktemp)
                discovered=$(mktemp)
                supported=$(mktemp)

                jq -S . "$sbomsDir/spdx_minimal_2_$counter.json" > "$original"
                jq -S . "$workdir/$(cat "$workdir/$file").json" > "$discovered"
                jq -S . "$workdir/$(cat "$workdir/$file").json.supported_version" > "$supported"
                counter=$((counter + 1))

                # Compare SBOM file contents between original and discovered
                if diff "$original" "$discovered"; then
                  echo "TEST PASSED: The original and discovered SBOM files are identical."
                else
                  echo "TEST FAILED: The original and discovered SBOM files are different."
                  exit 1
                fi

                # Compare SBOM file contents between discovered and supported
                if diff "$discovered" "$supported"; then
                  echo "TEST PASSED: The discovered and supported SBOM files are identical."
                else
                  echo "TEST FAILED: The discovered and supported SBOM files are different."
                  exit 1
                fi
              done
