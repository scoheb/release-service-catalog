---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-upload-sbom-to-atlas-curl-fail
spec:
  description: |
    Tests that failure in uploading SPDX SBOMs to Atlas should not fail the upload-sbom-to-atlas task.
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: sbomDir
          value: $(context.pipelineRun.uid)/sboms
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        workspaces:
          - name: data
        params:
          - name: sbomDir
            description: Directory containing generated SBOM files.
            type: string
          - name: subdirectory
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:3eb493f6b7923e04fbb01b44b24e5491a2bbd1ec
            script: |
              #!/usr/bin/env bash
              set -eux

              # creating directory for generated SBOM-s
              sbomsDir="$(params.dataDir)/$(params.sbomDir)"
              mkdir -p "${sbomsDir}"
              # creating working directory
              workdir="$(params.dataDir)/$(params.subdirectory)/workdir"
              mkdir -p "${workdir}"

              # minimal SPDX SBOM 2.3 - no need for conversion
              cat > "$sbomsDir/spdx_minimal_curl_fail_2_3.json" << EOF
              {
                "spdxVersion": "SPDX-2.3",
                "dataLicense": "CC0-1.0",
                "SPDXID": "SPDXRef-DOCUMENT",
                "name": "Minimal SPDX SBOM for testing curl failure",
                "documentNamespace": "http://spdx.org/spdxdocs/minimal-spdx-sbom",
                "documentDescribes": []
              }
              EOF
              sbom_id_2_3="spdx_minimal_curl_fail_2_3"
              echo "$sbom_id_2_3" > "$workdir/spdx_minimal_curl_fail_2_3"

          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(params.dataDir)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
            env:
              - name: IMAGE_EXPIRES_AFTER
                value: 1d
              - name: "ORAS_OPTIONS"
                value: "--insecure"
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
    - name: run-task
      taskRef:
        name: upload-sbom-to-atlas
      params:
        - name: atlasSecretName
          value: atlas-test-sso-secret
        - name: sbomDir
          value: "$(context.pipelineRun.uid)/sboms"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: dataDir
          value: $(params.dataDir)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup

    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: sbomDir
          value: "$(context.pipelineRun.uid)/sboms"
        - name: dataDir
          value: $(params.dataDir)
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: sbomDir
            description: Directory containing generated SBOM files.
            type: string
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        workspaces:
          - name: data
        steps:
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                mkdir -p "$(params.dataDir)/$(params.subdirectory)"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(params.dataDir)/$(params.subdirectory)
            env:
              - name: "ORAS_OPTIONS"
                value: "--insecure"
            computeResources: {}
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:3eb493f6b7923e04fbb01b44b24e5491a2bbd1ec
            script: |
              #!/usr/bin/env bash
              set -eux

              workdir="$(params.dataDir)/$(params.subdirectory)/workdir"
              sbomsDir="$(params.dataDir)/$(params.sbomDir)"
              mkdir -p "${workdir}"
              mkdir -p "${sbomsDir}"

              # Check count of curl calls
              if [ "$(wc -l < "$workdir/mock_curl.txt")" -ne 2 ]; then
                echo "TEST FAILED: curl was expected to be called 2 times. Actual calls:"
                cat "$workdir/mock_curl.txt"
                exit 1
              else
                echo "TEST PASSED: Curl has been called 2 times"
              fi
