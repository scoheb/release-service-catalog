---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-run-file-updates
spec:
  description: |
    Run the run-file-updates task and verify if the internalrequests were created and the replacements were done
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        params:
          - name: subdirectory
            type: string
        steps:
          - name: create-crs
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(workspaces.data.path)/$(params.subdirectory)"
              yq -o json > "$(workspaces.data.path)/$(params.subdirectory)/rpa.json" << EOF
              apiVersion: appstudio.redhat.com/v1alpha1
              kind: ReleasePlanAdmission
              metadata:
                name: releaseplanadmission-sample
                namespace: default
              spec:
                application: foo
                origin: foo
                data:
                      fileUpdates:
                        - repo: https://gitlab.cee.redhat.com/foo
                          paths:
                            - path: foo
                              replacements:
                                - key: bar
                                  replacement: baz
                        - repo: https://gitlab.cee.redhat.com/bar
                          paths:
                            - path: bar
                              replacements:
                                - key: baz
                                  replacement: qux
                        - repo: https://gitlab.cee.redhat.com/foobar
                          paths:
                            - path: foobar
                              replacements:
                                - key: ".spec.containers[].image"
                                  replacement: "|image:.*|image: {{ .components[].containerImage }}|"
              EOF

              mkdir "$(workspaces.data.path)/$(params.subdirectory)/results"
              yq -o json > "$(workspaces.data.path)/$(params.subdirectory)/snapshot_spec.json" << EOF
              {
                  "application": "foo-app",
                  "artifacts": {},
                  "components": [
                      {
                          "containerImage": "test-container-foo:bar",
                          "name": "test-container-foo",
                          "source": {
                              "git": {
                                  "context": "./",
                                  "dockerfileUrl": "build/Dockerfile",
                                  "revision": "foo",
                                  "url": "https://github.com/foo/bar"
                              }
                          },
                          "repository": "test/foo/bar"
                      }]
              }
              EOF
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(workspaces.data.path)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(workspaces.data.path)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
            env:
              - name: IMAGE_EXPIRES_AFTER
                value: 1d
              - name: "ORAS_OPTIONS"
                value: "--insecure"
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: run-task
      taskRef:
        name: run-file-updates
      params:
        - name: fileUpdatesPath
          value: "$(context.pipelineRun.uid)/rpa.json"
        - name: synchronously
          value: "false"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot_spec.json
        - name: dataPath
          value: ""
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(workspaces.data.path)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      runAfter:
        - setup
      workspaces:
        - name: data
          workspace: tests-workspace
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(workspaces.data.path)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
        workspaces:
          - name: data
        steps:
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(workspaces.data.path)/$(params.subdirectory)
            env:
              - name: "ORAS_OPTIONS"
                value: "--insecure"
            computeResources: {}
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/bin/bash
              set -ex

              # Get application
              application=$(jq -r '.application' "$(workspaces.data.path)/$(params.subdirectory)/snapshot_spec.json")

              # Parse the input json file
              fileUpdates=$(jq -r '.spec.data.fileUpdates | length' "$(workspaces.data.path)/$(params.subdirectory)/rpa.json")

              # Fetch all the InternalRequest resources
              allRequests=$(kubectl get InternalRequest -o json)
              
              # Count the number of InternalRequests
              requestsCount=$(echo "$allRequests" | jq -r '.items | length')

              # Check if the number of InternalRequests is as expected
              if [ "$requestsCount" -ne "$fileUpdates" ]; then
                echo "Unexpected number of InternalRequests. Expected: $fileUpdates, Found: $requestsCount"
                exit 1
              fi

              # Loop over the fileUpdates
              i=0
              while [ "$i" -lt "$fileUpdates" ]
              do

                # check to make sure we have the InternalRequest PipelineRun and TaskRun info
                internalRequestPipelineRunName="$(jq -r --argjson i "$i" \
                    '.items[$i].status.results.internalRequestPipelineRunName // ""' <<< "$allRequests")"
                internalRequestTaskRunName="$(jq -r --argjson i "$i" \
                    '.items[$i].status.results.internalRequestTaskRunName // ""' <<< "$allRequests")"
                test "${internalRequestPipelineRunName}" != ""
                test "${internalRequestTaskRunName}" != ""

                repo=$(jq -r --argjson i "$i" '.spec.data.fileUpdates[$i].repo' \
                        "$(workspaces.data.path)/$(params.subdirectory)/rpa.json")

                # Check if ref is present in the input file. If not, set it to 'main'
                ref=$(jq -r --argjson i "$i" '.spec.data.fileUpdates[$i].ref // "main"' \
                        "$(workspaces.data.path)/$(params.subdirectory)/rpa.json")

                # check if requestApplication is correct
                requestApplication=$(echo "$allRequests" | \
                  jq -r --arg application "$application" '.items[] | select(.spec.params.application == $application)')
                if [ -z "$requestApplication" ]; then
                  echo "No InternalRequest found with application: $application"
                  exit 1
                fi

                # Check if an InternalRequest with the same repo exists
                requestRepo=$(echo "$allRequests" | \
                              jq -r --arg repo "$repo" '.items[] | select(.spec.params.repo == $repo)')
              
                if [ -z "$requestRepo" ]; then
                  echo "No InternalRequest found with repo: $repo"
                  exit 1
                fi

                # Check if the 'pipelineRef' field contains the 'process-file-updates' pipeline
                if [[ "$(echo "$requestRepo" | jq -r '.spec.pipeline.pipelineRef.params[2].value' )" \
                  != "pipelines/internal/process-file-updates"* ]]; then
                  echo "InternalRequest for repo: $repo doesn't contain 'process-file-updates' in 'pipeline' field"
                  exit 1
                fi

                # Check if the 'ref' field matches
                if [ "$(echo "$requestRepo" | jq -r '.spec.params.ref')" != "$ref" ]; then
                  echo "InternalRequest for repo: $repo has different 'ref'. Expected: $ref"
                  exit 1
                fi

                # Check if the 'taskGitUrl' field matches
                if [ "$(echo "$requestRepo" | jq -r '.spec.params.taskGitUrl')" != "http://localhost" ]; then
                  echo "InternalRequest for repo: $repo has different 'taskGitUrl'. Expected: http://localhost"
                  exit 1
                fi

                # Check if the 'taskGitRevision' field matches
                if [ "$(echo "$requestRepo" | jq -r '.spec.params.taskGitRevision')" != "main" ]; then
                  echo "InternalRequest for repo: $repo has different 'taskGitRevision'. Expected: main"
                  exit 1
                fi

                requestPaths="$(echo "$requestRepo" | jq -r '.spec.params.paths')"
                replacements="$(echo "$requestPaths" | jq '.[] | select(.path == "foobar") | .replacements[]')"
                if [ -n "${replacements}" ]; then
                  if [[ ! $(echo "${replacements}" | jq '.replacement') =~ "test-container-foo:bar" ]]; then
                    echo "InternalRequest for repo: $repo has different 'replacement' for foobar. 
                          Expected: 'test-container-foo:bar'"
                    exit 1
                  fi
                fi

                i=$((i+1))
              done

              echo "All checks passed successfully."
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env bash
              set -eux

              kubectl delete internalrequests --all
