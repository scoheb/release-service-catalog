---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-push-snapshot-digests-match
spec:
  description: |
    Run the push-snapshot task with the source digest matching the destination digest.
    No push will happen in this scenario.
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        params:
          - name: subdirectory
            type: string
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
            - name: "HOME"
              value: "/tekton/home"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:76021ef1e9f0f14397260ee24c9a43e37d3f83ac
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)/results"
              cat > "$(params.dataDir)/$(params.subdirectory)/mapped_snapshot.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp",
                    "containerImage": "registry.io/image:tag",
                    "repository": "registry.io/image",
                    "tags": [
                      "tag"
                    ]
                  }
                ]
              }
              EOF

              echo '{}' > "$(params.dataDir)/$(params.subdirectory)/data.json"
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: create-trusted-artifact
            args:
              - create
              - --store
              - $(params.ociStorage)
              - $(results.sourceDataArtifact.path)=$(params.dataDir)/$(params.subdirectory)
            computeResources: { }
            image: quay.io/scoheb/build-trusted-artifacts:debug9 #quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: patch-source-data-artifact-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eu
              
              # this is needed to skip trusted-artifacts tasks
              # when using PVC based workspaces.
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo -n "$(params.ociStorage)" > "$(results.sourceDataArtifact.path)"
              fi
    - name: run-task
      taskRef:
        name: push-snapshot
      params:
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/mapped_snapshot.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        workspaces:
          - name: data
        params:
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
            - name: "HOME"
              value: "/tekton/home"
        steps:
          - name: skip-trusted-artifact-operations
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              
              if [ "$(params.ociStorage)" == "empty" ]; then
                echo "oci storage not detected via params.ociStorage ... skipping trusted artifacts tasks"
                mkdir -p "$(params.dataDir)/$(params.subdirectory)"
                touch "$(params.dataDir)/$(params.subdirectory)/.skip-trusted-artifacts"
              fi
          - name: use-trusted-artifact
            args:
              - use
              - $(params.sourceDataArtifact)=$(params.dataDir)/$(params.subdirectory)
            computeResources: {}
            image: quay.io/scoheb/build-trusted-artifacts:debug9 #quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:76021ef1e9f0f14397260ee24c9a43e37d3f83ac
            script: |
              #!/usr/bin/env bash
              set -eux

              if [ -f "$(params.dataDir)/$(params.subdirectory)/mock_cosign.txt" ]; then
                echo Error: cosign was not expected to be called. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_cosign.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_skopeo.txt")" != 1 ]; then
                echo Error: skopeo was expected to be called 1 time. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_skopeo.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_oras.txt")" != 2 ]; then
                echo Error: oras was expected to be called 2 times. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_oras.txt"
                exit 1
              fi

              echo Make sure the results file was still written even though no push happened
              test "$(jq -r '.images[0].name' \
                "$(params.dataDir)/$(params.subdirectory)/results/push-snapshot-results.json")" == "comp"
              test "$(jq -r '.images[0].shasum' \
                "$(params.dataDir)/$(params.subdirectory)/results/push-snapshot-results.json")" == \
                "sha256:0b770b6ec5414e841167266c96af42404e9f7049f72c21d0ab312e07c9403197"
              test "$(jq -r '.images[0].urls | length' \
                "$(params.dataDir)/$(params.subdirectory)/results/push-snapshot-results.json")" \
                == "1"
              test "$(jq -r '.images[0].arches | length' \
                "$(params.dataDir)/$(params.subdirectory)/results/push-snapshot-results.json")" \
                == "2"
      runAfter:
        - run-task
