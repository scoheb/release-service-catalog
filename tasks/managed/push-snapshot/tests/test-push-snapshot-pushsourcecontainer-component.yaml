---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-push-snapshot-pushsourcecontainer-component
spec:
  description: |
    Run the push-snapshot task with pushSourceContainer enabled via the component
  workspaces:
    - name: tests-workspace
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        params:
          - name: subdirectory
            type: string
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
            - name: "HOME"
              value: "/tekton/home"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:066a63d25546239e79533b99c83ff521a045c819
            script: |
              #!/usr/bin/env bash
              set -eux

              mkdir -p "$(params.dataDir)/$(params.subdirectory)/results"
              cat > "$(params.dataDir)/$(params.subdirectory)/snapshot.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp",
                    "containerImage": "registry.io/image@sha256:abcdefg",
                    "repository": "prod-registry.io/prod-location",
                    "source": {
                      "git": {
                        "revision": "a51005b614c359b17a24317fdb264d76b2706a5a",
                        "url": "https://github.com/abc/python-basic"
                      }
                    },
                    "tags": [
                      "testtag"
                    ],
                    "pushSourceContainer": true
                  }
                ]
              }
              EOF

              cat > "$(params.dataDir)/$(params.subdirectory)/data.json" << EOF
              {
                "mapping": {
                }
              }
              EOF
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: subdirectory
                value: $(params.subdirectory)
              - name: dataDir
                value: $(params.dataDir)
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: dataDir
                value: $(params.dataDir)
              - name: subdirectory
                value: $(params.subdirectory)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
          - name: patch-source-data-artifact-result
            ref:
              name: patch-source-data-artifact-result
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: push-snapshot
      params:
        - name: snapshotPath
          value: $(context.pipelineRun.uid)/snapshot.json
        - name: dataPath
          value: $(context.pipelineRun.uid)/data.json
        - name: retries
          value: 0
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      params:
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)/$(context.pipelineRun.uid)"
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: dataDir
          value: $(params.dataDir)
      taskSpec:
        workspaces:
          - name: data
        params:
          - name: sourceDataArtifact
            type: string
          - name: subdirectory
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
            - name: "HOME"
              value: "/tekton/home"
        steps:
          - name: skip-trusted-artifact-operations
            ref:
              name: skip-trusted-artifact-operations
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: subdirectory
                value: $(params.subdirectory)
              - name: dataDir
                value: $(params.dataDir)
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: dataDir
                value: $(params.dataDir)
              - name: subdirectory
                value: $(params.subdirectory)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:066a63d25546239e79533b99c83ff521a045c819
            script: |
              #!/usr/bin/env bash
              set -eux

              # The sha 4c0020cf1fd28563704fb5f05396899faf8ae642b94950c72c6282a507df1a03 is calculated
              # from the origin image pull spec - see oras() in mocks.sh
              cat > "$(params.dataDir)/$(params.subdirectory)/cosign_expected_calls.txt" << EOF
              copy -f registry.io/image:sha256-4c0020cf1fd28563704fb5f05396899faf8ae642b94950c72c6282a507df1a03.src\
               prod-registry.io/prod-location:sha256-4c0020cf1fd28563704fb5f05396899faf8ae642b94950c72c6282a507df1a03.src
              copy -f registry.io/image@sha256:abcdefg prod-registry.io/prod-location:testtag
              copy -f registry.io/image:sha256-4c0020cf1fd28563704fb5f05396899faf8ae642b94950c72c6282a507df1a03.src\
               prod-registry.io/prod-location:testtag-source
              EOF

              # Sort to ignore the cosign call orders as it differs from parallel execution.
              sort "$(params.dataDir)/$(params.subdirectory)/cosign_expected_calls.txt" > \
              "$(params.dataDir)/$(params.subdirectory)/cosign_expected_calls_sorted.txt"
              sort "$(params.dataDir)/$(params.subdirectory)/mock_cosign.txt" > \
              "$(params.dataDir)/$(params.subdirectory)/mock_cosign_sorted.txt"

              if [ "$(md5sum < "$(params.dataDir)/$(params.subdirectory)/cosign_expected_calls_sorted.txt")" \
                != "$(md5sum < "$(params.dataDir)/$(params.subdirectory)/mock_cosign_sorted.txt")" ]; then
                echo "Error: Expected cosign calls do not match actual calls"
                echo Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_cosign_sorted.txt"
                echo Expected calls:
                cat "$(params.dataDir)/$(params.subdirectory)/cosign_expected_calls_sorted.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_skopeo.txt")" != 1 ]; then
                echo Error: skopeo was expected to be called 1 time. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_skopeo.txt"
                exit 1
              fi

              if [ "$(wc -l < "$(params.dataDir)/$(params.subdirectory)/mock_oras.txt")" != 5 ]; then
                echo Error: oras was expected to be called 5 times. Actual calls:
                cat "$(params.dataDir)/$(params.subdirectory)/mock_oras.txt"
                exit 1
              fi

      runAfter:
        - run-task
