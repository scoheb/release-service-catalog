---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-extract-kmods-from-image
spec:
  description: >-
    Run the extract kernel modules task from an image in a specific directory.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
    - name: taskGitUrl
      type: string
      description: The git repository URL for task and StepAction resolution
      default: https://github.com/enriquebelarte/release-service-catalog.git
    - name: taskGitRevision
      type: string
      description: The git revision for task and StepAction resolution
      default: signed-kmods-release
  tasks:
    - name: setup
      taskSpec:
        params:
          - name: dataDir
            type: string
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env bash
              set -eux

              # Create the trusted artifacts data directory structure
              mkdir -p "$(params.dataDir)"

              # Create mock data in workspace for the mocks to find
              mkdir -p "$(params.dataDir)"/kmods
              touch "$(params.dataDir)"/kmods/mod1.ko
              touch "$(params.dataDir)"/kmods/mod2.ko
              touch "$(params.dataDir)"/manifest.json
      params:
        - name: dataDir
          value: $(params.dataDir)

    - name: run-task
      taskRef:
        name: extract-kmods-from-image
      params:
        - name: kmodsPath
          value: /kmods
        - name: signedKmodsPath
          value: signed-kmods
        - name: snapshot
          value: my-snapshot
        - name: snapshotPath
          value: snapshot.json
        - name: ociStorage
          value: $(params.ociStorage)
        - name: ociArtifactExpiresAfter
          value: $(params.ociArtifactExpiresAfter)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: sourceDataArtifact
          value: ""
        - name: dataDir
          value: $(params.dataDir)
      runAfter:
        - setup
    - name: check-result
      taskSpec:
        params:
          - name: dataDir
            type: string
          - name: ociStorage
            type: string
          - name: sourceDataArtifact
            type: string
            default: ""
          - name: taskGitUrl
            type: string
          - name: taskGitRevision
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: "ORAS_OPTIONS"
              value: "--insecure"
            - name: "DEBUG"
              value: ""
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-values
            image: quay.io/konflux-ci/release-service-utils:0f82be4be43294b6a96846d87ef7f7c0b9e34267
            script: |
              #!/usr/bin/env bash
              set -eux

                if [ -d "$(params.dataDir)/signed-kmods" ]; then
                  echo "SUCCESS: Signed kmods directory was found in dataDir"

                  # Check if any .ko files exist in the signed-kmods directory
                  if ls "$(params.dataDir)/signed-kmods"/*.ko 1> /dev/null 2>&1; then
                    echo "Kernel module files were extracted successfully"
                    echo "Found files:"
                    ls -la "$(params.dataDir)/signed-kmods"
                  else
                    echo "Warning: No .ko files found in signed-kmods directory"
                    echo "Directory contents:"
                    ls -la "$(params.dataDir)/signed-kmods" || echo "Directory does not exist or is empty"
                  fi

                  # Check if envfile was copied
                  if [ -f "$(params.dataDir)/signed-kmods/envfile" ]; then
                    echo "Environment file was copied successfully"
                    cat "$(params.dataDir)/signed-kmods/envfile"
                  else
                    echo "Warning: envfile not found"
                  fi
                fi
      params:
        - name: dataDir
          value: $(params.dataDir)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: $(tasks.run-task.results.sourceDataArtifact)
        - name: taskGitUrl
          value: $(params.taskGitUrl)
        - name: taskGitRevision
          value: $(params.taskGitRevision)
      runAfter:
        - run-task
