---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-extract-index-image-multiple-components
spec:
  description: |
    Run the extract-index-image task and verify the proper index image values are reported
    as task results, but when the snapshot has multiple components.
  params:
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: Expiration date for the trusted artifacts created in the
        OCI repository. An empty string means the artifacts do not expire.
      type: string
      default: "1d"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: "--insecure"
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable.
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
  tasks:
    - name: setup
      taskSpec:
        results:
          - name: sourceDataArtifact
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env sh
              set -eux

              mkdir -p "$(params.dataDir)/$(context.pipelineRun.uid)/results"
              cat > "$(params.dataDir)/$(context.pipelineRun.uid)/file.json" << EOF
              {
                "jsonBuildInfo": {
                  "arches": [
                    "amd64",
                    "arm64",
                    "ppc64le",
                    "s390x"
                  ],
                  "batch": 1234,
                  "batch_annotations": null,
                  "binary_image": "registry.redhat.io/openshift4/ose-operator-registry:v4.12",
                  "binary_image_resolved": "registry.redhat.io/openshift4/ose-operator-registry@sha256:abcdefghijkl",
                  "build_tags": [],
                  "distribution_scope": "stage",
                  "fbc_fragment": "quay.io/stage/dev/application/component@sha256:abcdefghijklm",
                  "fbc_fragment_resolved": "quay.io/stage/dev/application/component@sha256:abcdefghijklm",
                  "from_index": "redhat.com/rh/iib:v4.12",
                  "from_index_resolved": "redhat.com/rh/iib@sha256:abcdefghijklmn",
                  "id": 01,
                  "index_image": "redhat.com/rh-stage/iib:01",
                  "index_image_resolved": "redhat.com/rh-stage/iib@sha256:abcdefghijk",
                  "internal_index_image_copy": "redhat.com/rh-stage/iib:01",
                  "internal_index_image_copy_resolved": "redhat.com/rh-stage/iib@sha256:abcdefghijk",
                  "logs": {
                    "expiration": "2023-12-10T15:07:59.823273Z",
                    "url": "https:redhat.com/api/v1/builds/01/logs"
                  },
                  "request_type": "fbc-operations",
                  "state": "complete",
                  "state_reason": "The FBC fragment was successfully added in the index image",
                  "updated": "2023-09-11T15:07:59.823273Z",
                  "user": "user@REDHAT.COM"
                }
              }
              EOF
              cat > "$(params.dataDir)/internal-request-results.json" << EOF
              {
                "index_image": {
                  "target_index": "quay.io/scoheb/fbc-target-index-testing:v4.12"
                },
                "components": [
                  {
                    "fbc_fragment": "registry.io/image0@sha256:0000",
                    "target_index": "quay.io/scoheb/fbc-target-index-testing:v4.12",
                    "ocp_version": "v4.12",
                    "index_image": "redhat.com/rh-stage/iib:01",
                    "index_image_resolved": "redhat.com/rh-stage/iib@sha256:abcdefghijk",
                    "image_digests": [
                      "quay.io/a",
                      "quay.io/b"
                    ],
                    "completion_time": "2023-03-06T16:39:11.314092Z",
                    "iibLog": "Dummy IIB Log"
                  },
                  {
                    "fbc_fragment": "registry.io/image0@sha256:0000",
                    "target_index": "quay.io/scoheb/fbc-target-index-testing:v4.12",
                    "ocp_version": "v4.12",
                    "index_image": "redhat.com/rh-stage/iib:02",
                    "index_image_resolved": "redhat.com/rh-stage/iib@sha256:1234567890",
                    "image_digests": [
                      "quay.io/c",
                      "quay.io/d"
                    ],
                    "completion_time": "2023-03-06T16:39:11.314092Z",
                    "iibLog": "Dummy IIB Log"
                  }
                ]
              }
              EOF
          - name: create-trusted-artifact
            ref:
              name: create-trusted-artifact
            params:
              - name: ociStorage
                value: $(params.ociStorage)
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(results.sourceDataArtifact.path)
    - name: run-task
      taskRef:
        name: extract-index-image
      params:
        - name: inputDataFile
          value: $(params.dataDir)/$(context.pipelineRun.uid)/file.json
        - name: resultsDirPath
          value: $(context.pipelineRun.uid)/results
        - name: internalRequestResultsFile
          value: "internal-request-results.json"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: orasOptions
          value: $(params.orasOptions)
        - name: sourceDataArtifact
          value: "$(tasks.setup.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: $(params.trustedArtifactsDebug)
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
      runAfter:
        - setup
    - name: check-result
      params:
        - name: indexImage
          value: $(tasks.run-task.results.indexImage)
        - name: indexImageResolved
          value: $(tasks.run-task.results.indexImageResolved)
        - name: internalRequestResultsFile
          value: "internal-request-results.json"
        - name: sourceDataArtifact
          value: "$(tasks.run-task.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
      runAfter:
        - run-task
      taskSpec:
        params:
          - name: indexImage
            type: string
          - name: indexImageResolved
            type: string
          - name: internalRequestResultsFile
            type: string
          - name: sourceDataArtifact
            type: string
          - name: dataDir
            type: string
        volumes:
          - name: workdir
            emptyDir: {}
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          env:
            - name: IMAGE_EXPIRES_AFTER
              value: $(params.ociArtifactExpiresAfter)
            - name: "ORAS_OPTIONS"
              value: "$(params.orasOptions)"
            - name: "DEBUG"
              value: "$(params.trustedArtifactsDebug)"
        steps:
          - name: use-trusted-artifact
            ref:
              name: use-trusted-artifact
            params:
              - name: workDir
                value: $(params.dataDir)
              - name: sourceDataArtifact
                value: $(params.sourceDataArtifact)
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              # testing the compatibility
              images=$(tr -s "\n" " " <<< "$(params.indexImage)")
              resolvedImages=$(tr -s "\n" " " <<< "$(params.indexImageResolved)")

              index_image1=$(awk '{print $1}' <<< "$images")
              index_image2=$(awk '{print $2}' <<< "$images")

              index_image_resolved1=$(awk '{print $1}' <<< "$resolvedImages")
              index_image_resolved2=$(awk '{print $2}' <<< "$resolvedImages")

              echo Test the indexImage result was properly set
              test "$index_image1" == "redhat.com/rh-stage/iib:01"
              test "$index_image2" == "redhat.com/rh-stage/iib:02"

              echo Test the indexImageResolved result was properly set
              test "$index_image_resolved1" == "redhat.com/rh-stage/iib@sha256:abcdefghijk"
              test "$index_image_resolved2" == "redhat.com/rh-stage/iib@sha256:1234567890"

              # testing new format
              resultsFile="$(params.dataDir)/$(params.internalRequestResultsFile)"
              if [ "$(jq -r '.components[0].index_image' "$resultsFile")" != "redhat.com/rh-stage/iib:01" ]; then
                echo "Index image #0 does not match"
              fi
              if [ "$(jq -r '.components[1].index_image' "$resultsFile")" != "redhat.com/rh-stage/iib:02" ]; then
                echo "Index image #1 does not match"
              fi

              indexImageResolved="$(jq -r '.components[0].index_image_resolved' "$resultsFile")"
              if [ "$indexImageResolved" != "redhat.com/rh-stage/iib@sha256:abcdefghijk" ]; then
                echo "Index image resolved #1 does not match"
                exit 1
              fi

              indexImageResolved="$(jq -r '.components[1].index_image_resolved' "$resultsFile")"
              if [ "$indexImageResolved" != "redhat.com/rh-stage/iib@sha256:1234567890" ]; then
                echo "Index image resolved #0 does not match"
                exit 1
              fi
      runAfter:
        - run-task
