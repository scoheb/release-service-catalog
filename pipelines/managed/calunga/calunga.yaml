---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: calunga-push-to-pulp
spec:
  description: >-
    Release Components in a Snapshot to a pulp-backed python index. Each image in a Component is
    expected to contain a python wheel and sdist under the /releases directory.
  params:
    - name: release
      type: string
      description:
        The namespaced name (namespace/name) of the Release custom resource initiating this pipeline execution
    - name: releasePlan
      type: string
      description: The namespaced name (namespace/name) of the releasePlan
    - name: releasePlanAdmission
      type: string
      description: The namespaced name (namespace/name) of the releasePlanAdmission
    - name: releaseServiceConfig
      type: string
      description: The namespaced name (namespace/name) of the releaseServiceConfig
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: enterpriseContractPolicy
      type: string
      description: JSON representation of the EnterpriseContractPolicy
    - name: enterpriseContractExtraRuleData
      type: string
      description: |
        Extra rule data to be merged into the policy specified in params.enterpriseContractPolicy. Use syntax
        "key1=value1,key2=value2..."
      default: "pipeline_intention=release"
    - name: enterpriseContractTimeout
      type: string
      description: Timeout setting for `ec validate`
      default: 40m0s
    - name: postCleanUp
      type: string
      description: Cleans up workspace after finishing executing the pipeline
      default: "true"
    - name: verify_ec_task_bundle
      type: string
      description: The location of the bundle containing the verify-conforma task
    - name: verify_ec_task_git_revision
      type: string
      description: The git revision to be used when consuming the verify-conforma task
    - name: taskGitUrl
      type: string
      description: >-
        The url to the git repo where the release-service-catalog tasks to be used are stored.
        This is currently ignored.
      default: https://github.com/lcarva/calunga.git
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used. This is currently ignored.
    # TODO: Some of these should probably come from the RP or RPA.
    - name: pulpBaseUrl
      type: string
      default: https://mtls.internal.console.redhat.com
    - name: pulpDomain
      type: string
      default: public-calunga
    - name: pulpApiRoot
      type: string
      default: "/api/pulp/"
    - name: pulpSecretName
      type: string
      default: pulp-credentials
    - name: pulpRepository
      type: string
      default: mypypi
    - name: ociStorage
      type: string
      default: quay.io/konflux-ci/release-service-trusted-artifacts
    - name: dataDir
      description: The location where data will be stored
      type: string
      # to avoid tar extraction errors, we need to specify a subdirectory
      # inside the volume.
      default: "/var/workdir/release"
  workspaces:
    - name: release-workspace
  tasks:

    - name: verify-access-to-resources
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog.git
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/verify-access-to-resources/verify-access-to-resources.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: releasePlanAdmission
          value: $(params.releasePlanAdmission)
        - name: releaseServiceConfig
          value: $(params.releaseServiceConfig)
        - name: snapshot
          value: $(params.snapshot)
        - name: requireInternalServices
          value: "true"

    - name: collect-data
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog.git
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/collect-data/collect-data.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: releasePlanAdmission
          value: $(params.releasePlanAdmission)
        - name: releaseServiceConfig
          value: $(params.releaseServiceConfig)
        - name: snapshot
          value: $(params.snapshot)
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog.git"
        - name: taskGitRevision
          value: "production"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: dataDir
          value: $(params.dataDir)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - verify-access-to-resources

    - name: reduce-snapshot
      taskRef:
        resolver: "git"
        params:
          # TODO: Update this once fix is merged.
          - name: url
            #value: https://github.com/scoheb/release-service-catalog.git
            value: https://github.com/konflux-ci/release-service-catalog.git
          - name: revision
            #value: update-ec-cli-reduce-snapshot
            value: production
          - name: pathInRepo
            value: tasks/managed/reduce-snapshot/reduce-snapshot.yaml
      params:
        - name: SNAPSHOT
          value: $(params.dataDir)/$(tasks.collect-data.results.snapshotSpec)
        - name: SINGLE_COMPONENT
          value: $(tasks.collect-data.results.singleComponentMode)
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE
          value: snapshot/$(tasks.collect-data.results.snapshotName)
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE_NS
          value: $(tasks.collect-data.results.snapshotNamespace)
        - name: SNAPSHOT_PATH
          value: $(params.dataDir)/$(tasks.collect-data.results.snapshotSpec)
        - name: taskGitUrl
          value: "https://github.com/konflux-ci/release-service-catalog.git"
        - name: taskGitRevision
          value: "production"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.collect-data.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - collect-data

    - name: verify-conforma
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/enterprise-contract/ec-cli
          - name: revision
            # TODO: Use a specific revision.
            value: main
          - name: pathInRepo
            value: "tasks/verify-conforma-konflux-ta/0.1/verify-conforma-konflux-ta.yaml"
      params:
        - name: SNAPSHOT_FILENAME
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: SSL_CERT_DIR
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: POLICY_CONFIGURATION
          value: $(params.enterpriseContractPolicy)
        - name: STRICT
          # only set to false for development
          value: "true"
        - name: IGNORE_REKOR
          value: "true"
        - name: EXTRA_RULE_DATA
          value: $(params.enterpriseContractExtraRuleData)
        - name: SOURCE_DATA_ARTIFACT
          value: "$(tasks.reduce-snapshot.results.sourceDataArtifact)"
      runAfter:
        - reduce-snapshot

    - name: extract-binaries-from-image
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog.git
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/extract-binaries-from-image/extract-binaries-from-image.yaml
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - verify-conforma

    - name: push-py-pulp
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/lcarva/calunga.git
          - name: revision
            value: main
          - name: pathInRepo
            value: release/push-py-pulp-task.yaml
      params:
        - name: IMAGES
          value: "$(workspaces.data.path)/$(tasks.collect-data.results.snapshotSpec)"
        - name: SUBDIRECTORY
          value: $(tasks.extract-binaries-from-image.results.binaries_path)
        - name: PULP_BASE_URL
          value: $(params.pulpBaseUrl)
        - name: PULP_API_ROOT
          value: $(params.pulpApiRoot)
        - name: PULP_DOMAIN
          value: $(params.pulpDomain)
        - name: PULP_SECRET_NAME
          value: $(params.pulpSecretName)
        - name: PULP_REPOSITORY
          value: $(params.pulpRepository)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - verify-conforma
        - extract-binaries-from-image

    # TODO: Consider re-enabling this.
    # - name: update-cr-status
    #   params:
    #     - name: resource
    #       value: $(params.release)
    #     - name: resultsDirPath
    #       value: $(tasks.collect-data.results.resultsDir)
    #     - name: taskGitUrl
    #       value: "https://github.com/konflux-ci/release-service-catalog.git"
    #     - name: taskGitRevision
    #       value: "production"
    #   taskRef:
    #     resolver: "git"
    #     params:
    #       - name: url
    #         value: https://github.com/konflux-ci/release-service-catalog.git
    #       - name: revision
    #         value: production
    #       - name: pathInRepo
    #         value: tasks/managed/update-cr-status/update-cr-status.yaml
    #   workspaces:
    #     - name: data
    #       workspace: release-workspace
    #   # TODO: this probably needs to depend on something else.
    #   # runAfter:
    #   #   - run-file-updates

  finally:
    # TODO: Is this really needed?
    - name: cleanup
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/konflux-ci/release-service-catalog.git
          - name: revision
            value: production
          - name: pathInRepo
            value: tasks/managed/cleanup-workspace/cleanup-workspace.yaml
      when:
        - input: $(params.postCleanUp)
          operator: in
          values: ["true"]
      params:
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: input
          workspace: release-workspace
