---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: rh-advisories
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |-
    Tekton pipeline to release content to registry.redhat.io registry and create an advisory.
    This is a copy of v3.0.0 of the rh-push-to-registry-redhat-io pipeline, but with the advisory
    tasks added in. The plan is for this pipeline to eventually be deleted and take the place of
    the rh-push-to-registry-redhat-io pipeline.
  params:
    - name: release
      type: string
      description:
        The namespaced name (namespace/name) of the Release custom resource initiating this pipeline execution
    - name: releasePlan
      type: string
      description: The namespaced name (namespace/name) of the releasePlan
    - name: releasePlanAdmission
      type: string
      description: The namespaced name (namespace/name) of the releasePlanAdmission
    - name: releaseServiceConfig
      type: string
      description: The namespaced name (namespace/name) of the releaseServiceConfig
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: enterpriseContractPolicy
      type: string
      description: JSON representation of the EnterpriseContractPolicy
    - name: enterpriseContractExtraRuleData
      type: string
      description: |
        Extra rule data to be merged into the policy specified in params.enterpriseContractPolicy. Use syntax
        "key1=value1,key2=value2..."
      default: "pipeline_intention=release"
    - name: verify_ec_task_bundle
      type: string
      description: The location of the bundle containing the verify-enterprise-contract task
    - name: verify_ec_task_git_revision
      type: string
      description: The git revision to be used when consuming the verify-conforma task
    - name: mobster_tasks_git_revision
      type: string
      description: The git revision to be used when consuming Mobster tasks for SBOM processing
      default: 423db31868bbecb6c934f2eca6ff6a31b4f2f003
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
      default: https://github.com/konflux-ci/release-service-catalog.git
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
    - name: ociStorage
      type: string
      description: The OCI repository where the Trusted Artifacts are stored
      default: "quay.io/konflux-ci/release-service-trusted-artifacts"
    - name: orasOptions
      description: oras options to pass to Trusted Artifacts calls
      type: string
      default: ""
    - name: trustedArtifactsDebug
      description: Flag to enable debug logging in trusted artifacts. Set to a non-empty string to enable
      type: string
      default: ""
    - name: dataDir
      description: The location where data will be stored
      type: string
      # to avoid tar extraction errors, we need to specify a subdirectory
      # inside the volume.
      default: "/var/workdir/release"
  results:
    - name: advisory_url
      type: string
      value: $(tasks.create-advisory.results.advisory_url)
    - name: advisory_internal_url
      type: string
      value: $(tasks.create-advisory.results.advisory_internal_url)
  tasks:
    - name: verify-access-to-resources
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/verify-access-to-resources/verify-access-to-resources.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: releasePlanAdmission
          value: $(params.releasePlanAdmission)
        - name: releaseServiceConfig
          value: $(params.releaseServiceConfig)
        - name: snapshot
          value: $(params.snapshot)
        - name: requireInternalServices
          value: "true"
    - name: collect-data
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/collect-data/collect-data.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: releasePlanAdmission
          value: $(params.releasePlanAdmission)
        - name: releaseServiceConfig
          value: $(params.releaseServiceConfig)
        - name: snapshot
          value: $(params.snapshot)
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - verify-access-to-resources
    - name: collect-task-params
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/collect-task-params/collect-task-params.yaml
      params:
        - name: dataDir
          value: "$(params.dataDir)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: keysToExtract
          value: |
            [
              {"resultIndex": 0, "key": ".conforma.workerCount", "default": "4"},
              {"resultIndex": 1, "key": ".conforma.timeout", "default": "8h0m0s"},
              {"resultIndex": 2, "key": ".sign.cosignSecretName", "default": ""},
              {"resultIndex": 3, "key": ".pyxis.secret"},
              {"resultIndex": 4, "key": ".pyxis.server", "default": "production"}
            ]
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.collect-data.results.sourceDataArtifact)"
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
      runAfter:
        - collect-data
    - name: reduce-snapshot
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/reduce-snapshot/reduce-snapshot.yaml
      params:
        - name: SNAPSHOT
          value: $(params.dataDir)/$(tasks.collect-data.results.snapshotSpec)
        - name: SINGLE_COMPONENT
          value: $(tasks.collect-data.results.singleComponentMode)
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE
          value: snapshot/$(tasks.collect-data.results.snapshotName)
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE_NS
          value: $(tasks.collect-data.results.snapshotNamespace)
        - name: SNAPSHOT_PATH
          value: $(params.dataDir)/$(tasks.collect-data.results.snapshotSpec)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.collect-data.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - collect-data
    - name: extract-requester-from-release
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: hub/kubernetes-actions/kubernetes-actions.yaml
      params:
        - name: image
          value: "quay.io/hacbs-release/cloud-builders-kubectl\
            @sha256:8ab94be8b2b4f3d117f02d868b39540fddd225447abf4014f7ba4765cb39f753"
        - name: script
          value: |
            set -x

            NAMESPACE=$(echo $(params.release) | cut -d '/' -f 1)
            NAME=$(echo $(params.release) | cut -d '/' -f 2)

            AUTHOR=$(kubectl get release ${NAME} -n ${NAMESPACE} \
            -o=jsonpath='{.status.attribution.author}' | tee $(results.output-result.path))

            if [[ ${AUTHOR} == "" ]] ; then exit 1 ; fi
      runAfter:
        - verify-access-to-resources
    - name: apply-mapping
      retries: 3
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/apply-mapping/apply-mapping.yaml
      params:
        - name: failOnEmptyResult
          value: "true"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.reduce-snapshot.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - reduce-snapshot
    - name: filter-already-released-advisory-images
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/filter-already-released-advisory-images/filter-already-released-advisory-images.yaml
      params:
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: releasePlanAdmissionPath
          value: "$(tasks.collect-data.results.releasePlanAdmission)"
        - name: resultsDirPath
          value: "$(tasks.collect-data.results.resultsDir)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.apply-mapping.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - apply-mapping
    - name: verify-conforma
      timeout: "4h00m0s"
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: https://github.com/enterprise-contract/ec-cli
          - name: revision
            value: "$(params.verify_ec_task_git_revision)"
          - name: pathInRepo
            value: "tasks/verify-conforma-konflux-ta/0.1/verify-conforma-konflux-ta.yaml"
      params:
        - name: SNAPSHOT_FILENAME
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: SSL_CERT_DIR
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: POLICY_CONFIGURATION
          value: $(params.enterpriseContractPolicy)
        - name: STRICT
          # only set to false for development
          value: "true"
        - name: IGNORE_REKOR
          value: "true"
        - name: EXTRA_RULE_DATA
          value: $(params.enterpriseContractExtraRuleData)
        - name: TIMEOUT
          value: "$(tasks.collect-task-params.results.extractedValues[1])"
        - name: WORKERS
          value: "$(tasks.collect-task-params.results.extractedValues[0])"
        - name: SOURCE_DATA_ARTIFACT
          value: "$(tasks.filter-already-released-advisory-images.results.sourceDataArtifact)"
        - name: TRUSTED_ARTIFACTS_DEBUG
          value: "$(params.trustedArtifactsDebug)"
      runAfter:
        - filter-already-released-advisory-images
        - collect-task-params
    - name: populate-release-notes
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.filter-already-released-advisory-images.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      taskRef:
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/populate-release-notes/populate-release-notes.yaml
        resolver: git
      runAfter:
        - filter-already-released-advisory-images
    - name: embargo-check
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.populate-release-notes.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      taskRef:
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/embargo-check/embargo-check.yaml
        resolver: git
      runAfter:
        - check-data-keys
        - populate-release-notes
    - name: set-advisory-severity
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.embargo-check.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      taskRef:
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/set-advisory-severity/set-advisory-severity.yaml
        resolver: git
      runAfter:
        - populate-release-notes
        - embargo-check
        - push-snapshot
    - name: rh-sign-image-cosign
      timeout: "6h00m0s"
      when:
        - input: $(tasks.collect-task-params.results.extractedValues[2])
          operator: notin
          values: [""]
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/rh-sign-image-cosign/rh-sign-image-cosign.yaml
      params:
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: secretName
          value: "$(tasks.collect-task-params.results.extractedValues[2])"
        - name: signRegistryAccessPath
          value: "$(tasks.publish-pyxis-repository.results.signRegistryAccessPath)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.publish-pyxis-repository.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - verify-conforma
        - push-snapshot
        - collect-task-params
    - name: push-snapshot
      retries: 5
      when:
        - input: "$(tasks.apply-mapping.results.mapped)"
          operator: in
          values: ["true"]
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/push-snapshot/push-snapshot.yaml
      params:
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: resultsDirPath
          value: "$(tasks.collect-data.results.resultsDir)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.filter-already-released-advisory-images.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - rh-sign-image
    - name: rh-sign-image
      timeout: "6h00m0s"
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      retries: 3
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/rh-sign-image/rh-sign-image.yaml
      params:
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: releasePlanAdmissionPath
          value: "$(tasks.collect-data.results.releasePlanAdmission)"
        - name: requester
          value: $(tasks.extract-requester-from-release.results.output-result)
        - name: requestTimeout
          # The RADAS timeout when it fails to receive a response is 5 mins.
          # Give RADAS enough time to retry its request.
          value: 1800
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: pyxisServer
          value: $(tasks.collect-task-params.results.extractedValues[4])
        - name: pyxisSecret
          value: $(tasks.collect-task-params.results.extractedValues[3])
        - name: signRegistryAccessPath
          value: $(tasks.publish-pyxis-repository.results.signRegistryAccessPath)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.publish-pyxis-repository.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - embargo-check
        - verify-conforma
        - publish-pyxis-repository
        - extract-requester-from-release
        - collect-task-params
    - name: create-pyxis-image
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      retries: 5
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/create-pyxis-image/create-pyxis-image.yaml
      params:
        - name: server
          value: $(tasks.collect-task-params.results.extractedValues[4])
        - name: pyxisSecret
          value: $(tasks.collect-task-params.results.extractedValues[3])
        - name: rhPush
          value: "true"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.populate-release-notes.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - push-snapshot
        - collect-task-params
    - name: publish-pyxis-repository
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      retries: 5
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/publish-pyxis-repository/publish-pyxis-repository.yaml
      params:
        - name: server
          value: $(tasks.collect-task-params.results.extractedValues[4])
        - name: pyxisSecret
          value: $(tasks.collect-task-params.results.extractedValues[3])
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: resultsDirPath
          value: "$(tasks.collect-data.results.resultsDir)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.filter-already-released-advisory-images.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - collect-task-params
        - apply-mapping
    - name: push-rpm-data-to-pyxis
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      retries: 5
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/push-rpm-data-to-pyxis/push-rpm-data-to-pyxis.yaml
      params:
        - name: pyxisJsonPath
          value: $(tasks.create-pyxis-image.results.pyxisDataPath)
        - name: server
          value: $(tasks.collect-task-params.results.extractedValues[4])
        - name: pyxisSecret
          value: $(tasks.collect-task-params.results.extractedValues[3])
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.create-pyxis-image.results.sourceDataArtifact)"
        - name: subdirectory
          value: $(tasks.collect-data.results.subdirectory)
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - create-pyxis-image
        - collect-task-params
    - name: process-component-sbom
      when:
        - input: "$(tasks.collect-atlas-params.results.secretName)"
          operator: notin
          values: [""]
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      taskRef:
        params:
          - name: url
            value: https://github.com/konflux-ci/mobster.git
          - name: revision
            value: $(params.mobster_tasks_git_revision)
          - name: pathInRepo
            value: tasks/augment-component-sboms-ta/0.2/augment-component-sboms-ta.yaml
        resolver: git
      params:
        - name: snapshotSpec
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: retryAWSSecretName
          value: "$(tasks.collect-atlas-params.results.retryAWSSecretName)"
        - name: retryS3Bucket
          value: "$(tasks.collect-atlas-params.results.retryS3Bucket)"
        - name: atlasSecretName
          value: "$(tasks.collect-atlas-params.results.secretName)"
        - name: ssoTokenUrl
          value: "$(tasks.collect-atlas-params.results.ssoTokenUrl)"
        - name: atlasApiUrl
          value: "$(tasks.collect-atlas-params.results.atlasApiUrl)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.filter-already-released-advisory-images.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - collect-data
        - apply-mapping
        - collect-atlas-params
        - push-snapshot
    - name: process-product-sbom
      when:
        - input: "$(tasks.collect-atlas-params.results.secretName)"
          operator: notin
          values: [""]
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      taskRef:
        params:
          - name: url
            value: https://github.com/konflux-ci/mobster.git
          - name: revision
            value: $(params.mobster_tasks_git_revision)
          - name: pathInRepo
            value: tasks/create-product-sbom-ta/0.2/create-product-sbom-ta.yaml
        resolver: git
      params:
        - name: snapshotSpec
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: releaseData
          value: "$(tasks.collect-data.results.data)"
        - name: retryAWSSecretName
          value: "$(tasks.collect-atlas-params.results.retryAWSSecretName)"
        - name: retryS3Bucket
          value: "$(tasks.collect-atlas-params.results.retryS3Bucket)"
        - name: atlasSecretName
          value: "$(tasks.collect-atlas-params.results.secretName)"
        - name: ssoTokenUrl
          value: "$(tasks.collect-atlas-params.results.ssoTokenUrl)"
        - name: atlasApiUrl
          value: "$(tasks.collect-atlas-params.results.atlasApiUrl)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.filter-already-released-advisory-images.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - collect-data
        - apply-mapping
        - collect-atlas-params
        - push-snapshot
    - name: run-file-updates
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      params:
        - name: fileUpdatesPath
          value: $(tasks.collect-data.results.data)
        - name: jsonKey
          value: ".fileUpdates"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: resultsDirPath
          value: "$(tasks.collect-data.results.resultsDir)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.filter-already-released-advisory-images.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - push-rpm-data-to-pyxis
      taskRef:
        kind: Task
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/run-file-updates/run-file-updates.yaml
        resolver: git
    - name: check-data-keys
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: schema
          value:  $(params.taskGitUrl)/raw/$(params.taskGitRevision)/schema/dataKeys.json
        - name: systems
          value: |
            [
              {"systemName": "releaseNotes", "dynamic": false},
              {"systemName": "pyxis", "dynamic": false},
              {"systemName": "mapping", "dynamic": false},
              {"systemName": "sign", "dynamic": false}
            ]
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.populate-release-notes.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      taskRef:
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/check-data-keys/check-data-keys.yaml
        resolver: git
      runAfter:
        - populate-release-notes
    - name: collect-atlas-params
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/collect-atlas-params/collect-atlas-params.yaml
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.collect-data.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      runAfter:
        - collect-data
        - push-snapshot
    - name: create-advisory
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      retries: 5
      params:
        - name: releasePlanAdmissionPath
          value: "$(tasks.collect-data.results.releasePlanAdmission)"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: environment
          value: "$(tasks.filter-already-released-advisory-images.results.environment)"
        - name: resultsDirPath
          value: "$(tasks.collect-data.results.resultsDir)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.set-advisory-severity.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      taskRef:
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/create-advisory/create-advisory.yaml
        resolver: git
      runAfter:
        - check-data-keys
        - embargo-check
        - push-rpm-data-to-pyxis
        - run-file-updates
        - rh-sign-image
        - rh-sign-image-cosign
        - set-advisory-severity
    - name: close-advisory-issues
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
        - input: "$(tasks.filter-already-released-advisory-images.results.environment)"
          operator: in
          values: ["production"]
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: advisoryUrl
          value: "$(tasks.create-advisory.results.advisory_url)"
        - name: ociStorage
          value: $(params.ociStorage)
        - name: sourceDataArtifact
          value: "$(tasks.populate-release-notes.results.sourceDataArtifact)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      taskRef:
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/close-advisory-issues/close-advisory-issues.yaml
        resolver: git
      runAfter:
        - create-advisory
    - name: update-cr-status
      when:
        - input: "$(tasks.filter-already-released-advisory-images.results.skip_release)"
          operator: in
          values: ["false"]
      params:
        - name: resource
          value: $(params.release)
        - name: resultsDirPath
          value: $(tasks.collect-data.results.resultsDir)
        - name: ociStorage
          value: $(params.ociStorage)
        - name: resultArtifacts
          value:
            - "$(tasks.push-snapshot.results.sourceDataArtifact)=$(params.dataDir)"
            - "$(tasks.publish-pyxis-repository.results.sourceDataArtifact)=$(params.dataDir)"
            - "$(tasks.create-advisory.results.sourceDataArtifact)=$(params.dataDir)"
            - "$(tasks.run-file-updates.results.sourceDataArtifact)=$(params.dataDir)"
        - name: dataDir
          value: $(params.dataDir)
        - name: trustedArtifactsDebug
          value: "$(params.trustedArtifactsDebug)"
        - name: taskGitUrl
          value: "$(params.taskGitUrl)"
        - name: taskGitRevision
          value: "$(params.taskGitRevision)"
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/update-cr-status/update-cr-status.yaml
      runAfter:
        - create-advisory
  finally:
    - name: cleanup-internal-requests
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/managed/cleanup-internal-requests/cleanup-internal-requests.yaml
      params:
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
