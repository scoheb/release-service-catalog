---
apiVersion: tekton.dev/v1alpha1
kind: StepAction
metadata:
  name: request-signature
  labels:
    app.kubernetes.io/version: "0.1.0"
  annotations:
    tekton.dev/tags: release
spec:
  params:
    - description: A docker image of operator-pipeline-images for the steps to run in.
      name: pipeline_image
    - description: Manifest digest for the signed content, usually in the format sha256:xxx
      name: manifest_digest
    - description: Docker reference for the signed content, e.g. registry.redhat.io/redhat/community-operator-index:v4.9
      name: reference
    - description: Name of the user that requested the signing, for auditing purposes
      name: requester
    - default: 4096R/55A34A82 SHA-256
      description: The signing key id that the content is signed with
      name: sig_key_id
    - default: containerisvsign
      description: The signing key name that the content is signed with
      name: sig_key_name
    - description: Kubernetes secret name that contains the umb SSL files
      name: umb_ssl_secret_name
    - description: The key within the Kubernetes secret that contains the umb SSL cert.
      name: umb_ssl_cert_secret_key
    - description: The key within the Kubernetes secret that contains the umb SSL key.
      name: umb_ssl_key_secret_key
    - default: operatorpipelines
      description: Client name to connect to umb, usually a service account name
      name: umb_client_name
    - default: VirtualTopic.eng.robosignatory.isv.sign
      description: umb topic to listen to for responses with signed content
      name: umb_listen_topic
    - default: VirtualTopic.eng.operatorpipelines.isv.sign
      description: umb topic to publish to for requesting signing
      name: umb_publish_topic
    - default: umb.api.redhat.com
      description: umb host to connect to for messaging
      name: umb_url
  results:
    - name: signature_data_file
    - name: signature_data
  env:
    - name: UmbCert
      valueFrom:
        secretKeyRef:
          name: $(params.umb_ssl_secret_name)
          key: $(params.umb_ssl_cert_secret_key)
    - name: UmbKey
      valueFrom:
        secretKeyRef:
          name: $(params.umb_ssl_secret_name)
          key: $(params.umb_ssl_key_secret_key)
    - name: UMB_CERT_PATH
      value: "/tmp/crt"
    - name: UMB_KEY_PATH
      value: "/tmp/key"
    - name: manifest_digest
      value: $(params.manifest_digest)
    - name: reference
      value: $(params.reference)
    - name: requester
      value: $(params.requester)
    - name: sig_key_id
      value: $(params.sig_key_id)
    - name: sig_key_name
      value: $(params.sig_key_name)
    - name: umb_ssl_secret_name
      value: $(params.umb_ssl_secret_name)
    - name: umb_ssl_cert_secret_key
      value: $(params.umb_ssl_cert_secret_key)
    - name: umb_client_name
      value: $(params.umb_client_name)
    - name: umb_listen_topic
      value: $(params.umb_listen_topic)
    - name: umb_publish_topic
      value: $(params.umb_publish_topic)
    - name: umb_url
      value: $(params.umb_url)
  image: "$(params.pipeline_image)"
  script: |
      #!/usr/bin/env /bin/bash
      set -x

      MAX_RETRIES=3
      RETRY_DELAY=5 # Initial delay
    
      set +x
      # This helps with Shellcheck warning
      echo "${UmbCert:?}" > /tmp/crt
      echo "${UmbKey:?}" > /tmp/key
      set -x
            
      echo "Requesting signing from RADAS"
      for ((i=1; i<=MAX_RETRIES; i++)); do
        if request-signature \
          --manifest-digest "${manifest_digest}" \
          --output signing_response.json \
          --reference "${reference}" \
          --requester "${requester}" \
          --sig-key-id "${sig_key_id}" \
          --sig-key-name "${sig_key_name}" \
          --umb-client-name "${umb_client_name}" \
          --umb-listen-topic "${umb_listen_topic}" \
          --umb-publish-topic "${umb_publish_topic}" \
          --umb-url "${umb_url}" \
          --verbose
        then
          echo "request-signature command succeeded."
          break
        elif [ $i -eq $MAX_RETRIES ]; then
          echo "Max retries reached. Exiting."
          exit 1
        else
          echo "Attempt $i failed. Retrying in $RETRY_DELAY seconds..."
          sleep $RETRY_DELAY
          RETRY_DELAY=$((RETRY_DELAY * 2))  # Exponential backoff
        fi
      done

      SIG_DATA=$(cat signing_response.json)
      echo "Signed claims and their metadata: "
      echo -n "$SIG_DATA" | tee "$(step.results.signature_data.path)"
      echo -n signing_response.json | tee "$(step.results.signature_data_file.path)"
  workingDir: "$(workspaces.source.path)"
